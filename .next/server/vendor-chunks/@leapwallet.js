/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@leapwallet";
exports.ids = ["vendor-chunks/@leapwallet"];
exports.modules = {

/***/ "(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/config.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@leapwallet/cosmos-snap-provider/dist/config.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultSnapOrigin = void 0;\nexports.defaultSnapOrigin = (_a = process.env.SNAP_ORIGIN) !== null && _a !== void 0 ? _a : `npm:@leapwallet/metamask-cosmos-snap`;\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlYXB3YWxsZXQvY29zbW9zLXNuYXAtcHJvdmlkZXIvZGlzdC9jb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAbGVhcHdhbGxldFxcY29zbW9zLXNuYXAtcHJvdmlkZXJcXGRpc3RcXGNvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfYTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdFNuYXBPcmlnaW4gPSB2b2lkIDA7XG5leHBvcnRzLmRlZmF1bHRTbmFwT3JpZ2luID0gKF9hID0gcHJvY2Vzcy5lbnYuU05BUF9PUklHSU4pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGBucG06QGxlYXB3YWxsZXQvbWV0YW1hc2stY29zbW9zLXNuYXBgO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/constants/chainInfo.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@leapwallet/cosmos-snap-provider/dist/constants/chainInfo.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Chains = {\n    'eightball-1': {\n        chainId: 'eightball-1',\n        chainName: '8ball',\n        bech32Config: {\n            bech32PrefixAccAddr: '8ball',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uebl',\n        decimals: 6,\n    },\n    'agoric-3': {\n        chainId: 'agoric-3',\n        chainName: 'agoric',\n        bech32Config: {\n            bech32PrefixAccAddr: 'agoric',\n        },\n        bip44: {\n            coinType: 564,\n        },\n        denom: 'ubld',\n        decimals: 6,\n    },\n    'akashnet-2': {\n        chainId: 'akashnet-2',\n        chainName: 'akash',\n        bech32Config: {\n            bech32PrefixAccAddr: 'akash',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uakt',\n        decimals: 6,\n    },\n    'archway-1': {\n        chainId: 'archway-1',\n        chainName: 'archway',\n        bech32Config: {\n            bech32PrefixAccAddr: 'archway',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'aarch',\n        decimals: 18,\n    },\n    arkh: {\n        chainId: 'arkh',\n        chainName: 'arkh',\n        bech32Config: {\n            bech32PrefixAccAddr: 'arkh',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'arkh',\n        decimals: 6,\n    },\n    'xstaxy-1': {\n        chainId: 'xstaxy-1',\n        chainName: 'aura',\n        bech32Config: {\n            bech32PrefixAccAddr: 'aura',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uaura',\n        decimals: 6,\n    },\n    'axelar-dojo-1': {\n        chainId: 'axelar-dojo-1',\n        chainName: 'axelar',\n        bech32Config: {\n            bech32PrefixAccAddr: 'axelar',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uaxl',\n        decimals: 6,\n    },\n    'laozi-mainnet': {\n        chainId: 'laozi-mainnet',\n        chainName: 'bandchain',\n        bech32Config: {\n            bech32PrefixAccAddr: 'band',\n        },\n        bip44: {\n            coinType: 494,\n        },\n        denom: 'uband',\n        decimals: 6,\n    },\n    'beezee-1': {\n        chainId: 'beezee-1',\n        chainName: 'beezee',\n        bech32Config: {\n            bech32PrefixAccAddr: 'bze',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ubze',\n        decimals: 6,\n    },\n    'bitcanna-1': {\n        chainId: 'bitcanna-1',\n        chainName: 'bitcanna',\n        bech32Config: {\n            bech32PrefixAccAddr: 'bcna',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ubcna',\n        decimals: 6,\n    },\n    'bitsong-2b': {\n        chainId: 'bitsong-2b',\n        chainName: 'bitsong',\n        bech32Config: {\n            bech32PrefixAccAddr: 'bitsong',\n        },\n        bip44: {\n            coinType: 639,\n        },\n        denom: 'ubtsg',\n        decimals: 6,\n    },\n    'bluzelle-9': {\n        chainId: 'bluzelle-9',\n        chainName: 'bluzelle',\n        bech32Config: {\n            bech32PrefixAccAddr: 'bluzelle',\n        },\n        bip44: {\n            coinType: 483,\n        },\n        denom: 'ubnt',\n        decimals: 6,\n    },\n    bostrom: {\n        chainId: 'bostrom',\n        chainName: 'bostrom',\n        bech32Config: {\n            bech32PrefixAccAddr: 'bostrom',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'boot',\n        decimals: 0,\n    },\n    'carbon-1': {\n        chainId: 'carbon-1',\n        chainName: 'carbon',\n        bech32Config: {\n            bech32PrefixAccAddr: 'swth',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'swth',\n        decimals: 8,\n    },\n    'perun-1': {\n        chainId: 'perun-1',\n        chainName: 'chain4energy',\n        bech32Config: {\n            bech32PrefixAccAddr: 'c4e',\n        },\n        bip44: {\n            coinType: 4444,\n        },\n        denom: 'uc4e',\n        decimals: 6,\n    },\n    celestia: {\n        chainId: 'celestia',\n        chainName: 'Celestia',\n        bech32Config: {\n            bech32PrefixAccAddr: 'celestia',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'utia',\n        decimals: 6,\n    },\n    'cheqd-mainnet-1': {\n        chainId: 'cheqd-mainnet-1',\n        chainName: 'cheqd',\n        bech32Config: {\n            bech32PrefixAccAddr: 'cheqd',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ncheq',\n        decimals: 9,\n    },\n    'comdex-1': {\n        chainId: 'comdex-1',\n        chainName: 'comdex',\n        bech32Config: {\n            bech32PrefixAccAddr: 'comdex',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ucmdx',\n        decimals: 6,\n    },\n    'commercio-3': {\n        chainId: 'commercio-3',\n        chainName: 'commercionetwork',\n        bech32Config: {\n            bech32PrefixAccAddr: 'did:com:',\n        },\n        bip44: {\n            coinType: 701,\n        },\n        denom: 'ucommercio',\n        decimals: 6,\n    },\n    'centauri-1': {\n        chainId: 'centauri-1',\n        chainName: 'composable',\n        bech32Config: {\n            bech32PrefixAccAddr: 'centauri',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ppica',\n        decimals: 12,\n    },\n    'coreum-mainnet-1': {\n        chainId: 'coreum-mainnet-1',\n        chainName: 'coreum',\n        bech32Config: {\n            bech32PrefixAccAddr: 'core',\n        },\n        bip44: {\n            coinType: 990,\n        },\n        denom: 'ucore',\n        decimals: 6,\n    },\n    'cosmoshub-4': {\n        chainId: 'cosmoshub-4',\n        chainName: 'cosmoshub',\n        bech32Config: {\n            bech32PrefixAccAddr: 'cosmos',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uatom',\n        decimals: 6,\n    },\n    'crescent-1': {\n        chainId: 'crescent-1',\n        chainName: 'crescent',\n        bech32Config: {\n            bech32PrefixAccAddr: 'cre',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ucre',\n        decimals: 6,\n    },\n    'crypto-org-chain-mainnet-1': {\n        chainId: 'crypto-org-chain-mainnet-1',\n        chainName: 'cryptoorgchain',\n        bech32Config: {\n            bech32PrefixAccAddr: 'cro',\n        },\n        bip44: {\n            coinType: 394,\n        },\n        denom: 'basecro',\n        decimals: 8,\n    },\n    'cudos-1': {\n        chainId: 'cudos-1',\n        chainName: 'cudos',\n        bech32Config: {\n            bech32PrefixAccAddr: 'cudos',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'acudos',\n        decimals: 18,\n    },\n    'mainnet-3': {\n        chainId: 'mainnet-3',\n        chainName: 'decentr',\n        bech32Config: {\n            bech32PrefixAccAddr: 'decentr',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'udec',\n        decimals: 6,\n    },\n    'morocco-1': {\n        chainId: 'morocco-1',\n        chainName: 'terpnetwork',\n        bech32Config: {\n            bech32PrefixAccAddr: 'terp',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uterp',\n        decimals: 6,\n    },\n    'desmos-mainnet': {\n        chainId: 'desmos-mainnet',\n        chainName: 'desmos',\n        bech32Config: {\n            bech32PrefixAccAddr: 'desmos',\n        },\n        bip44: {\n            coinType: 852,\n        },\n        denom: 'udsm',\n        decimals: 6,\n    },\n    'dig-1': {\n        chainId: 'dig-1',\n        chainName: 'dig',\n        bech32Config: {\n            bech32PrefixAccAddr: 'dig',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'udig',\n        decimals: 6,\n    },\n    dydx: {\n        chainId: 'dydx-mainnet-1',\n        chainName: 'dYdX Protocol',\n        bech32Config: {\n            bech32PrefixAccAddr: 'dydx',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'DYDX',\n        decimals: 18,\n    },\n    'dyson-mainnet-01': {\n        chainId: 'dyson-mainnet-01',\n        chainName: 'dyson',\n        bech32Config: {\n            bech32PrefixAccAddr: 'dys',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'dys',\n        decimals: 0,\n    },\n    'emoney-3': {\n        chainId: 'emoney-3',\n        chainName: 'emoney',\n        bech32Config: {\n            bech32PrefixAccAddr: 'emoney',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ungm',\n        decimals: 6,\n    },\n    'empowerchain-1': {\n        chainId: 'empowerchain-1',\n        chainName: 'empowerchain',\n        bech32Config: {\n            bech32PrefixAccAddr: 'empower',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'umpwr',\n        decimals: 6,\n    },\n    'fetchhub-4': {\n        chainId: 'fetchhub-4',\n        chainName: 'fetchhub',\n        bech32Config: {\n            bech32PrefixAccAddr: 'fetch',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'afet',\n        decimals: 18,\n    },\n    'colosseum-1': {\n        chainId: 'colosseum-1',\n        chainName: 'firmachain',\n        bech32Config: {\n            bech32PrefixAccAddr: 'firma',\n        },\n        bip44: {\n            coinType: 7777777,\n        },\n        denom: 'ufct',\n        decimals: 6,\n    },\n    'galaxy-1': {\n        chainId: 'galaxy-1',\n        chainName: 'galaxy',\n        bech32Config: {\n            bech32PrefixAccAddr: 'galaxy',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uglx',\n        decimals: 6,\n    },\n    'genesis_29-2': {\n        chainId: 'genesis_29-2',\n        chainName: 'genesisl1',\n        bech32Config: {\n            bech32PrefixAccAddr: 'genesis',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'el1',\n        decimals: 18,\n    },\n    gitopia: {\n        chainId: 'gitopia',\n        chainName: 'gitopia',\n        bech32Config: {\n            bech32PrefixAccAddr: 'gitopia',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ulore',\n        decimals: 6,\n    },\n    'gravity-bridge-3': {\n        chainId: 'gravity-bridge-3',\n        chainName: 'gravitybridge',\n        bech32Config: {\n            bech32PrefixAccAddr: 'gravity',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ugraviton',\n        decimals: 6,\n    },\n    Antora: {\n        chainId: 'Antora',\n        chainName: 'idep',\n        bech32Config: {\n            bech32PrefixAccAddr: 'idep',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'idep',\n        decimals: 6,\n    },\n    'ixo-5': {\n        chainId: 'ixo-5',\n        chainName: 'impacthub',\n        bech32Config: {\n            bech32PrefixAccAddr: 'ixo',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uixo',\n        decimals: 6,\n    },\n    'irishub-1': {\n        chainId: 'irishub-1',\n        chainName: 'irisnet',\n        bech32Config: {\n            bech32PrefixAccAddr: 'iaa',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uiris',\n        decimals: 6,\n    },\n    'jackal-1': {\n        chainId: 'jackal-1',\n        chainName: 'jackal',\n        bech32Config: {\n            bech32PrefixAccAddr: 'jkl',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ujkl',\n        decimals: 6,\n    },\n    'juno-1': {\n        chainId: 'juno-1',\n        chainName: 'juno',\n        bech32Config: {\n            bech32PrefixAccAddr: 'juno',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ujuno',\n        decimals: 6,\n    },\n    'kava_2222-10': {\n        chainId: 'kava_2222-10',\n        chainName: 'kava',\n        bech32Config: {\n            bech32PrefixAccAddr: 'kava',\n        },\n        bip44: {\n            coinType: 459,\n        },\n        denom: 'ukava',\n        decimals: 6,\n    },\n    'kichain-2': {\n        chainId: 'kichain-2',\n        chainName: 'kichain',\n        bech32Config: {\n            bech32PrefixAccAddr: 'ki',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uxki',\n        decimals: 6,\n    },\n    'kaiyo-1': {\n        chainId: 'kaiyo-1',\n        chainName: 'kujira',\n        bech32Config: {\n            bech32PrefixAccAddr: 'kujira',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ukuji',\n        decimals: 6,\n    },\n    'kyve-1': {\n        chainId: 'kyve-1',\n        chainName: 'kyve',\n        bech32Config: {\n            bech32PrefixAccAddr: 'kyve',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ukyve',\n        decimals: 6,\n    },\n    'likecoin-mainnet-2': {\n        chainId: 'likecoin-mainnet-2',\n        chainName: 'likecoin',\n        bech32Config: {\n            bech32PrefixAccAddr: 'like',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'nanolike',\n        decimals: 9,\n    },\n    'loyal-main-02': {\n        chainId: 'loyal-main-02',\n        chainName: 'loyal',\n        bech32Config: {\n            bech32PrefixAccAddr: 'loyal',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ulyl',\n        decimals: 6,\n    },\n    LumenX: {\n        chainId: 'LumenX',\n        chainName: 'lumenx',\n        bech32Config: {\n            bech32PrefixAccAddr: 'lumen',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ulumen',\n        decimals: 6,\n    },\n    'lum-network-1': {\n        chainId: 'lum-network-1',\n        chainName: 'lumnetwork',\n        bech32Config: {\n            bech32PrefixAccAddr: 'lum',\n        },\n        bip44: {\n            coinType: 880,\n        },\n        denom: 'ulum',\n        decimals: 6,\n    },\n    'mars-1': {\n        chainId: 'mars-1',\n        chainName: 'mars',\n        bech32Config: {\n            bech32PrefixAccAddr: 'mars',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'umars',\n        decimals: 6,\n    },\n    'mayachain-mainnet-v1': {\n        chainId: 'mayachain-mainnet-v1',\n        chainName: 'mayachain',\n        bech32Config: {\n            bech32PrefixAccAddr: 'maya',\n        },\n        bip44: {\n            coinType: 931,\n        },\n        denom: 'cacao',\n        decimals: 10,\n    },\n    'meme-1': {\n        chainId: 'meme-1',\n        chainName: 'meme',\n        bech32Config: {\n            bech32PrefixAccAddr: 'meme',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'umeme',\n        decimals: 6,\n    },\n    'migaloo-1': {\n        chainId: 'migaloo-1',\n        chainName: 'migaloo',\n        bech32Config: {\n            bech32PrefixAccAddr: 'migaloo',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uwhale',\n        decimals: 6,\n    },\n    mainnet: {\n        chainId: 'mainnet',\n        chainName: 'mises',\n        bech32Config: {\n            bech32PrefixAccAddr: 'mises',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'umis',\n        decimals: 6,\n    },\n    'mun-1': {\n        chainId: 'mun-1',\n        chainName: 'mun',\n        bech32Config: {\n            bech32PrefixAccAddr: 'mun',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'umun',\n        decimals: 6,\n    },\n    'neutron-1': {\n        chainId: 'neutron-1',\n        chainName: 'neutron',\n        bech32Config: {\n            bech32PrefixAccAddr: 'neutron',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'untrn',\n        decimals: 6,\n    },\n    'noble-1': {\n        chainId: 'noble-1',\n        chainName: 'noble',\n        bech32Config: {\n            bech32PrefixAccAddr: 'noble',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ustake',\n        decimals: 6,\n    },\n    'nois-1': {\n        chainId: 'nois-1',\n        chainName: 'nois',\n        bech32Config: {\n            bech32PrefixAccAddr: 'nois',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'unois',\n        decimals: 6,\n    },\n    'pirin-1': {\n        chainId: 'pirin-1',\n        chainName: 'nolus',\n        bech32Config: {\n            bech32PrefixAccAddr: 'nolus',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'unls',\n        decimals: 6,\n    },\n    nyx: {\n        chainId: 'nyx',\n        chainName: 'nyx',\n        bech32Config: {\n            bech32PrefixAccAddr: 'n',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'unyx',\n        decimals: 6,\n    },\n    octa: {\n        chainId: 'octa',\n        chainName: 'octa',\n        bech32Config: {\n            bech32PrefixAccAddr: 'octa',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uocta',\n        decimals: 6,\n    },\n    'odin-mainnet-freya': {\n        chainId: 'odin-mainnet-freya',\n        chainName: 'odin',\n        bech32Config: {\n            bech32PrefixAccAddr: 'odin',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'loki',\n        decimals: 6,\n    },\n    'omniflixhub-1': {\n        chainId: 'omniflixhub-1',\n        chainName: 'omniflixhub',\n        bech32Config: {\n            bech32PrefixAccAddr: 'omniflix',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uflix',\n        decimals: 6,\n    },\n    'onomy-mainnet-1': {\n        chainId: 'onomy-mainnet-1',\n        chainName: 'onomy',\n        bech32Config: {\n            bech32PrefixAccAddr: 'onomy',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'anom',\n        decimals: 18,\n    },\n    Oraichain: {\n        chainId: 'Oraichain',\n        chainName: 'oraichain',\n        bech32Config: {\n            bech32PrefixAccAddr: 'orai',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'orai',\n        decimals: 6,\n    },\n    'osmosis-1': {\n        chainId: 'osmosis-1',\n        chainName: 'osmosis',\n        bech32Config: {\n            bech32PrefixAccAddr: 'osmo',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uosmo',\n        decimals: 6,\n    },\n    'panacea-3': {\n        chainId: 'panacea-3',\n        chainName: 'panacea',\n        bech32Config: {\n            bech32PrefixAccAddr: 'panacea',\n        },\n        bip44: {\n            coinType: 371,\n        },\n        denom: 'umed',\n        decimals: 6,\n    },\n    'passage-2': {\n        chainId: 'passage-2',\n        chainName: 'passage',\n        bech32Config: {\n            bech32PrefixAccAddr: 'pasg',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'upasg',\n        decimals: 6,\n    },\n    'passage-1': {\n        chainId: 'passage-1',\n        chainName: 'passage1',\n        bech32Config: {\n            bech32PrefixAccAddr: 'pasg',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'upasg',\n        decimals: 6,\n    },\n    'core-1': {\n        chainId: 'core-1',\n        chainName: 'persistence',\n        bech32Config: {\n            bech32PrefixAccAddr: 'persistence',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uxprt',\n        decimals: 6,\n    },\n    'pio-mainnet-1': {\n        chainId: 'pio-mainnet-1',\n        chainName: 'provenance',\n        bech32Config: {\n            bech32PrefixAccAddr: 'pb',\n        },\n        bip44: {\n            coinType: 505,\n        },\n        denom: 'nhash',\n        decimals: 9,\n    },\n    'quasar-1': {\n        chainId: 'quasar-1',\n        chainName: 'quasar',\n        bech32Config: {\n            bech32PrefixAccAddr: 'quasar',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uqsr',\n        decimals: 6,\n    },\n    'quicksilver-2': {\n        chainId: 'quicksilver-2',\n        chainName: 'quicksilver',\n        bech32Config: {\n            bech32PrefixAccAddr: 'quick',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uqck',\n        decimals: 6,\n    },\n    'qwoyn-1': {\n        chainId: 'qwoyn-1',\n        chainName: 'qwoyn',\n        bech32Config: {\n            bech32PrefixAccAddr: 'qwoyn',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uqwoyn',\n        decimals: 6,\n    },\n    'reb_1111-1': {\n        chainId: 'reb_1111-1',\n        chainName: 'rebus',\n        bech32Config: {\n            bech32PrefixAccAddr: 'rebus',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'arebus',\n        decimals: 18,\n    },\n    'regen-1': {\n        chainId: 'regen-1',\n        chainName: 'regen',\n        bech32Config: {\n            bech32PrefixAccAddr: 'regen',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uregen',\n        decimals: 6,\n    },\n    'titan-1': {\n        chainId: 'titan-1',\n        chainName: 'rizon',\n        bech32Config: {\n            bech32PrefixAccAddr: 'rizon',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uatolo',\n        decimals: 6,\n    },\n    'secret-4': {\n        chainId: 'secret-4',\n        chainName: 'secretnetwork',\n        bech32Config: {\n            bech32PrefixAccAddr: 'secret',\n        },\n        bip44: {\n            coinType: 529,\n        },\n        denom: 'uscrt',\n        decimals: 6,\n    },\n    'pacific-1': {\n        chainId: 'pacific-1',\n        chainName: 'sei',\n        bech32Config: {\n            bech32PrefixAccAddr: 'sei',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'usei',\n        decimals: 6,\n    },\n    'sentinelhub-2': {\n        chainId: 'sentinelhub-2',\n        chainName: 'sentinel',\n        bech32Config: {\n            bech32PrefixAccAddr: 'sent',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'udvpn',\n        decimals: 6,\n    },\n    'ShareRing-VoyagerNet': {\n        chainId: 'ShareRing-VoyagerNet',\n        chainName: 'shareledger',\n        bech32Config: {\n            bech32PrefixAccAddr: 'shareledger',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'nshr',\n        decimals: 9,\n    },\n    'shentu-2.2': {\n        chainId: 'shentu-2.2',\n        chainName: 'shentu',\n        bech32Config: {\n            bech32PrefixAccAddr: 'certik',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uctk',\n        decimals: 6,\n    },\n    'sommelier-3': {\n        chainId: 'sommelier-3',\n        chainName: 'sommelier',\n        bech32Config: {\n            bech32PrefixAccAddr: 'somm',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'usomm',\n        decimals: 6,\n    },\n    'stafihub-1': {\n        chainId: 'stafihub-1',\n        chainName: 'stafihub',\n        bech32Config: {\n            bech32PrefixAccAddr: 'stafi',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ufis',\n        decimals: 6,\n    },\n    'stargaze-1': {\n        chainId: 'stargaze-1',\n        chainName: 'stargaze',\n        bech32Config: {\n            bech32PrefixAccAddr: 'stars',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ustars',\n        decimals: 6,\n    },\n    'iov-mainnet-ibc': {\n        chainId: 'iov-mainnet-ibc',\n        chainName: 'starname',\n        bech32Config: {\n            bech32PrefixAccAddr: 'star',\n        },\n        bip44: {\n            coinType: 234,\n        },\n        denom: 'uiov',\n        decimals: 6,\n    },\n    'stride-1': {\n        chainId: 'stride-1',\n        chainName: 'stride',\n        bech32Config: {\n            bech32PrefixAccAddr: 'stride',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'ustrd',\n        decimals: 6,\n    },\n    'teritori-1': {\n        chainId: 'teritori-1',\n        chainName: 'teritori',\n        bech32Config: {\n            bech32PrefixAccAddr: 'tori',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'utori',\n        decimals: 6,\n    },\n    'columbus-5': {\n        chainId: 'columbus-5',\n        chainName: 'terra',\n        bech32Config: {\n            bech32PrefixAccAddr: 'terra',\n        },\n        bip44: {\n            coinType: 330,\n        },\n        denom: 'uluna',\n        decimals: 6,\n    },\n    'phoenix-1': {\n        chainId: 'phoenix-1',\n        chainName: 'terra2',\n        bech32Config: {\n            bech32PrefixAccAddr: 'terra',\n        },\n        bip44: {\n            coinType: 330,\n        },\n        denom: 'uluna',\n        decimals: 6,\n    },\n    'tgrade-mainnet-1': {\n        chainId: 'tgrade-mainnet-1',\n        chainName: 'tgrade',\n        bech32Config: {\n            bech32PrefixAccAddr: 'tgrade',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'utgd',\n        decimals: 6,\n    },\n    'umee-1': {\n        chainId: 'umee-1',\n        chainName: 'umee',\n        bech32Config: {\n            bech32PrefixAccAddr: 'umee',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uumee',\n        decimals: 6,\n    },\n    'FUND-MainNet-2': {\n        chainId: 'FUND-MainNet-2',\n        chainName: 'unification',\n        bech32Config: {\n            bech32PrefixAccAddr: 'und',\n        },\n        bip44: {\n            coinType: 5555,\n        },\n        denom: 'nund',\n        decimals: 9,\n    },\n    'ununifi-beta-v1': {\n        chainId: 'ununifi-beta-v1',\n        chainName: 'ununifi',\n        bech32Config: {\n            bech32PrefixAccAddr: 'ununifi',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'uguu',\n        decimals: 6,\n    },\n    'vidulum-1': {\n        chainId: 'vidulum-1',\n        chainName: 'vidulum',\n        bech32Config: {\n            bech32PrefixAccAddr: 'vdl',\n        },\n        bip44: {\n            coinType: 370,\n        },\n        denom: 'uvdl',\n        decimals: 6,\n    },\n    'vota-ash': {\n        chainId: 'vota-ash',\n        chainName: 'doravota',\n        bech32Config: {\n            bech32PrefixAccAddr: 'dora',\n        },\n        bip44: {\n            coinType: 118,\n        },\n        denom: 'peaka',\n        decimals: 18,\n    },\n};\nexports[\"default\"] = Chains;\n//# sourceMappingURL=chainInfo.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/constants/chainInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/cosmjs-offline-signer.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@leapwallet/cosmos-snap-provider/dist/cosmjs-offline-signer.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/* eslint jsdoc/match-description: 0 */ // --> OFF\n/* eslint require-atomic-updates: 0 */ // --> OFF\n/* eslint jsdoc/require-param: 0 */ // --> OFF\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.signArbitrary = exports.getOfflineSigner = exports.CosmjsOfflineSigner = void 0;\nconst snap_1 = __webpack_require__(/*! ./snap */ \"(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/snap.js\");\nclass CosmjsOfflineSigner {\n    constructor(chainId) {\n        this.chainId = chainId;\n    }\n    async getAccounts() {\n        const key = await (0, snap_1.getKey)(this.chainId);\n        return [\n            {\n                address: key.address,\n                algo: 'secp256k1',\n                pubkey: key.pubkey,\n            },\n        ];\n    }\n    async signDirect(signerAddress, signDoc) {\n        if (this.chainId !== signDoc.chainId) {\n            throw new Error('Chain ID does not match signer chain ID');\n        }\n        const accounts = await this.getAccounts();\n        if (accounts.find((account) => account.address !== signerAddress)) {\n            throw new Error('Signer address does not match wallet address');\n        }\n        return (0, snap_1.requestSignature)(this.chainId, signerAddress, signDoc);\n    }\n    // This has been added as a placeholder.\n    async signAmino(signerAddress, signDoc, options) {\n        if (this.chainId !== signDoc.chain_id) {\n            throw new Error('Chain ID does not match signer chain ID');\n        }\n        const accounts = await this.getAccounts();\n        if (accounts.find((account) => account.address !== signerAddress)) {\n            throw new Error('Signer address does not match wallet address');\n        }\n        return (0, snap_1.requestSignAmino)(this.chainId, signerAddress, signDoc, options);\n    }\n}\nexports.CosmjsOfflineSigner = CosmjsOfflineSigner;\n/**\n * Gives the cosmos Offline signer\n *\n * @param chainId - chainId\n * @returns CosmjsOfflineSigner\n */\nfunction getOfflineSigner(chainId) {\n    return new CosmjsOfflineSigner(chainId);\n}\nexports.getOfflineSigner = getOfflineSigner;\n/**\n * Helps to do signArbitrary of the data provided\n *\n * @param chainId - chainId\n * @param signer - signer\n * @param data - data\n * @returns signature\n */\nasync function signArbitrary(chainId, signer, data, signOptions) {\n    const { signDoc } = getADR36SignDoc(signer, data);\n    const result = await (0, snap_1.requestSignAmino)(chainId, signer, signDoc, {\n        isADR36: true,\n        preferNoSetFee: true,\n        enableExtraEntropy: signOptions === null || signOptions === void 0 ? void 0 : signOptions.enableExtraEntropy,\n    });\n    return result.signature;\n}\nexports.signArbitrary = signArbitrary;\n/**\n *\n * Gets the getADR36SignDoc of the signer and data\n *\n * @param signer - signer\n * @param data - data\n * @returns SignDoc and isADR36WithString\n */\nfunction getADR36SignDoc(signer, data) {\n    let isADR36WithString = false;\n    let b64Data = '';\n    if (typeof data === 'string') {\n        b64Data = Buffer.from(data).toString('base64');\n        isADR36WithString = true;\n    }\n    else {\n        b64Data = Buffer.from(data).toString('base64');\n    }\n    const signDoc = {\n        chain_id: '',\n        account_number: '0',\n        sequence: '0',\n        fee: {\n            gas: '0',\n            amount: [],\n        },\n        msgs: [\n            {\n                type: 'sign/MsgSignData',\n                value: {\n                    signer,\n                    b64Data,\n                },\n            },\n        ],\n        memo: '',\n    };\n    return { signDoc, isADR36WithString };\n}\n//# sourceMappingURL=cosmjs-offline-signer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlYXB3YWxsZXQvY29zbW9zLXNuYXAtcHJvdmlkZXIvZGlzdC9jb3NtanMtb2ZmbGluZS1zaWduZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcsd0JBQXdCLEdBQUcsMkJBQTJCO0FBQzlFLGVBQWUsbUJBQU8sQ0FBQyxrRkFBUTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGxlYXB3YWxsZXRcXGNvc21vcy1zbmFwLXByb3ZpZGVyXFxkaXN0XFxjb3NtanMtb2ZmbGluZS1zaWduZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQganNkb2MvbWF0Y2gtZGVzY3JpcHRpb246IDAgKi8gLy8gLS0+IE9GRlxuLyogZXNsaW50IHJlcXVpcmUtYXRvbWljLXVwZGF0ZXM6IDAgKi8gLy8gLS0+IE9GRlxuLyogZXNsaW50IGpzZG9jL3JlcXVpcmUtcGFyYW06IDAgKi8gLy8gLS0+IE9GRlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaWduQXJiaXRyYXJ5ID0gZXhwb3J0cy5nZXRPZmZsaW5lU2lnbmVyID0gZXhwb3J0cy5Db3NtanNPZmZsaW5lU2lnbmVyID0gdm9pZCAwO1xuY29uc3Qgc25hcF8xID0gcmVxdWlyZShcIi4vc25hcFwiKTtcbmNsYXNzIENvc21qc09mZmxpbmVTaWduZXIge1xuICAgIGNvbnN0cnVjdG9yKGNoYWluSWQpIHtcbiAgICAgICAgdGhpcy5jaGFpbklkID0gY2hhaW5JZDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0QWNjb3VudHMoKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0ICgwLCBzbmFwXzEuZ2V0S2V5KSh0aGlzLmNoYWluSWQpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGFkZHJlc3M6IGtleS5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIGFsZ286ICdzZWNwMjU2azEnLFxuICAgICAgICAgICAgICAgIHB1YmtleToga2V5LnB1YmtleSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgfVxuICAgIGFzeW5jIHNpZ25EaXJlY3Qoc2lnbmVyQWRkcmVzcywgc2lnbkRvYykge1xuICAgICAgICBpZiAodGhpcy5jaGFpbklkICE9PSBzaWduRG9jLmNoYWluSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2hhaW4gSUQgZG9lcyBub3QgbWF0Y2ggc2lnbmVyIGNoYWluIElEJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB0aGlzLmdldEFjY291bnRzKCk7XG4gICAgICAgIGlmIChhY2NvdW50cy5maW5kKChhY2NvdW50KSA9PiBhY2NvdW50LmFkZHJlc3MgIT09IHNpZ25lckFkZHJlc3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NpZ25lciBhZGRyZXNzIGRvZXMgbm90IG1hdGNoIHdhbGxldCBhZGRyZXNzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBzbmFwXzEucmVxdWVzdFNpZ25hdHVyZSkodGhpcy5jaGFpbklkLCBzaWduZXJBZGRyZXNzLCBzaWduRG9jKTtcbiAgICB9XG4gICAgLy8gVGhpcyBoYXMgYmVlbiBhZGRlZCBhcyBhIHBsYWNlaG9sZGVyLlxuICAgIGFzeW5jIHNpZ25BbWlubyhzaWduZXJBZGRyZXNzLCBzaWduRG9jLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYWluSWQgIT09IHNpZ25Eb2MuY2hhaW5faWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2hhaW4gSUQgZG9lcyBub3QgbWF0Y2ggc2lnbmVyIGNoYWluIElEJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB0aGlzLmdldEFjY291bnRzKCk7XG4gICAgICAgIGlmIChhY2NvdW50cy5maW5kKChhY2NvdW50KSA9PiBhY2NvdW50LmFkZHJlc3MgIT09IHNpZ25lckFkZHJlc3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NpZ25lciBhZGRyZXNzIGRvZXMgbm90IG1hdGNoIHdhbGxldCBhZGRyZXNzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBzbmFwXzEucmVxdWVzdFNpZ25BbWlubykodGhpcy5jaGFpbklkLCBzaWduZXJBZGRyZXNzLCBzaWduRG9jLCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLkNvc21qc09mZmxpbmVTaWduZXIgPSBDb3NtanNPZmZsaW5lU2lnbmVyO1xuLyoqXG4gKiBHaXZlcyB0aGUgY29zbW9zIE9mZmxpbmUgc2lnbmVyXG4gKlxuICogQHBhcmFtIGNoYWluSWQgLSBjaGFpbklkXG4gKiBAcmV0dXJucyBDb3NtanNPZmZsaW5lU2lnbmVyXG4gKi9cbmZ1bmN0aW9uIGdldE9mZmxpbmVTaWduZXIoY2hhaW5JZCkge1xuICAgIHJldHVybiBuZXcgQ29zbWpzT2ZmbGluZVNpZ25lcihjaGFpbklkKTtcbn1cbmV4cG9ydHMuZ2V0T2ZmbGluZVNpZ25lciA9IGdldE9mZmxpbmVTaWduZXI7XG4vKipcbiAqIEhlbHBzIHRvIGRvIHNpZ25BcmJpdHJhcnkgb2YgdGhlIGRhdGEgcHJvdmlkZWRcbiAqXG4gKiBAcGFyYW0gY2hhaW5JZCAtIGNoYWluSWRcbiAqIEBwYXJhbSBzaWduZXIgLSBzaWduZXJcbiAqIEBwYXJhbSBkYXRhIC0gZGF0YVxuICogQHJldHVybnMgc2lnbmF0dXJlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNpZ25BcmJpdHJhcnkoY2hhaW5JZCwgc2lnbmVyLCBkYXRhLCBzaWduT3B0aW9ucykge1xuICAgIGNvbnN0IHsgc2lnbkRvYyB9ID0gZ2V0QURSMzZTaWduRG9jKHNpZ25lciwgZGF0YSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHNuYXBfMS5yZXF1ZXN0U2lnbkFtaW5vKShjaGFpbklkLCBzaWduZXIsIHNpZ25Eb2MsIHtcbiAgICAgICAgaXNBRFIzNjogdHJ1ZSxcbiAgICAgICAgcHJlZmVyTm9TZXRGZWU6IHRydWUsXG4gICAgICAgIGVuYWJsZUV4dHJhRW50cm9weTogc2lnbk9wdGlvbnMgPT09IG51bGwgfHwgc2lnbk9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNpZ25PcHRpb25zLmVuYWJsZUV4dHJhRW50cm9weSxcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0LnNpZ25hdHVyZTtcbn1cbmV4cG9ydHMuc2lnbkFyYml0cmFyeSA9IHNpZ25BcmJpdHJhcnk7XG4vKipcbiAqXG4gKiBHZXRzIHRoZSBnZXRBRFIzNlNpZ25Eb2Mgb2YgdGhlIHNpZ25lciBhbmQgZGF0YVxuICpcbiAqIEBwYXJhbSBzaWduZXIgLSBzaWduZXJcbiAqIEBwYXJhbSBkYXRhIC0gZGF0YVxuICogQHJldHVybnMgU2lnbkRvYyBhbmQgaXNBRFIzNldpdGhTdHJpbmdcbiAqL1xuZnVuY3Rpb24gZ2V0QURSMzZTaWduRG9jKHNpZ25lciwgZGF0YSkge1xuICAgIGxldCBpc0FEUjM2V2l0aFN0cmluZyA9IGZhbHNlO1xuICAgIGxldCBiNjREYXRhID0gJyc7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICBiNjREYXRhID0gQnVmZmVyLmZyb20oZGF0YSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICBpc0FEUjM2V2l0aFN0cmluZyA9IHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBiNjREYXRhID0gQnVmZmVyLmZyb20oZGF0YSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIH1cbiAgICBjb25zdCBzaWduRG9jID0ge1xuICAgICAgICBjaGFpbl9pZDogJycsXG4gICAgICAgIGFjY291bnRfbnVtYmVyOiAnMCcsXG4gICAgICAgIHNlcXVlbmNlOiAnMCcsXG4gICAgICAgIGZlZToge1xuICAgICAgICAgICAgZ2FzOiAnMCcsXG4gICAgICAgICAgICBhbW91bnQ6IFtdLFxuICAgICAgICB9LFxuICAgICAgICBtc2dzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NpZ24vTXNnU2lnbkRhdGEnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25lcixcbiAgICAgICAgICAgICAgICAgICAgYjY0RGF0YSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbWVtbzogJycsXG4gICAgfTtcbiAgICByZXR1cm4geyBzaWduRG9jLCBpc0FEUjM2V2l0aFN0cmluZyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29zbWpzLW9mZmxpbmUtc2lnbmVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/cosmjs-offline-signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/helper/gas.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@leapwallet/cosmos-snap-provider/dist/helper/gas.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toSmall = exports.getGasPriceForChainName = void 0;\n/* eslint jsdoc/require-description: 0 */ // --> OFF\n/* eslint jsdoc/require-param-description: 0 */ // --> OFF\n/* eslint jsdoc/require-returns: 0 */ // --> OFF\nconst bignumber_js_1 = __importDefault(__webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\"));\nconst defaultDecimals = 6;\nconst getGasPriceForChainName = async (chainName, gasLevel = 'average') => {\n    var _a;\n    const gasPriceRegistry = await fetch('https://assets.leapwallet.io/cosmos-registry/v1/gas/gas-prices.json');\n    if (!gasPriceRegistry.ok) {\n        throw new Error(`Failed to get Gas price ${gasPriceRegistry.status}`);\n    }\n    const gasPrices = await gasPriceRegistry.json();\n    console.log(gasPrices, chainName, gasLevel);\n    return (_a = gasPrices === null || gasPrices === void 0 ? void 0 : gasPrices[chainName]) === null || _a === void 0 ? void 0 : _a[gasLevel];\n};\nexports.getGasPriceForChainName = getGasPriceForChainName;\n/**\n *\n * @param quantity\n * @param decimals\n */\nfunction toSmall(quantity, decimals = defaultDecimals) {\n    return new bignumber_js_1.default(quantity).times(Math.pow(10, decimals)).toFixed().toString();\n}\nexports.toSmall = toSmall;\n//# sourceMappingURL=gas.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlYXB3YWxsZXQvY29zbW9zLXNuYXAtcHJvdmlkZXIvZGlzdC9oZWxwZXIvZ2FzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLCtCQUErQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsbUJBQU8sQ0FBQyxvRUFBYztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELHdCQUF3QjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBsZWFwd2FsbGV0XFxjb3Ntb3Mtc25hcC1wcm92aWRlclxcZGlzdFxcaGVscGVyXFxnYXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvU21hbGwgPSBleHBvcnRzLmdldEdhc1ByaWNlRm9yQ2hhaW5OYW1lID0gdm9pZCAwO1xuLyogZXNsaW50IGpzZG9jL3JlcXVpcmUtZGVzY3JpcHRpb246IDAgKi8gLy8gLS0+IE9GRlxuLyogZXNsaW50IGpzZG9jL3JlcXVpcmUtcGFyYW0tZGVzY3JpcHRpb246IDAgKi8gLy8gLS0+IE9GRlxuLyogZXNsaW50IGpzZG9jL3JlcXVpcmUtcmV0dXJuczogMCAqLyAvLyAtLT4gT0ZGXG5jb25zdCBiaWdudW1iZXJfanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYmlnbnVtYmVyLmpzXCIpKTtcbmNvbnN0IGRlZmF1bHREZWNpbWFscyA9IDY7XG5jb25zdCBnZXRHYXNQcmljZUZvckNoYWluTmFtZSA9IGFzeW5jIChjaGFpbk5hbWUsIGdhc0xldmVsID0gJ2F2ZXJhZ2UnKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGdhc1ByaWNlUmVnaXN0cnkgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hc3NldHMubGVhcHdhbGxldC5pby9jb3Ntb3MtcmVnaXN0cnkvdjEvZ2FzL2dhcy1wcmljZXMuanNvbicpO1xuICAgIGlmICghZ2FzUHJpY2VSZWdpc3RyeS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBnZXQgR2FzIHByaWNlICR7Z2FzUHJpY2VSZWdpc3RyeS5zdGF0dXN9YCk7XG4gICAgfVxuICAgIGNvbnN0IGdhc1ByaWNlcyA9IGF3YWl0IGdhc1ByaWNlUmVnaXN0cnkuanNvbigpO1xuICAgIGNvbnNvbGUubG9nKGdhc1ByaWNlcywgY2hhaW5OYW1lLCBnYXNMZXZlbCk7XG4gICAgcmV0dXJuIChfYSA9IGdhc1ByaWNlcyA9PT0gbnVsbCB8fCBnYXNQcmljZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdhc1ByaWNlc1tjaGFpbk5hbWVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbZ2FzTGV2ZWxdO1xufTtcbmV4cG9ydHMuZ2V0R2FzUHJpY2VGb3JDaGFpbk5hbWUgPSBnZXRHYXNQcmljZUZvckNoYWluTmFtZTtcbi8qKlxuICpcbiAqIEBwYXJhbSBxdWFudGl0eVxuICogQHBhcmFtIGRlY2ltYWxzXG4gKi9cbmZ1bmN0aW9uIHRvU21hbGwocXVhbnRpdHksIGRlY2ltYWxzID0gZGVmYXVsdERlY2ltYWxzKSB7XG4gICAgcmV0dXJuIG5ldyBiaWdudW1iZXJfanNfMS5kZWZhdWx0KHF1YW50aXR5KS50aW1lcyhNYXRoLnBvdygxMCwgZGVjaW1hbHMpKS50b0ZpeGVkKCkudG9TdHJpbmcoKTtcbn1cbmV4cG9ydHMudG9TbWFsbCA9IHRvU21hbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nYXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/helper/gas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@leapwallet/cosmos-snap-provider/dist/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./snap */ \"(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/snap.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cosmjs-offline-signer */ \"(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/cosmjs-offline-signer.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlYXB3YWxsZXQvY29zbW9zLXNuYXAtcHJvdmlkZXIvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsa0ZBQVE7QUFDN0IsYUFBYSxtQkFBTyxDQUFDLG9GQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxvSEFBeUI7QUFDOUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBsZWFwd2FsbGV0XFxjb3Ntb3Mtc25hcC1wcm92aWRlclxcZGlzdFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zbmFwXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29zbWpzLW9mZmxpbmUtc2lnbmVyXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/snap.js":
/*!********************************************************************!*\
  !*** ./node_modules/@leapwallet/cosmos-snap-provider/dist/snap.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.experimentalSuggestChain = exports.suggestChain = exports.isLocalSnap = exports.getKey = exports.requestSignAmino = exports.requestSignature = exports.getSnap = exports.connectSnap = exports.getSnaps = void 0;\nconst bignumber_js_1 = __importDefault(__webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\"));\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/node_modules/long/umd/index.js\"));\nconst config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/config.js\");\nconst chainInfo_1 = __importDefault(__webpack_require__(/*! ./constants/chainInfo */ \"(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/constants/chainInfo.js\"));\nconst gas_1 = __webpack_require__(/*! ./helper/gas */ \"(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/helper/gas.js\");\n/**\n * The fool proof version of getting the ethereum provider suggested by\n * https://github.com/Montoya/snap-connect-test/blob/0dad2dd53ab2ecbf4b4369230d3aaaeca08c6dae/index.html#L41\n *\n * @returns the ethereum provider which supports snaps\n */\nconst getProvider = async () => {\n    let mmFound = false;\n    if ('detected' in window.ethereum) {\n        for (const provider of window.ethereum.detected) {\n            try {\n                // Detect snaps support\n                await provider.request({\n                    method: 'wallet_getSnaps',\n                });\n                // enforces MetaMask as provider\n                window.ethereum.setProvider(provider);\n                mmFound = true;\n                return provider;\n            }\n            catch (_a) {\n                // no-op\n            }\n        }\n    }\n    if (!mmFound && 'providers' in window.ethereum) {\n        for (const provider of window.ethereum.providers) {\n            try {\n                // Detect snaps support\n                await provider.request({\n                    method: 'wallet_getSnaps',\n                });\n                window.ethereum = provider;\n                mmFound = true;\n                return provider;\n            }\n            catch (_b) {\n                // no-op\n            }\n        }\n    }\n    return window.ethereum;\n};\nconst sendReqToSnap = async (method, params) => {\n    const provider = await getProvider();\n    return provider.request({\n        method: 'wallet_invokeSnap',\n        params: {\n            snapId: config_1.defaultSnapOrigin,\n            request: {\n                method,\n                params,\n            },\n        },\n    });\n};\n/**\n * Get the installed snaps in MetaMask.\n *\n * @returns The snaps installed in MetaMask.\n */\nconst getSnaps = async () => {\n    const provider = await getProvider();\n    return (await provider.request({\n        method: 'wallet_getSnaps',\n    }));\n};\nexports.getSnaps = getSnaps;\n/**\n * Connect a snap to MetaMask.\n *\n * @param snapId - The ID of the snap.\n * @param params - The params to pass with the snap to connect.\n */\nconst connectSnap = async (snapId = config_1.defaultSnapOrigin, params = {}) => {\n    const provider = await getProvider();\n    return provider.request({\n        method: 'wallet_requestSnaps',\n        params: {\n            [snapId]: params,\n        },\n    });\n};\nexports.connectSnap = connectSnap;\n/**\n * Get the snap from MetaMask.\n *\n * @param version - The version of the snap to install (optional).\n * @returns The snap object returned by the extension.\n */\nconst getSnap = async (version) => {\n    try {\n        const snaps = await (0, exports.getSnaps)();\n        return Object.values(snaps).find((snap) => snap.id === config_1.defaultSnapOrigin && (!version || snap.version === version));\n    }\n    catch (e) {\n        console.log('Failed to obtain installed snap', e);\n        return undefined;\n    }\n};\nexports.getSnap = getSnap;\nconst requestSignature = async (chainId, signerAddress, signDoc) => {\n    const signature = await sendReqToSnap('signDirect', {\n        chainId,\n        signerAddress,\n        signDoc: Object.assign(Object.assign({}, signDoc), { accountNumber: long_1.default.fromString(signDoc.accountNumber.toString(), true) }),\n    });\n    const modifiedSignature = {\n        signature: signature.signature,\n        signed: Object.assign(Object.assign({}, signature.signed), { accountNumber: signDoc.accountNumber.toString(), authInfoBytes: new Uint8Array(Object.values(signature.signed.authInfoBytes)), bodyBytes: new Uint8Array(Object.values(signature.signed.bodyBytes)) }),\n    };\n    return modifiedSignature;\n};\nexports.requestSignature = requestSignature;\nconst requestSignAmino = async (chainId, signerAddress, signDoc, options) => {\n    const { isADR36 = false, enableExtraEntropy = false } = options || {};\n    if (!isADR36 && chainId !== signDoc.chain_id) {\n        throw new Error('Chain ID does not match signer chain ID');\n    }\n    const chain = chainInfo_1.default[chainId];\n    // Override gasPrice\n    if (!(options === null || options === void 0 ? void 0 : options.preferNoSetFee) && chain && chain.denom) {\n        const gasPriceFromRegistry = await (0, gas_1.getGasPriceForChainName)(chain.chainName);\n        const gas = 'gasLimit' in signDoc.fee ? signDoc.fee.gasLimit : signDoc.fee.gas;\n        if (gasPriceFromRegistry) {\n            const amount = [\n                {\n                    amount: new bignumber_js_1.default(gasPriceFromRegistry)\n                        .multipliedBy(new bignumber_js_1.default(gas))\n                        .decimalPlaces(0, 1)\n                        .toString(),\n                    denom: chain.denom,\n                },\n            ];\n            signDoc.fee.amount = amount;\n        }\n    }\n    const signResponse = (await sendReqToSnap('signAmino', {\n        chainId,\n        signerAddress,\n        signDoc,\n        isADR36,\n        enableExtraEntropy,\n    }));\n    return signResponse;\n};\nexports.requestSignAmino = requestSignAmino;\nconst getKey = async (chainId) => {\n    const accountData = await sendReqToSnap('getKey', {\n        chainId,\n    });\n    if (!accountData) {\n        throw new Error('No account data found');\n    }\n    accountData.pubkey = Uint8Array.from(Object.values(accountData.pubkey));\n    return accountData;\n};\nexports.getKey = getKey;\nconst isLocalSnap = (snapId) => snapId.startsWith('local:');\nexports.isLocalSnap = isLocalSnap;\nconst suggestChain = async (chainInfo, options) => {\n    if (options && options.force) {\n        return await sendReqToSnap('suggestChain', {\n            chainInfo,\n        });\n    }\n    const supportedChains = (await sendReqToSnap('getSupportedChains', {})) || {};\n    if (supportedChains[chainInfo.chainId]) {\n        return Promise.resolve({\n            message: 'Chain already added successfully',\n            chainInfo,\n        });\n    }\n    return await sendReqToSnap('suggestChain', {\n        chainInfo,\n    });\n};\nexports.suggestChain = suggestChain;\n// For supporting existing providers.\nexports.experimentalSuggestChain = exports.suggestChain;\n//# sourceMappingURL=snap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/snap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@leapwallet/cosmos-snap-provider/dist/types.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlYXB3YWxsZXQvY29zbW9zLXNuYXAtcHJvdmlkZXIvZGlzdC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGxlYXB3YWxsZXRcXGNvc21vcy1zbmFwLXByb3ZpZGVyXFxkaXN0XFx0eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/dist/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/node_modules/long/umd/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@leapwallet/cosmos-snap-provider/node_modules/long/umd/index.js ***!
  \**************************************************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// GENERATED FILE. DO NOT EDIT.\n(function (global, factory) {\n  function unwrapDefault(exports) {\n    return \"default\" in exports ? exports.default : exports;\n  }\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      var exports = {};\n      factory(exports);\n      return unwrapDefault(exports);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(\n  typeof globalThis !== \"undefined\"\n    ? globalThis\n    : typeof self !== \"undefined\"\n      ? self\n      : this,\n  function (_exports) {\n    \"use strict\";\n\n    Object.defineProperty(_exports, \"__esModule\", {\n      value: true,\n    });\n    _exports.default = void 0;\n    /**\n     * @license\n     * Copyright 2009 The Closure Library Authors\n     * Copyright 2020 Daniel Wirtz / The long.js Authors.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *     http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     *\n     * SPDX-License-Identifier: Apache-2.0\n     */\n\n    // WebAssembly optimizations to do native i64 multiplication and divide\n    var wasm = null;\n    try {\n      wasm = new WebAssembly.Instance(\n        new WebAssembly.Module(\n          new Uint8Array([\n            // \\0asm\n            0, 97, 115, 109,\n            // version 1\n            1, 0, 0, 0,\n            // section \"type\"\n            1, 13, 2,\n            // 0, () => i32\n            96, 0, 1, 127,\n            // 1, (i32, i32, i32, i32) => i32\n            96, 4, 127, 127, 127, 127, 1, 127,\n            // section \"function\"\n            3, 7, 6,\n            // 0, type 0\n            0,\n            // 1, type 1\n            1,\n            // 2, type 1\n            1,\n            // 3, type 1\n            1,\n            // 4, type 1\n            1,\n            // 5, type 1\n            1,\n            // section \"global\"\n            6, 6, 1,\n            // 0, \"high\", mutable i32\n            127, 1, 65, 0, 11,\n            // section \"export\"\n            7, 50, 6,\n            // 0, \"mul\"\n            3, 109, 117, 108, 0, 1,\n            // 1, \"div_s\"\n            5, 100, 105, 118, 95, 115, 0, 2,\n            // 2, \"div_u\"\n            5, 100, 105, 118, 95, 117, 0, 3,\n            // 3, \"rem_s\"\n            5, 114, 101, 109, 95, 115, 0, 4,\n            // 4, \"rem_u\"\n            5, 114, 101, 109, 95, 117, 0, 5,\n            // 5, \"get_high\"\n            8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0,\n            // section \"code\"\n            10, 191, 1, 6,\n            // 0, \"get_high\"\n            4, 0, 35, 0, 11,\n            // 1, \"mul\"\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\n            32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0,\n            32, 4, 167, 11,\n            // 2, \"div_s\"\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\n            32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0,\n            32, 4, 167, 11,\n            // 3, \"div_u\"\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\n            32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0,\n            32, 4, 167, 11,\n            // 4, \"rem_s\"\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\n            32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0,\n            32, 4, 167, 11,\n            // 5, \"rem_u\"\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\n            32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0,\n            32, 4, 167, 11,\n          ]),\n        ),\n        {},\n      ).exports;\n    } catch {\n      // no wasm support :(\n    }\n\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *  See the from* functions below for more convenient ways of constructing Longs.\n     * @exports Long\n     * @class A Long class for representing a 64 bit two's-complement integer value.\n     * @param {number} low The low (signed) 32 bits of the long\n     * @param {number} high The high (signed) 32 bits of the long\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @constructor\n     */\n    function Long(low, high, unsigned) {\n      /**\n       * The low 32 bits as a signed value.\n       * @type {number}\n       */\n      this.low = low | 0;\n\n      /**\n       * The high 32 bits as a signed value.\n       * @type {number}\n       */\n      this.high = high | 0;\n\n      /**\n       * Whether unsigned or not.\n       * @type {boolean}\n       */\n      this.unsigned = !!unsigned;\n    }\n\n    // The internal representation of a long is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // Javascript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within Javascript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n\n    /**\n     * An indicator used to reliably determine if an object is a Long or not.\n     * @type {boolean}\n     * @const\n     * @private\n     */\n    Long.prototype.__isLong__;\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\n      value: true,\n    });\n\n    /**\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @inner\n     */\n    function isLong(obj) {\n      return (obj && obj[\"__isLong__\"]) === true;\n    }\n\n    /**\n     * @function\n     * @param {*} value number\n     * @returns {number}\n     * @inner\n     */\n    function ctz32(value) {\n      var c = Math.clz32(value & -value);\n      return value ? 31 - c : c;\n    }\n\n    /**\n     * Tests if the specified object is a Long.\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     */\n    Long.isLong = isLong;\n\n    /**\n     * A cache of the Long representations of small integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var INT_CACHE = {};\n\n    /**\n     * A cache of the Long representations of small unsigned integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var UINT_CACHE = {};\n\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromInt(value, unsigned) {\n      var obj, cachedObj, cache;\n      if (unsigned) {\n        value >>>= 0;\n        if ((cache = 0 <= value && value < 256)) {\n          cachedObj = UINT_CACHE[value];\n          if (cachedObj) return cachedObj;\n        }\n        obj = fromBits(value, 0, true);\n        if (cache) UINT_CACHE[value] = obj;\n        return obj;\n      } else {\n        value |= 0;\n        if ((cache = -128 <= value && value < 128)) {\n          cachedObj = INT_CACHE[value];\n          if (cachedObj) return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache) INT_CACHE[value] = obj;\n        return obj;\n      }\n    }\n\n    /**\n     * Returns a Long representing the given 32 bit integer value.\n     * @function\n     * @param {number} value The 32 bit integer in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromInt = fromInt;\n\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromNumber(value, unsigned) {\n      if (isNaN(value)) return unsigned ? UZERO : ZERO;\n      if (unsigned) {\n        if (value < 0) return UZERO;\n        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n      } else {\n        if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n      }\n      if (value < 0) return fromNumber(-value, unsigned).neg();\n      return fromBits(\n        value % TWO_PWR_32_DBL | 0,\n        (value / TWO_PWR_32_DBL) | 0,\n        unsigned,\n      );\n    }\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @function\n     * @param {number} value The number in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromNumber = fromNumber;\n\n    /**\n     * @param {number} lowBits\n     * @param {number} highBits\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromBits(lowBits, highBits, unsigned) {\n      return new Long(lowBits, highBits, unsigned);\n    }\n\n    /**\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @function\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromBits = fromBits;\n\n    /**\n     * @function\n     * @param {number} base\n     * @param {number} exponent\n     * @returns {number}\n     * @inner\n     */\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n    /**\n     * @param {string} str\n     * @param {(boolean|number)=} unsigned\n     * @param {number=} radix\n     * @returns {!Long}\n     * @inner\n     */\n    function fromString(str, unsigned, radix) {\n      if (str.length === 0) throw Error(\"empty string\");\n      if (typeof unsigned === \"number\") {\n        // For goog.math.long compatibility\n        radix = unsigned;\n        unsigned = false;\n      } else {\n        unsigned = !!unsigned;\n      }\n      if (\n        str === \"NaN\" ||\n        str === \"Infinity\" ||\n        str === \"+Infinity\" ||\n        str === \"-Infinity\"\n      )\n        return unsigned ? UZERO : ZERO;\n      radix = radix || 10;\n      if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n      var p;\n      if ((p = str.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");\n      else if (p === 0) {\n        return fromString(str.substring(1), unsigned, radix).neg();\n      }\n\n      // Do several (8) digits each time through the loop, so as to\n      // minimize the calls to the very expensive emulated div.\n      var radixToPower = fromNumber(pow_dbl(radix, 8));\n      var result = ZERO;\n      for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n          var power = fromNumber(pow_dbl(radix, size));\n          result = result.mul(power).add(fromNumber(value));\n        } else {\n          result = result.mul(radixToPower);\n          result = result.add(fromNumber(value));\n        }\n      }\n      result.unsigned = unsigned;\n      return result;\n    }\n\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     * @function\n     * @param {string} str The textual representation of the Long\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @returns {!Long} The corresponding Long value\n     */\n    Long.fromString = fromString;\n\n    /**\n     * @function\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromValue(val, unsigned) {\n      if (typeof val === \"number\") return fromNumber(val, unsigned);\n      if (typeof val === \"string\") return fromString(val, unsigned);\n      // Throws for non-objects, converts non-instanceof Long:\n      return fromBits(\n        val.low,\n        val.high,\n        typeof unsigned === \"boolean\" ? unsigned : val.unsigned,\n      );\n    }\n\n    /**\n     * Converts the specified value to a Long using the appropriate from* function for its type.\n     * @function\n     * @param {!Long|number|bigint|string|!{low: number, high: number, unsigned: boolean}} val Value\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long}\n     */\n    Long.fromValue = fromValue;\n\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n    // no runtime penalty for these.\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_16_DBL = 1 << 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24_DBL = 1 << 24;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n    /**\n     * @type {!Long}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var ZERO = fromInt(0);\n\n    /**\n     * Signed zero.\n     * @type {!Long}\n     */\n    Long.ZERO = ZERO;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var UZERO = fromInt(0, true);\n\n    /**\n     * Unsigned zero.\n     * @type {!Long}\n     */\n    Long.UZERO = UZERO;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var ONE = fromInt(1);\n\n    /**\n     * Signed one.\n     * @type {!Long}\n     */\n    Long.ONE = ONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var UONE = fromInt(1, true);\n\n    /**\n     * Unsigned one.\n     * @type {!Long}\n     */\n    Long.UONE = UONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var NEG_ONE = fromInt(-1);\n\n    /**\n     * Signed negative one.\n     * @type {!Long}\n     */\n    Long.NEG_ONE = NEG_ONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MAX_VALUE = fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n\n    /**\n     * Maximum signed value.\n     * @type {!Long}\n     */\n    Long.MAX_VALUE = MAX_VALUE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MAX_UNSIGNED_VALUE = fromBits(0xffffffff | 0, 0xffffffff | 0, true);\n\n    /**\n     * Maximum unsigned value.\n     * @type {!Long}\n     */\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n    /**\n     * Minimum signed value.\n     * @type {!Long}\n     */\n    Long.MIN_VALUE = MIN_VALUE;\n\n    /**\n     * @alias Long.prototype\n     * @inner\n     */\n    var LongPrototype = Long.prototype;\n\n    /**\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n     * @this {!Long}\n     * @returns {number}\n     */\n    LongPrototype.toInt = function toInt() {\n      return this.unsigned ? this.low >>> 0 : this.low;\n    };\n\n    /**\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @this {!Long}\n     * @returns {number}\n     */\n    LongPrototype.toNumber = function toNumber() {\n      if (this.unsigned)\n        return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @this {!Long}\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     */\n    LongPrototype.toString = function toString(radix) {\n      radix = radix || 10;\n      if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n      if (this.isZero()) return \"0\";\n      if (this.isNegative()) {\n        // Unsigned Longs are never negative\n        if (this.eq(MIN_VALUE)) {\n          // We need to change the Long value before it can be negated, so we remove\n          // the bottom-most digit in this base and then recurse to do the rest.\n          var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n          return div.toString(radix) + rem1.toInt().toString(radix);\n        } else return \"-\" + this.neg().toString(radix);\n      }\n\n      // Do several (6) digits each time through the loop, so as to\n      // minimize the calls to the very expensive emulated div.\n      var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n      var result = \"\";\n      while (true) {\n        var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n        rem = remDiv;\n        if (rem.isZero()) return digits + result;\n        else {\n          while (digits.length < 6) digits = \"0\" + digits;\n          result = \"\" + digits + result;\n        }\n      }\n    };\n\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @this {!Long}\n     * @returns {number} Signed high bits\n     */\n    LongPrototype.getHighBits = function getHighBits() {\n      return this.high;\n    };\n\n    /**\n     * Gets the high 32 bits as an unsigned integer.\n     * @this {!Long}\n     * @returns {number} Unsigned high bits\n     */\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n      return this.high >>> 0;\n    };\n\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @this {!Long}\n     * @returns {number} Signed low bits\n     */\n    LongPrototype.getLowBits = function getLowBits() {\n      return this.low;\n    };\n\n    /**\n     * Gets the low 32 bits as an unsigned integer.\n     * @this {!Long}\n     * @returns {number} Unsigned low bits\n     */\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n      return this.low >>> 0;\n    };\n\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Long.\n     * @this {!Long}\n     * @returns {number}\n     */\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n      if (this.isNegative())\n        // Unsigned Longs are never negative\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n      var val = this.high != 0 ? this.high : this.low;\n      for (var bit = 31; bit > 0; bit--) if ((val & (1 << bit)) != 0) break;\n      return this.high != 0 ? bit + 33 : bit + 1;\n    };\n\n    /**\n     * Tests if this Long can be safely represented as a JavaScript number.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isSafeInteger = function isSafeInteger() {\n      // 2^53-1 is the maximum safe value\n      var top11Bits = this.high >> 21;\n      // [0, 2^53-1]\n      if (!top11Bits) return true;\n      // > 2^53-1\n      if (this.unsigned) return false;\n      // [-2^53, -1] except -2^53\n      return top11Bits === -1 && !(this.low === 0 && this.high === -0x200000);\n    };\n\n    /**\n     * Tests if this Long's value equals zero.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isZero = function isZero() {\n      return this.high === 0 && this.low === 0;\n    };\n\n    /**\n     * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n     * @returns {boolean}\n     */\n    LongPrototype.eqz = LongPrototype.isZero;\n\n    /**\n     * Tests if this Long's value is negative.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isNegative = function isNegative() {\n      return !this.unsigned && this.high < 0;\n    };\n\n    /**\n     * Tests if this Long's value is positive or zero.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isPositive = function isPositive() {\n      return this.unsigned || this.high >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is odd.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isOdd = function isOdd() {\n      return (this.low & 1) === 1;\n    };\n\n    /**\n     * Tests if this Long's value is even.\n     * @this {!Long}\n     * @returns {boolean}\n     */\n    LongPrototype.isEven = function isEven() {\n      return (this.low & 1) === 0;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.equals = function equals(other) {\n      if (!isLong(other)) other = fromValue(other);\n      if (\n        this.unsigned !== other.unsigned &&\n        this.high >>> 31 === 1 &&\n        other.high >>> 31 === 1\n      )\n        return false;\n      return this.high === other.high && this.low === other.low;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.eq = LongPrototype.equals;\n\n    /**\n     * Tests if this Long's value differs from the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.notEquals = function notEquals(other) {\n      return !this.eq(/* validates */ other);\n    };\n\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.neq = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.ne = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lessThan = function lessThan(other) {\n      return this.comp(/* validates */ other) < 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lt = LongPrototype.lessThan;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n      return this.comp(/* validates */ other) <= 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.le = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.greaterThan = function greaterThan(other) {\n      return this.comp(/* validates */ other) > 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.gt = LongPrototype.greaterThan;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n      return this.comp(/* validates */ other) >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */\n    LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Compares this Long's value with the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    LongPrototype.compare = function compare(other) {\n      if (!isLong(other)) other = fromValue(other);\n      if (this.eq(other)) return 0;\n      var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n      if (thisNeg && !otherNeg) return -1;\n      if (!thisNeg && otherNeg) return 1;\n      // At this point the sign bits are the same\n      if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n      // Both are positive if at least one is unsigned\n      return other.high >>> 0 > this.high >>> 0 ||\n        (other.high === this.high && other.low >>> 0 > this.low >>> 0)\n        ? -1\n        : 1;\n    };\n\n    /**\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */\n    LongPrototype.comp = LongPrototype.compare;\n\n    /**\n     * Negates this Long's value.\n     * @this {!Long}\n     * @returns {!Long} Negated Long\n     */\n    LongPrototype.negate = function negate() {\n      if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n      return this.not().add(ONE);\n    };\n\n    /**\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\n     * @function\n     * @returns {!Long} Negated Long\n     */\n    LongPrototype.neg = LongPrototype.negate;\n\n    /**\n     * Returns the sum of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} addend Addend\n     * @returns {!Long} Sum\n     */\n    LongPrototype.add = function add(addend) {\n      if (!isLong(addend)) addend = fromValue(addend);\n\n      // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n      var a48 = this.high >>> 16;\n      var a32 = this.high & 0xffff;\n      var a16 = this.low >>> 16;\n      var a00 = this.low & 0xffff;\n      var b48 = addend.high >>> 16;\n      var b32 = addend.high & 0xffff;\n      var b16 = addend.low >>> 16;\n      var b00 = addend.low & 0xffff;\n      var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n      c00 += a00 + b00;\n      c16 += c00 >>> 16;\n      c00 &= 0xffff;\n      c16 += a16 + b16;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c32 += a32 + b32;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c48 += a48 + b48;\n      c48 &= 0xffff;\n      return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    LongPrototype.subtract = function subtract(subtrahend) {\n      if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n      return this.add(subtrahend.neg());\n    };\n\n    /**\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n     * @function\n     * @param {!Long|number|bigint|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */\n    LongPrototype.sub = LongPrototype.subtract;\n\n    /**\n     * Returns the product of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    LongPrototype.multiply = function multiply(multiplier) {\n      if (this.isZero()) return this;\n      if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n\n      // use wasm support if present\n      if (wasm) {\n        var low = wasm[\"mul\"](\n          this.low,\n          this.high,\n          multiplier.low,\n          multiplier.high,\n        );\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n      }\n      if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n      if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n      if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n      if (this.isNegative()) {\n        if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());\n        else return this.neg().mul(multiplier).neg();\n      } else if (multiplier.isNegative())\n        return this.mul(multiplier.neg()).neg();\n\n      // If both longs are small, use float multiplication\n      if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n        return fromNumber(\n          this.toNumber() * multiplier.toNumber(),\n          this.unsigned,\n        );\n\n      // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n      // We can skip products that would overflow.\n\n      var a48 = this.high >>> 16;\n      var a32 = this.high & 0xffff;\n      var a16 = this.low >>> 16;\n      var a00 = this.low & 0xffff;\n      var b48 = multiplier.high >>> 16;\n      var b32 = multiplier.high & 0xffff;\n      var b16 = multiplier.low >>> 16;\n      var b00 = multiplier.low & 0xffff;\n      var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n      c00 += a00 * b00;\n      c16 += c00 >>> 16;\n      c00 &= 0xffff;\n      c16 += a16 * b00;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c16 += a00 * b16;\n      c32 += c16 >>> 16;\n      c16 &= 0xffff;\n      c32 += a32 * b00;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c32 += a16 * b16;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c32 += a00 * b32;\n      c48 += c32 >>> 16;\n      c32 &= 0xffff;\n      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n      c48 &= 0xffff;\n      return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n     * @function\n     * @param {!Long|number|bigint|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */\n    LongPrototype.mul = LongPrototype.multiply;\n\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\n     *  unsigned if this Long is unsigned.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    LongPrototype.divide = function divide(divisor) {\n      if (!isLong(divisor)) divisor = fromValue(divisor);\n      if (divisor.isZero()) throw Error(\"division by zero\");\n\n      // use wasm support if present\n      if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (\n          !this.unsigned &&\n          this.high === -0x80000000 &&\n          divisor.low === -1 &&\n          divisor.high === -1\n        ) {\n          // be consistent with non-wasm code path\n          return this;\n        }\n        var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n          this.low,\n          this.high,\n          divisor.low,\n          divisor.high,\n        );\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n      }\n      if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n      var approx, rem, res;\n      if (!this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (this.eq(MIN_VALUE)) {\n          if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n            return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n          else if (divisor.eq(MIN_VALUE)) return ONE;\n          else {\n            // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n            var halfThis = this.shr(1);\n            approx = halfThis.div(divisor).shl(1);\n            if (approx.eq(ZERO)) {\n              return divisor.isNegative() ? ONE : NEG_ONE;\n            } else {\n              rem = this.sub(divisor.mul(approx));\n              res = approx.add(rem.div(divisor));\n              return res;\n            }\n          }\n        } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n        if (this.isNegative()) {\n          if (divisor.isNegative()) return this.neg().div(divisor.neg());\n          return this.neg().div(divisor).neg();\n        } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n        res = ZERO;\n      } else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned) divisor = divisor.toUnsigned();\n        if (divisor.gt(this)) return UZERO;\n        if (divisor.gt(this.shru(1)))\n          // 15 >>> 1 = 7 ; with divisor = 8 ; true\n          return UONE;\n        res = UZERO;\n      }\n\n      // Repeat the following until the remainder is less than other:  find a\n      // floating-point that approximates remainder / other *from below*, add this\n      // into the result, and subtract it from the remainder.  It is critical that\n      // the approximate value is less than or equal to the real value so that the\n      // remainder never becomes negative.\n      rem = this;\n      while (rem.gte(divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n          // that if it is too large, the product overflows and is negative.\n          approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\n          approx -= delta;\n          approxRes = fromNumber(approx, this.unsigned);\n          approxRem = approxRes.mul(divisor);\n        }\n\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (approxRes.isZero()) approxRes = ONE;\n        res = res.add(approxRes);\n        rem = rem.sub(approxRem);\n      }\n      return res;\n    };\n\n    /**\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */\n    LongPrototype.div = LongPrototype.divide;\n\n    /**\n     * Returns this Long modulo the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.modulo = function modulo(divisor) {\n      if (!isLong(divisor)) divisor = fromValue(divisor);\n\n      // use wasm support if present\n      if (wasm) {\n        var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n          this.low,\n          this.high,\n          divisor.low,\n          divisor.high,\n        );\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n      }\n      return this.sub(this.div(divisor).mul(divisor));\n    };\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.mod = LongPrototype.modulo;\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */\n    LongPrototype.rem = LongPrototype.modulo;\n\n    /**\n     * Returns the bitwise NOT of this Long.\n     * @this {!Long}\n     * @returns {!Long}\n     */\n    LongPrototype.not = function not() {\n      return fromBits(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns count leading zeros of this Long.\n     * @this {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.countLeadingZeros = function countLeadingZeros() {\n      return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n    };\n\n    /**\n     * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n     * @function\n     * @param {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.clz = LongPrototype.countLeadingZeros;\n\n    /**\n     * Returns count trailing zeros of this Long.\n     * @this {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.countTrailingZeros = function countTrailingZeros() {\n      return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n    };\n\n    /**\n     * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n     * @function\n     * @param {!Long}\n     * @returns {!number}\n     */\n    LongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.and = function and(other) {\n      if (!isLong(other)) other = fromValue(other);\n      return fromBits(\n        this.low & other.low,\n        this.high & other.high,\n        this.unsigned,\n      );\n    };\n\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.or = function or(other) {\n      if (!isLong(other)) other = fromValue(other);\n      return fromBits(\n        this.low | other.low,\n        this.high | other.high,\n        this.unsigned,\n      );\n    };\n\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */\n    LongPrototype.xor = function xor(other) {\n      if (!isLong(other)) other = fromValue(other);\n      return fromBits(\n        this.low ^ other.low,\n        this.high ^ other.high,\n        this.unsigned,\n      );\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      else if (numBits < 32)\n        return fromBits(\n          this.low << numBits,\n          (this.high << numBits) | (this.low >>> (32 - numBits)),\n          this.unsigned,\n        );\n      else return fromBits(0, this.low << (numBits - 32), this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shl = LongPrototype.shiftLeft;\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftRight = function shiftRight(numBits) {\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      else if (numBits < 32)\n        return fromBits(\n          (this.low >>> numBits) | (this.high << (32 - numBits)),\n          this.high >> numBits,\n          this.unsigned,\n        );\n      else\n        return fromBits(\n          this.high >> (numBits - 32),\n          this.high >= 0 ? 0 : -1,\n          this.unsigned,\n        );\n    };\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shr = LongPrototype.shiftRight;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      if (numBits < 32)\n        return fromBits(\n          (this.low >>> numBits) | (this.high << (32 - numBits)),\n          this.high >>> numBits,\n          this.unsigned,\n        );\n      if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n      return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */\n    LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Returns this Long with bits rotated to the left by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotateLeft = function rotateLeft(numBits) {\n      var b;\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n      if (numBits < 32) {\n        b = 32 - numBits;\n        return fromBits(\n          (this.low << numBits) | (this.high >>> b),\n          (this.high << numBits) | (this.low >>> b),\n          this.unsigned,\n        );\n      }\n      numBits -= 32;\n      b = 32 - numBits;\n      return fromBits(\n        (this.high << numBits) | (this.low >>> b),\n        (this.low << numBits) | (this.high >>> b),\n        this.unsigned,\n      );\n    };\n    /**\n     * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotl = LongPrototype.rotateLeft;\n\n    /**\n     * Returns this Long with bits rotated to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotateRight = function rotateRight(numBits) {\n      var b;\n      if (isLong(numBits)) numBits = numBits.toInt();\n      if ((numBits &= 63) === 0) return this;\n      if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n      if (numBits < 32) {\n        b = 32 - numBits;\n        return fromBits(\n          (this.high << b) | (this.low >>> numBits),\n          (this.low << b) | (this.high >>> numBits),\n          this.unsigned,\n        );\n      }\n      numBits -= 32;\n      b = 32 - numBits;\n      return fromBits(\n        (this.low << b) | (this.high >>> numBits),\n        (this.high << b) | (this.low >>> numBits),\n        this.unsigned,\n      );\n    };\n    /**\n     * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */\n    LongPrototype.rotr = LongPrototype.rotateRight;\n\n    /**\n     * Converts this Long to signed.\n     * @this {!Long}\n     * @returns {!Long} Signed long\n     */\n    LongPrototype.toSigned = function toSigned() {\n      if (!this.unsigned) return this;\n      return fromBits(this.low, this.high, false);\n    };\n\n    /**\n     * Converts this Long to unsigned.\n     * @this {!Long}\n     * @returns {!Long} Unsigned long\n     */\n    LongPrototype.toUnsigned = function toUnsigned() {\n      if (this.unsigned) return this;\n      return fromBits(this.low, this.high, true);\n    };\n\n    /**\n     * Converts this Long to its byte representation.\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @this {!Long}\n     * @returns {!Array.<number>} Byte representation\n     */\n    LongPrototype.toBytes = function toBytes(le) {\n      return le ? this.toBytesLE() : this.toBytesBE();\n    };\n\n    /**\n     * Converts this Long to its little endian byte representation.\n     * @this {!Long}\n     * @returns {!Array.<number>} Little endian byte representation\n     */\n    LongPrototype.toBytesLE = function toBytesLE() {\n      var hi = this.high,\n        lo = this.low;\n      return [\n        lo & 0xff,\n        (lo >>> 8) & 0xff,\n        (lo >>> 16) & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        (hi >>> 8) & 0xff,\n        (hi >>> 16) & 0xff,\n        hi >>> 24,\n      ];\n    };\n\n    /**\n     * Converts this Long to its big endian byte representation.\n     * @this {!Long}\n     * @returns {!Array.<number>} Big endian byte representation\n     */\n    LongPrototype.toBytesBE = function toBytesBE() {\n      var hi = this.high,\n        lo = this.low;\n      return [\n        hi >>> 24,\n        (hi >>> 16) & 0xff,\n        (hi >>> 8) & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        (lo >>> 16) & 0xff,\n        (lo >>> 8) & 0xff,\n        lo & 0xff,\n      ];\n    };\n\n    /**\n     * Creates a Long from its byte representation.\n     * @param {!Array.<number>} bytes Byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @returns {Long} The corresponding Long value\n     */\n    Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n      return le\n        ? Long.fromBytesLE(bytes, unsigned)\n        : Long.fromBytesBE(bytes, unsigned);\n    };\n\n    /**\n     * Creates a Long from its little endian byte representation.\n     * @param {!Array.<number>} bytes Little endian byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {Long} The corresponding Long value\n     */\n    Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n      return new Long(\n        bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24),\n        bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24),\n        unsigned,\n      );\n    };\n\n    /**\n     * Creates a Long from its big endian byte representation.\n     * @param {!Array.<number>} bytes Big endian byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {Long} The corresponding Long value\n     */\n    Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n      return new Long(\n        (bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7],\n        (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3],\n        unsigned,\n      );\n    };\n\n    // Support conversion to/from BigInt where available\n    if (typeof BigInt === \"function\") {\n      /**\n       * Returns a Long representing the given big integer.\n       * @function\n       * @param {number} value The big integer value\n       * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n       * @returns {!Long} The corresponding Long value\n       */\n      Long.fromBigInt = function fromBigInt(value, unsigned) {\n        var lowBits = Number(BigInt.asIntN(32, value));\n        var highBits = Number(BigInt.asIntN(32, value >> BigInt(32)));\n        return fromBits(lowBits, highBits, unsigned);\n      };\n\n      // Override\n      Long.fromValue = function fromValueWithBigInt(value, unsigned) {\n        if (typeof value === \"bigint\") return fromBigInt(value, unsigned);\n        return fromValue(value, unsigned);\n      };\n\n      /**\n       * Converts the Long to its big integer representation.\n       * @this {!Long}\n       * @returns {bigint}\n       */\n      LongPrototype.toBigInt = function toBigInt() {\n        var lowBigInt = BigInt(this.low >>> 0);\n        var highBigInt = BigInt(this.unsigned ? this.high >>> 0 : this.high);\n        return (highBigInt << BigInt(32)) | lowBigInt;\n      };\n    }\n    var _default = (_exports.default = Long);\n  },\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leapwallet/cosmos-snap-provider/node_modules/long/umd/index.js\n");

/***/ })

};
;