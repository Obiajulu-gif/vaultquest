"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@keplr-wallet";
exports.ids = ["vendor-chunks/@keplr-wallet"];
exports.modules = {

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/denom/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/denom/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DenomHelper = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nconst crypto_1 = __webpack_require__(/*! @keplr-wallet/crypto */ \"(ssr)/./node_modules/@keplr-wallet/crypto/build/index.js\");\nclass DenomHelper {\n    static ibcDenom(paths, coinMinimalDenom) {\n        const prefixes = [];\n        for (const path of paths) {\n            prefixes.push(`${path.portId}/${path.channelId}`);\n        }\n        const prefix = prefixes.join(\"/\");\n        const denom = `${prefix}/${coinMinimalDenom}`;\n        return (\"ibc/\" +\n            buffer_1.Buffer.from(crypto_1.Hash.sha256(buffer_1.Buffer.from(denom)))\n                .toString(\"hex\")\n                .toUpperCase());\n    }\n    constructor(_denom) {\n        this._denom = _denom;\n        // Remember that the coin's actual denom should start with \"type:contractAddress:denom\" if it is for the token based on contract.\n        const split = this.denom.split(/(\\w+):(\\w+):(.+)/).filter(Boolean);\n        if (split.length !== 1 && split.length !== 3) {\n            throw new Error(`Invalid denom: ${this.denom}`);\n        }\n        this._type = split.length === 3 ? split[0] : \"\";\n        this._contractAddress = split.length === 3 ? split[1] : \"\";\n    }\n    get denom() {\n        return this._denom;\n    }\n    get type() {\n        return this._type || \"native\";\n    }\n    get contractAddress() {\n        return this._contractAddress;\n    }\n}\nexports.DenomHelper = DenomHelper;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvZGVub20vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CLGlCQUFpQixtQkFBTyxDQUFDLHFEQUFTO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLHNGQUFzQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixZQUFZLEdBQUcsZUFBZTtBQUMzRDtBQUNBO0FBQ0EseUJBQXlCLE9BQU8sR0FBRyxpQkFBaUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsV0FBVztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb21tb25cXGJ1aWxkXFxkZW5vbVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlbm9tSGVscGVyID0gdm9pZCAwO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyL1wiKTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIkBrZXBsci13YWxsZXQvY3J5cHRvXCIpO1xuY2xhc3MgRGVub21IZWxwZXIge1xuICAgIHN0YXRpYyBpYmNEZW5vbShwYXRocywgY29pbk1pbmltYWxEZW5vbSkge1xuICAgICAgICBjb25zdCBwcmVmaXhlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHBhdGggb2YgcGF0aHMpIHtcbiAgICAgICAgICAgIHByZWZpeGVzLnB1c2goYCR7cGF0aC5wb3J0SWR9LyR7cGF0aC5jaGFubmVsSWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlZml4ID0gcHJlZml4ZXMuam9pbihcIi9cIik7XG4gICAgICAgIGNvbnN0IGRlbm9tID0gYCR7cHJlZml4fS8ke2NvaW5NaW5pbWFsRGVub219YDtcbiAgICAgICAgcmV0dXJuIChcImliYy9cIiArXG4gICAgICAgICAgICBidWZmZXJfMS5CdWZmZXIuZnJvbShjcnlwdG9fMS5IYXNoLnNoYTI1NihidWZmZXJfMS5CdWZmZXIuZnJvbShkZW5vbSkpKVxuICAgICAgICAgICAgICAgIC50b1N0cmluZyhcImhleFwiKVxuICAgICAgICAgICAgICAgIC50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoX2Rlbm9tKSB7XG4gICAgICAgIHRoaXMuX2Rlbm9tID0gX2Rlbm9tO1xuICAgICAgICAvLyBSZW1lbWJlciB0aGF0IHRoZSBjb2luJ3MgYWN0dWFsIGRlbm9tIHNob3VsZCBzdGFydCB3aXRoIFwidHlwZTpjb250cmFjdEFkZHJlc3M6ZGVub21cIiBpZiBpdCBpcyBmb3IgdGhlIHRva2VuIGJhc2VkIG9uIGNvbnRyYWN0LlxuICAgICAgICBjb25zdCBzcGxpdCA9IHRoaXMuZGVub20uc3BsaXQoLyhcXHcrKTooXFx3Kyk6KC4rKS8pLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCAhPT0gMSAmJiBzcGxpdC5sZW5ndGggIT09IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBkZW5vbTogJHt0aGlzLmRlbm9tfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3R5cGUgPSBzcGxpdC5sZW5ndGggPT09IDMgPyBzcGxpdFswXSA6IFwiXCI7XG4gICAgICAgIHRoaXMuX2NvbnRyYWN0QWRkcmVzcyA9IHNwbGl0Lmxlbmd0aCA9PT0gMyA/IHNwbGl0WzFdIDogXCJcIjtcbiAgICB9XG4gICAgZ2V0IGRlbm9tKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVub207XG4gICAgfVxuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZSB8fCBcIm5hdGl2ZVwiO1xuICAgIH1cbiAgICBnZXQgY29udHJhY3RBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJhY3RBZGRyZXNzO1xuICAgIH1cbn1cbmV4cG9ydHMuRGVub21IZWxwZXIgPSBEZW5vbUhlbHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/denom/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/escape/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/escape/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unescapeHTML = exports.escapeHTML = void 0;\n/**\n * Escapes <,>,& in string.\n * Golang's json marshaller escapes <,>,& by default.\n * However, because JS doesn't do that by default, to match the sign doc with cosmos-sdk,\n * we should escape <,>,& in string manually.\n * @param str\n */\nfunction escapeHTML(str) {\n    return str\n        .replace(/</g, \"\\\\u003c\")\n        .replace(/>/g, \"\\\\u003e\")\n        .replace(/&/g, \"\\\\u0026\");\n}\nexports.escapeHTML = escapeHTML;\n/**\n * Unescapes \\u003c/(<),\\u003e(>),\\u0026(&) in string.\n * Golang's json marshaller escapes <,>,& by default, whilst for most of the users, such escape characters are unfamiliar.\n * This function can be used to show the escaped characters with more familiar characters.\n * @param str\n */\nfunction unescapeHTML(str) {\n    return str\n        .replace(/\\\\u003c/g, \"<\")\n        .replace(/\\\\u003e/g, \">\")\n        .replace(/\\\\u0026/g, \"&\");\n}\nexports.unescapeHTML = unescapeHTML;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvZXNjYXBlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLGtCQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvbW1vblxcYnVpbGRcXGVzY2FwZVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVuZXNjYXBlSFRNTCA9IGV4cG9ydHMuZXNjYXBlSFRNTCA9IHZvaWQgMDtcbi8qKlxuICogRXNjYXBlcyA8LD4sJiBpbiBzdHJpbmcuXG4gKiBHb2xhbmcncyBqc29uIG1hcnNoYWxsZXIgZXNjYXBlcyA8LD4sJiBieSBkZWZhdWx0LlxuICogSG93ZXZlciwgYmVjYXVzZSBKUyBkb2Vzbid0IGRvIHRoYXQgYnkgZGVmYXVsdCwgdG8gbWF0Y2ggdGhlIHNpZ24gZG9jIHdpdGggY29zbW9zLXNkayxcbiAqIHdlIHNob3VsZCBlc2NhcGUgPCw+LCYgaW4gc3RyaW5nIG1hbnVhbGx5LlxuICogQHBhcmFtIHN0clxuICovXG5mdW5jdGlvbiBlc2NhcGVIVE1MKHN0cikge1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnJlcGxhY2UoLzwvZywgXCJcXFxcdTAwM2NcIilcbiAgICAgICAgLnJlcGxhY2UoLz4vZywgXCJcXFxcdTAwM2VcIilcbiAgICAgICAgLnJlcGxhY2UoLyYvZywgXCJcXFxcdTAwMjZcIik7XG59XG5leHBvcnRzLmVzY2FwZUhUTUwgPSBlc2NhcGVIVE1MO1xuLyoqXG4gKiBVbmVzY2FwZXMgXFx1MDAzYy8oPCksXFx1MDAzZSg+KSxcXHUwMDI2KCYpIGluIHN0cmluZy5cbiAqIEdvbGFuZydzIGpzb24gbWFyc2hhbGxlciBlc2NhcGVzIDwsPiwmIGJ5IGRlZmF1bHQsIHdoaWxzdCBmb3IgbW9zdCBvZiB0aGUgdXNlcnMsIHN1Y2ggZXNjYXBlIGNoYXJhY3RlcnMgYXJlIHVuZmFtaWxpYXIuXG4gKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIHNob3cgdGhlIGVzY2FwZWQgY2hhcmFjdGVycyB3aXRoIG1vcmUgZmFtaWxpYXIgY2hhcmFjdGVycy5cbiAqIEBwYXJhbSBzdHJcbiAqL1xuZnVuY3Rpb24gdW5lc2NhcGVIVE1MKHN0cikge1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnJlcGxhY2UoL1xcXFx1MDAzYy9nLCBcIjxcIilcbiAgICAgICAgLnJlcGxhY2UoL1xcXFx1MDAzZS9nLCBcIj5cIilcbiAgICAgICAgLnJlcGxhY2UoL1xcXFx1MDAyNi9nLCBcIiZcIik7XG59XG5leHBvcnRzLnVuZXNjYXBlSFRNTCA9IHVuZXNjYXBlSFRNTDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/escape/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/icns/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/icns/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateICNSName = exports.parseICNSName = void 0;\nfunction parseICNSName(name) {\n    const split = name.split(\".\");\n    if (split.length === 2) {\n        if (split[0].length > 0 && split[1].length > 0) {\n            return [split[0], split[1]];\n        }\n    }\n    return undefined;\n}\nexports.parseICNSName = parseICNSName;\nfunction validateICNSName(name, bech32Prefix) {\n    const parsed = parseICNSName(name);\n    if (!parsed) {\n        return false;\n    }\n    return parsed[1] === bech32Prefix;\n}\nexports.validateICNSName = validateICNSName;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvaWNucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyxxQkFBcUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb21tb25cXGJ1aWxkXFxpY25zXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVJQ05TTmFtZSA9IGV4cG9ydHMucGFyc2VJQ05TTmFtZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIHBhcnNlSUNOU05hbWUobmFtZSkge1xuICAgIGNvbnN0IHNwbGl0ID0gbmFtZS5zcGxpdChcIi5cIik7XG4gICAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICBpZiAoc3BsaXRbMF0ubGVuZ3RoID4gMCAmJiBzcGxpdFsxXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gW3NwbGl0WzBdLCBzcGxpdFsxXV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMucGFyc2VJQ05TTmFtZSA9IHBhcnNlSUNOU05hbWU7XG5mdW5jdGlvbiB2YWxpZGF0ZUlDTlNOYW1lKG5hbWUsIGJlY2gzMlByZWZpeCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlSUNOU05hbWUobmFtZSk7XG4gICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkWzFdID09PSBiZWNoMzJQcmVmaXg7XG59XG5leHBvcnRzLnZhbGlkYXRlSUNOU05hbWUgPSB2YWxpZGF0ZUlDTlNOYW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/icns/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./kv-store */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./denom */ \"(ssr)/./node_modules/@keplr-wallet/common/build/denom/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./mobx */ \"(ssr)/./node_modules/@keplr-wallet/common/build/mobx/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@keplr-wallet/common/build/utils/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./escape */ \"(ssr)/./node_modules/@keplr-wallet/common/build/escape/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./json */ \"(ssr)/./node_modules/@keplr-wallet/common/build/json/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./icns */ \"(ssr)/./node_modules/@keplr-wallet/common/build/icns/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHFGQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQywrRUFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsNkVBQVE7QUFDN0IsYUFBYSxtQkFBTyxDQUFDLCtFQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxpRkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsNkVBQVE7QUFDN0IsYUFBYSxtQkFBTyxDQUFDLDZFQUFRO0FBQzdCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb21tb25cXGJ1aWxkXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2t2LXN0b3JlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9kZW5vbVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbW9ieFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VzY2FwZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vanNvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaWNuc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/json/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/json/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./sort */ \"(ssr)/./node_modules/@keplr-wallet/common/build/json/sort.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvanNvbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsNEVBQVE7QUFDN0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvbW1vblxcYnVpbGRcXGpzb25cXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc29ydFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/json/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/json/sort.js":
/*!**************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/json/sort.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sortedJsonByKeyStringify = exports.sortObjectByKey = void 0;\nfunction sortObjectByKey(obj) {\n    if (typeof obj !== \"object\" || obj === null) {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(sortObjectByKey);\n    }\n    const sortedKeys = Object.keys(obj).sort();\n    const result = {};\n    sortedKeys.forEach((key) => {\n        result[key] = sortObjectByKey(obj[key]);\n    });\n    return result;\n}\nexports.sortObjectByKey = sortObjectByKey;\nfunction sortedJsonByKeyStringify(obj) {\n    return JSON.stringify(sortObjectByKey(obj));\n}\nexports.sortedJsonByKeyStringify = sortedJsonByKeyStringify;\n//# sourceMappingURL=sort.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvanNvbi9zb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQyxHQUFHLHVCQUF1QjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb21tb25cXGJ1aWxkXFxqc29uXFxzb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zb3J0ZWRKc29uQnlLZXlTdHJpbmdpZnkgPSBleHBvcnRzLnNvcnRPYmplY3RCeUtleSA9IHZvaWQgMDtcbmZ1bmN0aW9uIHNvcnRPYmplY3RCeUtleShvYmopIHtcbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLm1hcChzb3J0T2JqZWN0QnlLZXkpO1xuICAgIH1cbiAgICBjb25zdCBzb3J0ZWRLZXlzID0gT2JqZWN0LmtleXMob2JqKS5zb3J0KCk7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgc29ydGVkS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBzb3J0T2JqZWN0QnlLZXkob2JqW2tleV0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnNvcnRPYmplY3RCeUtleSA9IHNvcnRPYmplY3RCeUtleTtcbmZ1bmN0aW9uIHNvcnRlZEpzb25CeUtleVN0cmluZ2lmeShvYmopIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc29ydE9iamVjdEJ5S2V5KG9iaikpO1xufVxuZXhwb3J0cy5zb3J0ZWRKc29uQnlLZXlTdHJpbmdpZnkgPSBzb3J0ZWRKc29uQnlLZXlTdHJpbmdpZnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/json/sort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/base.js":
/*!******************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/kv-store/base.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseKVStore = void 0;\nclass BaseKVStore {\n    constructor(provider, _prefix) {\n        this.provider = provider;\n        this._prefix = _prefix;\n    }\n    get(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const k = this.prefix() + \"/\" + key;\n            const data = yield this.provider.get();\n            return data[k];\n        });\n    }\n    set(key, data) {\n        const k = this.prefix() + \"/\" + key;\n        return this.provider.set({ [k]: data });\n    }\n    prefix() {\n        return this._prefix;\n    }\n}\nexports.BaseKVStore = BaseKVStore;\n//# sourceMappingURL=base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQva3Ytc3RvcmUvYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxXQUFXO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvbW1vblxcYnVpbGRcXGt2LXN0b3JlXFxiYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJhc2VLVlN0b3JlID0gdm9pZCAwO1xuY2xhc3MgQmFzZUtWU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyLCBfcHJlZml4KSB7XG4gICAgICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgdGhpcy5fcHJlZml4ID0gX3ByZWZpeDtcbiAgICB9XG4gICAgZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgayA9IHRoaXMucHJlZml4KCkgKyBcIi9cIiArIGtleTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCB0aGlzLnByb3ZpZGVyLmdldCgpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFba107XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXQoa2V5LCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IGsgPSB0aGlzLnByZWZpeCgpICsgXCIvXCIgKyBrZXk7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLnNldCh7IFtrXTogZGF0YSB9KTtcbiAgICB9XG4gICAgcHJlZml4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJlZml4O1xuICAgIH1cbn1cbmV4cG9ydHMuQmFzZUtWU3RvcmUgPSBCYXNlS1ZTdG9yZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/extension.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/kv-store/extension.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExtensionKVStore = void 0;\nconst base_1 = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/base.js\");\nclass ExtensionKVStore extends base_1.BaseKVStore {\n    constructor(prefix) {\n        if (!ExtensionKVStore.KVStoreProvider) {\n            if (typeof browser === \"undefined\") {\n                console.log(\"You should use ExtensionKVStore on the extension environment.\");\n            }\n            else if (!browser.storage || !browser.storage.local) {\n                console.log(\"The 'browser' exists, but it doesn't seem to be an extension environment. This can happen in Safari browser.\");\n            }\n            else {\n                ExtensionKVStore.KVStoreProvider = {\n                    get: browser.storage.local.get,\n                    set: browser.storage.local.set,\n                    multiGet: browser.storage.local.get,\n                };\n            }\n        }\n        if (!ExtensionKVStore.KVStoreProvider) {\n            throw new Error(\"Can't initialize kv store for browser extension\");\n        }\n        super(ExtensionKVStore.KVStoreProvider, prefix);\n    }\n    multiGet(keys) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            // Remove duplications\n            keys = Array.from(new Set(keys));\n            const res = (_a = (yield ExtensionKVStore.KVStoreProvider.multiGet(keys.map((k) => this.prefix() + \"/\" + k)))) !== null && _a !== void 0 ? _a : {};\n            const prefixedKeys = Object.keys(res);\n            for (const prefixedKey of prefixedKeys) {\n                const key = prefixedKey.slice(this.prefix().length + 1);\n                res[key] = res[prefixedKey];\n                delete res[prefixedKey];\n            }\n            return res;\n        });\n    }\n}\nexports.ExtensionKVStore = ExtensionKVStore;\n//# sourceMappingURL=extension.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQva3Ytc3RvcmUvZXh0ZW5zaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZUFBZSxtQkFBTyxDQUFDLGdGQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcY29tbW9uXFxidWlsZFxca3Ytc3RvcmVcXGV4dGVuc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHRlbnNpb25LVlN0b3JlID0gdm9pZCAwO1xuY29uc3QgYmFzZV8xID0gcmVxdWlyZShcIi4vYmFzZVwiKTtcbmNsYXNzIEV4dGVuc2lvbktWU3RvcmUgZXh0ZW5kcyBiYXNlXzEuQmFzZUtWU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKHByZWZpeCkge1xuICAgICAgICBpZiAoIUV4dGVuc2lvbktWU3RvcmUuS1ZTdG9yZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJyb3dzZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIllvdSBzaG91bGQgdXNlIEV4dGVuc2lvbktWU3RvcmUgb24gdGhlIGV4dGVuc2lvbiBlbnZpcm9ubWVudC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghYnJvd3Nlci5zdG9yYWdlIHx8ICFicm93c2VyLnN0b3JhZ2UubG9jYWwpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoZSAnYnJvd3NlcicgZXhpc3RzLCBidXQgaXQgZG9lc24ndCBzZWVtIHRvIGJlIGFuIGV4dGVuc2lvbiBlbnZpcm9ubWVudC4gVGhpcyBjYW4gaGFwcGVuIGluIFNhZmFyaSBicm93c2VyLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIEV4dGVuc2lvbktWU3RvcmUuS1ZTdG9yZVByb3ZpZGVyID0ge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5nZXQsXG4gICAgICAgICAgICAgICAgICAgIHNldDogYnJvd3Nlci5zdG9yYWdlLmxvY2FsLnNldCxcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlHZXQ6IGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5nZXQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIUV4dGVuc2lvbktWU3RvcmUuS1ZTdG9yZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBpbml0aWFsaXplIGt2IHN0b3JlIGZvciBicm93c2VyIGV4dGVuc2lvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihFeHRlbnNpb25LVlN0b3JlLktWU3RvcmVQcm92aWRlciwgcHJlZml4KTtcbiAgICB9XG4gICAgbXVsdGlHZXQoa2V5cykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRpb25zXG4gICAgICAgICAgICBrZXlzID0gQXJyYXkuZnJvbShuZXcgU2V0KGtleXMpKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IChfYSA9ICh5aWVsZCBFeHRlbnNpb25LVlN0b3JlLktWU3RvcmVQcm92aWRlci5tdWx0aUdldChrZXlzLm1hcCgoaykgPT4gdGhpcy5wcmVmaXgoKSArIFwiL1wiICsgaykpKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XG4gICAgICAgICAgICBjb25zdCBwcmVmaXhlZEtleXMgPSBPYmplY3Qua2V5cyhyZXMpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwcmVmaXhlZEtleSBvZiBwcmVmaXhlZEtleXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwcmVmaXhlZEtleS5zbGljZSh0aGlzLnByZWZpeCgpLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgICAgIHJlc1trZXldID0gcmVzW3ByZWZpeGVkS2V5XTtcbiAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3ByZWZpeGVkS2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuRXh0ZW5zaW9uS1ZTdG9yZSA9IEV4dGVuc2lvbktWU3RvcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRlbnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/extension.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/kv-store/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./interface */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/interface.js\"), exports);\n__exportStar(__webpack_require__(/*! ./extension */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/extension.js\"), exports);\n__exportStar(__webpack_require__(/*! ./base */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/base.js\"), exports);\n__exportStar(__webpack_require__(/*! ./memory */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/memory.js\"), exports);\n__exportStar(__webpack_require__(/*! ./local */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/local.js\"), exports);\n__exportStar(__webpack_require__(/*! ./indexed-db */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/indexed-db.js\"), exports);\n__exportStar(__webpack_require__(/*! ./prefix */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/prefix.js\"), exports);\n__exportStar(__webpack_require__(/*! ./multi-get */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/multi-get.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQva3Ytc3RvcmUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDBGQUFhO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQywwRkFBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsZ0ZBQVE7QUFDN0IsYUFBYSxtQkFBTyxDQUFDLG9GQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxrRkFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsNEZBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLG9GQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQywwRkFBYTtBQUNsQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcY29tbW9uXFxidWlsZFxca3Ytc3RvcmVcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaW50ZXJmYWNlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9leHRlbnNpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Jhc2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21lbW9yeVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbG9jYWxcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2luZGV4ZWQtZGJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3ByZWZpeFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbXVsdGktZ2V0XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/indexed-db.js":
/*!************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/kv-store/indexed-db.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IndexedDBKVStore = void 0;\nclass IndexedDBKVStore {\n    constructor(_prefix) {\n        this._prefix = _prefix;\n    }\n    get(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tx = (yield this.getDB()).transaction([this.prefix()], \"readonly\");\n            const store = tx.objectStore(this.prefix());\n            return new Promise((resolve, reject) => {\n                const request = store.get(key);\n                request.onerror = (event) => {\n                    event.stopPropagation();\n                    reject(event.target);\n                };\n                request.onsuccess = () => {\n                    if (!request.result) {\n                        resolve(undefined);\n                    }\n                    else {\n                        resolve(request.result.data);\n                    }\n                };\n            });\n        });\n    }\n    set(key, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (data === null) {\n                const tx = (yield this.getDB()).transaction([this.prefix()], \"readwrite\");\n                const store = tx.objectStore(this.prefix());\n                return new Promise((resolve, reject) => {\n                    const request = store.delete(key);\n                    request.onerror = (event) => {\n                        event.stopPropagation();\n                        reject(event.target);\n                    };\n                    request.onsuccess = () => {\n                        resolve();\n                    };\n                });\n            }\n            else {\n                const tx = (yield this.getDB()).transaction([this.prefix()], \"readwrite\");\n                const store = tx.objectStore(this.prefix());\n                return new Promise((resolve, reject) => {\n                    const request = store.put({\n                        key,\n                        data,\n                    });\n                    request.onerror = (event) => {\n                        event.stopPropagation();\n                        reject(event.target);\n                    };\n                    request.onsuccess = () => {\n                        resolve();\n                    };\n                });\n            }\n        });\n    }\n    prefix() {\n        return this._prefix;\n    }\n    getDB() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.cachedDB) {\n                return this.cachedDB;\n            }\n            return new Promise((resolve, reject) => {\n                const request = window.indexedDB.open(this.prefix());\n                request.onerror = (event) => {\n                    event.stopPropagation();\n                    reject(event.target);\n                };\n                request.onupgradeneeded = (event) => {\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    const db = event.target.result;\n                    db.createObjectStore(this.prefix(), { keyPath: \"key\" });\n                };\n                request.onsuccess = () => {\n                    this.cachedDB = request.result;\n                    resolve(request.result);\n                };\n            });\n        });\n    }\n}\nexports.IndexedDBKVStore = IndexedDBKVStore;\n//# sourceMappingURL=indexed-db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQva3Ytc3RvcmUvaW5kZXhlZC1kYi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxnQkFBZ0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcY29tbW9uXFxidWlsZFxca3Ytc3RvcmVcXGluZGV4ZWQtZGIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW5kZXhlZERCS1ZTdG9yZSA9IHZvaWQgMDtcbmNsYXNzIEluZGV4ZWREQktWU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKF9wcmVmaXgpIHtcbiAgICAgICAgdGhpcy5fcHJlZml4ID0gX3ByZWZpeDtcbiAgICB9XG4gICAgZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgdHggPSAoeWllbGQgdGhpcy5nZXREQigpKS50cmFuc2FjdGlvbihbdGhpcy5wcmVmaXgoKV0sIFwicmVhZG9ubHlcIik7XG4gICAgICAgICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKHRoaXMucHJlZml4KCkpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gc3RvcmUuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcXVlc3QucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0KGtleSwgZGF0YSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eCA9ICh5aWVsZCB0aGlzLmdldERCKCkpLnRyYW5zYWN0aW9uKFt0aGlzLnByZWZpeCgpXSwgXCJyZWFkd3JpdGVcIik7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSh0aGlzLnByZWZpeCgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gc3RvcmUuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eCA9ICh5aWVsZCB0aGlzLmdldERCKCkpLnRyYW5zYWN0aW9uKFt0aGlzLnByZWZpeCgpXSwgXCJyZWFkd3JpdGVcIik7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSh0aGlzLnByZWZpeCgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gc3RvcmUucHV0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHJlZml4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJlZml4O1xuICAgIH1cbiAgICBnZXREQigpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhY2hlZERCKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkREI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSB3aW5kb3cuaW5kZXhlZERCLm9wZW4odGhpcy5wcmVmaXgoKSk7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYiA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKHRoaXMucHJlZml4KCksIHsga2V5UGF0aDogXCJrZXlcIiB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZERCID0gcmVxdWVzdC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5JbmRleGVkREJLVlN0b3JlID0gSW5kZXhlZERCS1ZTdG9yZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4ZWQtZGIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/indexed-db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/interface.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/kv-store/interface.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQva3Ytc3RvcmUvaW50ZXJmYWNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb21tb25cXGJ1aWxkXFxrdi1zdG9yZVxcaW50ZXJmYWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/interface.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/local.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/kv-store/local.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LocalKVStore = void 0;\nclass LocalKVStore {\n    constructor(_prefix) {\n        this._prefix = _prefix;\n    }\n    get(key) {\n        const k = this.prefix() + \"/\" + key;\n        const data = localStorage.getItem(k);\n        if (data === null) {\n            return Promise.resolve(undefined);\n        }\n        return Promise.resolve(JSON.parse(data));\n    }\n    set(key, data) {\n        const k = this.prefix() + \"/\" + key;\n        if (data === null) {\n            return Promise.resolve(localStorage.removeItem(k));\n        }\n        return Promise.resolve(localStorage.setItem(k, JSON.stringify(data)));\n    }\n    prefix() {\n        return this._prefix;\n    }\n}\nexports.LocalKVStore = LocalKVStore;\n//# sourceMappingURL=local.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQva3Ytc3RvcmUvbG9jYWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvbW1vblxcYnVpbGRcXGt2LXN0b3JlXFxsb2NhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTG9jYWxLVlN0b3JlID0gdm9pZCAwO1xuY2xhc3MgTG9jYWxLVlN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihfcHJlZml4KSB7XG4gICAgICAgIHRoaXMuX3ByZWZpeCA9IF9wcmVmaXg7XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgY29uc3QgayA9IHRoaXMucHJlZml4KCkgKyBcIi9cIiArIGtleTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGspO1xuICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoSlNPTi5wYXJzZShkYXRhKSk7XG4gICAgfVxuICAgIHNldChrZXksIGRhdGEpIHtcbiAgICAgICAgY29uc3QgayA9IHRoaXMucHJlZml4KCkgKyBcIi9cIiArIGtleTtcbiAgICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oaykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobG9jYWxTdG9yYWdlLnNldEl0ZW0oaywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpKTtcbiAgICB9XG4gICAgcHJlZml4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJlZml4O1xuICAgIH1cbn1cbmV4cG9ydHMuTG9jYWxLVlN0b3JlID0gTG9jYWxLVlN0b3JlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/local.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/memory.js":
/*!********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/kv-store/memory.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MemoryKVStore = void 0;\nconst base_1 = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/base.js\");\nclass MemoryKVStoreProvider {\n    constructor() {\n        this.store = {};\n    }\n    get() {\n        return Promise.resolve(this.store);\n    }\n    set(items) {\n        // Generally, memory kv store is used for testing, and mocking.\n        // However, we can store non-primitive type to memory even though local storage generally can't do that.\n        // To mitigate the risk, we check the type of value to be stored if env is for testing.\n        if (typeof process !== \"undefined\" &&\n            ( false ||\n                \"development\" === \"development\")) {\n            this.checkNotPrimitiveField(items);\n        }\n        this.store = Object.assign(Object.assign({}, this.store), items);\n        return Promise.resolve();\n    }\n    checkNotPrimitiveField(items) {\n        Object.keys(items).forEach((key) => {\n            const value = items[key];\n            if (value != null && typeof value === \"object\") {\n                if (value.constructor !== Object && value.constructor !== Array) {\n                    throw new Error(`${key} may not be serializable: ${value.constructor.name}`);\n                }\n                this.checkNotPrimitiveField(value);\n            }\n        });\n    }\n}\nclass MemoryKVStore extends base_1.BaseKVStore {\n    constructor(prefix) {\n        super(new MemoryKVStoreProvider(), prefix);\n    }\n}\nexports.MemoryKVStore = MemoryKVStore;\n//# sourceMappingURL=memory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQva3Ytc3RvcmUvbWVtb3J5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQixlQUFlLG1CQUFPLENBQUMsZ0ZBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFrQztBQUMvQyxnQkFBZ0IsYUFBdUI7QUFDdkM7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxLQUFLLDJCQUEyQix1QkFBdUI7QUFDOUY7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb21tb25cXGJ1aWxkXFxrdi1zdG9yZVxcbWVtb3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NZW1vcnlLVlN0b3JlID0gdm9pZCAwO1xuY29uc3QgYmFzZV8xID0gcmVxdWlyZShcIi4vYmFzZVwiKTtcbmNsYXNzIE1lbW9yeUtWU3RvcmVQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSB7fTtcbiAgICB9XG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuc3RvcmUpO1xuICAgIH1cbiAgICBzZXQoaXRlbXMpIHtcbiAgICAgICAgLy8gR2VuZXJhbGx5LCBtZW1vcnkga3Ygc3RvcmUgaXMgdXNlZCBmb3IgdGVzdGluZywgYW5kIG1vY2tpbmcuXG4gICAgICAgIC8vIEhvd2V2ZXIsIHdlIGNhbiBzdG9yZSBub24tcHJpbWl0aXZlIHR5cGUgdG8gbWVtb3J5IGV2ZW4gdGhvdWdoIGxvY2FsIHN0b3JhZ2UgZ2VuZXJhbGx5IGNhbid0IGRvIHRoYXQuXG4gICAgICAgIC8vIFRvIG1pdGlnYXRlIHRoZSByaXNrLCB3ZSBjaGVjayB0aGUgdHlwZSBvZiB2YWx1ZSB0byBiZSBzdG9yZWQgaWYgZW52IGlzIGZvciB0ZXN0aW5nLlxuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgIChwcm9jZXNzLmVudltcIk5PREVfRU5WXCJdID09PSBcInRlc3RcIiB8fFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52W1wiTk9ERV9FTlZcIl0gPT09IFwiZGV2ZWxvcG1lbnRcIikpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tOb3RQcmltaXRpdmVGaWVsZChpdGVtcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9yZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdG9yZSksIGl0ZW1zKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBjaGVja05vdFByaW1pdGl2ZUZpZWxkKGl0ZW1zKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGl0ZW1zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaXRlbXNba2V5XTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0ICYmIHZhbHVlLmNvbnN0cnVjdG9yICE9PSBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7a2V5fSBtYXkgbm90IGJlIHNlcmlhbGl6YWJsZTogJHt2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrTm90UHJpbWl0aXZlRmllbGQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5jbGFzcyBNZW1vcnlLVlN0b3JlIGV4dGVuZHMgYmFzZV8xLkJhc2VLVlN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihwcmVmaXgpIHtcbiAgICAgICAgc3VwZXIobmV3IE1lbW9yeUtWU3RvcmVQcm92aWRlcigpLCBwcmVmaXgpO1xuICAgIH1cbn1cbmV4cG9ydHMuTWVtb3J5S1ZTdG9yZSA9IE1lbW9yeUtWU3RvcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW1vcnkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/memory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/multi-get.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/kv-store/multi-get.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WrapMultiGetKVStore = void 0;\nclass WrapMultiGetKVStore {\n    constructor(kvStore) {\n        this.kvStore = kvStore;\n    }\n    multiGet(keys) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Remove duplications\n            keys = Array.from(new Set(keys));\n            const res = {};\n            const promises = [];\n            for (const key of keys) {\n                promises.push((() => __awaiter(this, void 0, void 0, function* () {\n                    res[key] = yield this.kvStore.get(key);\n                }))());\n            }\n            yield Promise.all(promises);\n            return res;\n        });\n    }\n}\nexports.WrapMultiGetKVStore = WrapMultiGetKVStore;\n//# sourceMappingURL=multi-get.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQva3Ytc3RvcmUvbXVsdGktZ2V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvbW1vblxcYnVpbGRcXGt2LXN0b3JlXFxtdWx0aS1nZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV3JhcE11bHRpR2V0S1ZTdG9yZSA9IHZvaWQgMDtcbmNsYXNzIFdyYXBNdWx0aUdldEtWU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKGt2U3RvcmUpIHtcbiAgICAgICAgdGhpcy5rdlN0b3JlID0ga3ZTdG9yZTtcbiAgICB9XG4gICAgbXVsdGlHZXQoa2V5cykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0aW9uc1xuICAgICAgICAgICAga2V5cyA9IEFycmF5LmZyb20obmV3IFNldChrZXlzKSk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgoKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICByZXNba2V5XSA9IHlpZWxkIHRoaXMua3ZTdG9yZS5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICB9KSkoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5aWVsZCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLldyYXBNdWx0aUdldEtWU3RvcmUgPSBXcmFwTXVsdGlHZXRLVlN0b3JlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVsdGktZ2V0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/multi-get.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/prefix.js":
/*!********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/kv-store/prefix.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PrefixKVStore = void 0;\nclass PrefixKVStore {\n    constructor(kvStore, _prefix) {\n        this.kvStore = kvStore;\n        this._prefix = _prefix;\n    }\n    prefix() {\n        return this._prefix;\n    }\n    get(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const k = this.prefix() + \"/\" + key;\n            return yield this.kvStore.get(k);\n        });\n    }\n    set(key, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const k = this.prefix() + \"/\" + key;\n            return yield this.kvStore.set(k, data);\n        });\n    }\n}\nexports.PrefixKVStore = PrefixKVStore;\n//# sourceMappingURL=prefix.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQva3Ytc3RvcmUvcHJlZml4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcY29tbW9uXFxidWlsZFxca3Ytc3RvcmVcXHByZWZpeC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QcmVmaXhLVlN0b3JlID0gdm9pZCAwO1xuY2xhc3MgUHJlZml4S1ZTdG9yZSB7XG4gICAgY29uc3RydWN0b3Ioa3ZTdG9yZSwgX3ByZWZpeCkge1xuICAgICAgICB0aGlzLmt2U3RvcmUgPSBrdlN0b3JlO1xuICAgICAgICB0aGlzLl9wcmVmaXggPSBfcHJlZml4O1xuICAgIH1cbiAgICBwcmVmaXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVmaXg7XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGsgPSB0aGlzLnByZWZpeCgpICsgXCIvXCIgKyBrZXk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5rdlN0b3JlLmdldChrKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldChrZXksIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGsgPSB0aGlzLnByZWZpeCgpICsgXCIvXCIgKyBrZXk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5rdlN0b3JlLnNldChrLCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5QcmVmaXhLVlN0b3JlID0gUHJlZml4S1ZTdG9yZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWZpeC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/kv-store/prefix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/mobx/debounce.js":
/*!******************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/mobx/debounce.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DebounceActionTimer = void 0;\nconst mobx_1 = __webpack_require__(/*! mobx */ \"(ssr)/./node_modules/mobx/dist/mobx.esm.js\");\nclass DebounceActionTimer {\n    constructor(debounceMs, handler) {\n        this.debounceMs = debounceMs;\n        this.handler = handler;\n        this.requests = [];\n        this.startTime = 0;\n        this.tick = () => {\n            let shouldExec = this.debounceMs <= 0;\n            if (this.debounceMs > 0) {\n                const now = Date.now();\n                if (now - this.startTime >= this.debounceMs) {\n                    shouldExec = true;\n                }\n            }\n            if (shouldExec) {\n                // Should use sliced (copied) array\n                const requests = this.requests.slice();\n                const responses = this.handler(requests);\n                if (typeof responses === \"object\" && \"then\" in responses) {\n                    Promise.resolve(responses).then((responses) => {\n                        this.handleResponses(requests, responses);\n                    });\n                }\n                else {\n                    this.handleResponses(requests, responses);\n                }\n                this.requests = [];\n            }\n            else {\n                this.nextTick(this.tick);\n            }\n        };\n        this.handleResponses = (requests, responses) => {\n            (0, mobx_1.runInAction)(() => {\n                for (let i = 0; i < requests.length; i++) {\n                    const req = requests[i];\n                    const res = responses[i];\n                    req.action(res);\n                }\n            });\n            for (const req of requests) {\n                req.resolver();\n            }\n        };\n    }\n    call(args, action) {\n        return new Promise((resolve) => {\n            const newStart = this.requests.length === 0;\n            this.requests.push({ args, action, resolver: resolve });\n            if (newStart) {\n                this.startTimer();\n            }\n        });\n    }\n    startTimer() {\n        this.startTime = Date.now();\n        this.nextTick(this.tick);\n    }\n    nextTick(fn) {\n        if (this.debounceMs <= 0) {\n            Promise.resolve().then(fn);\n            return;\n        }\n        if (typeof window !== \"undefined\" && window.requestAnimationFrame) {\n            window.requestAnimationFrame(fn);\n        }\n        else {\n            setTimeout(fn, this.debounceMs);\n        }\n    }\n}\nexports.DebounceActionTimer = DebounceActionTimer;\n//# sourceMappingURL=debounce.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvbW9ieC9kZWJvdW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsZUFBZSxtQkFBTyxDQUFDLHdEQUFNO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MscUJBQXFCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaUNBQWlDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvbW1vblxcYnVpbGRcXG1vYnhcXGRlYm91bmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EZWJvdW5jZUFjdGlvblRpbWVyID0gdm9pZCAwO1xuY29uc3QgbW9ieF8xID0gcmVxdWlyZShcIm1vYnhcIik7XG5jbGFzcyBEZWJvdW5jZUFjdGlvblRpbWVyIHtcbiAgICBjb25zdHJ1Y3RvcihkZWJvdW5jZU1zLCBoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuZGVib3VuY2VNcyA9IGRlYm91bmNlTXM7XG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgICAgIHRoaXMucmVxdWVzdHMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSAwO1xuICAgICAgICB0aGlzLnRpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgc2hvdWxkRXhlYyA9IHRoaXMuZGVib3VuY2VNcyA8PSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVib3VuY2VNcyA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIGlmIChub3cgLSB0aGlzLnN0YXJ0VGltZSA+PSB0aGlzLmRlYm91bmNlTXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkRXhlYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNob3VsZEV4ZWMpIHtcbiAgICAgICAgICAgICAgICAvLyBTaG91bGQgdXNlIHNsaWNlZCAoY29waWVkKSBhcnJheVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RzID0gdGhpcy5yZXF1ZXN0cy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlcyA9IHRoaXMuaGFuZGxlcihyZXF1ZXN0cyk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZXMgPT09IFwib2JqZWN0XCIgJiYgXCJ0aGVuXCIgaW4gcmVzcG9uc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShyZXNwb25zZXMpLnRoZW4oKHJlc3BvbnNlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXNwb25zZXMocmVxdWVzdHMsIHJlc3BvbnNlcyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXNwb25zZXMocmVxdWVzdHMsIHJlc3BvbnNlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdHMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dFRpY2sodGhpcy50aWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVSZXNwb25zZXMgPSAocmVxdWVzdHMsIHJlc3BvbnNlcykgPT4ge1xuICAgICAgICAgICAgKDAsIG1vYnhfMS5ydW5JbkFjdGlvbikoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVxdWVzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxID0gcmVxdWVzdHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IHJlc3BvbnNlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgcmVxLmFjdGlvbihyZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXEgb2YgcmVxdWVzdHMpIHtcbiAgICAgICAgICAgICAgICByZXEucmVzb2x2ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2FsbChhcmdzLCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdTdGFydCA9IHRoaXMucmVxdWVzdHMubGVuZ3RoID09PSAwO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0cy5wdXNoKHsgYXJncywgYWN0aW9uLCByZXNvbHZlcjogcmVzb2x2ZSB9KTtcbiAgICAgICAgICAgIGlmIChuZXdTdGFydCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhcnRUaW1lcigpIHtcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLm5leHRUaWNrKHRoaXMudGljayk7XG4gICAgfVxuICAgIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIGlmICh0aGlzLmRlYm91bmNlTXMgPD0gMCkge1xuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZuLCB0aGlzLmRlYm91bmNlTXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5EZWJvdW5jZUFjdGlvblRpbWVyID0gRGVib3VuY2VBY3Rpb25UaW1lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYm91bmNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/mobx/debounce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/mobx/etc.js":
/*!*************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/mobx/etc.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toGenerator = void 0;\n// Copied from the mobx-state-tree repository.\n/**\n * @experimental\n * experimental api - might change on minor/patch releases\n *\n * Convert a promise to a generator yielding that promise\n * This is intended to allow for usage of `yield*` in async actions to\n * retain the promise return type.\n *\n * Example:\n * ```ts\n * function getDataAsync(input: string): Promise<number> { ... }\n *\n * const someModel.actions(self => ({\n *   someAction: flow(function*() {\n *     // value is typed as number\n *     const value = yield* toGenerator(getDataAsync(\"input value\"));\n *     ...\n *   })\n * }))\n * ```\n */\nfunction* toGenerator(p) {\n    return (yield p);\n}\nexports.toGenerator = toGenerator;\n//# sourceMappingURL=etc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvbW9ieC9ldGMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb21tb25cXGJ1aWxkXFxtb2J4XFxldGMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvR2VuZXJhdG9yID0gdm9pZCAwO1xuLy8gQ29waWVkIGZyb20gdGhlIG1vYngtc3RhdGUtdHJlZSByZXBvc2l0b3J5LlxuLyoqXG4gKiBAZXhwZXJpbWVudGFsXG4gKiBleHBlcmltZW50YWwgYXBpIC0gbWlnaHQgY2hhbmdlIG9uIG1pbm9yL3BhdGNoIHJlbGVhc2VzXG4gKlxuICogQ29udmVydCBhIHByb21pc2UgdG8gYSBnZW5lcmF0b3IgeWllbGRpbmcgdGhhdCBwcm9taXNlXG4gKiBUaGlzIGlzIGludGVuZGVkIHRvIGFsbG93IGZvciB1c2FnZSBvZiBgeWllbGQqYCBpbiBhc3luYyBhY3Rpb25zIHRvXG4gKiByZXRhaW4gdGhlIHByb21pc2UgcmV0dXJuIHR5cGUuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzXG4gKiBmdW5jdGlvbiBnZXREYXRhQXN5bmMoaW5wdXQ6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPiB7IC4uLiB9XG4gKlxuICogY29uc3Qgc29tZU1vZGVsLmFjdGlvbnMoc2VsZiA9PiAoe1xuICogICBzb21lQWN0aW9uOiBmbG93KGZ1bmN0aW9uKigpIHtcbiAqICAgICAvLyB2YWx1ZSBpcyB0eXBlZCBhcyBudW1iZXJcbiAqICAgICBjb25zdCB2YWx1ZSA9IHlpZWxkKiB0b0dlbmVyYXRvcihnZXREYXRhQXN5bmMoXCJpbnB1dCB2YWx1ZVwiKSk7XG4gKiAgICAgLi4uXG4gKiAgIH0pXG4gKiB9KSlcbiAqIGBgYFxuICovXG5mdW5jdGlvbiogdG9HZW5lcmF0b3IocCkge1xuICAgIHJldHVybiAoeWllbGQgcCk7XG59XG5leHBvcnRzLnRvR2VuZXJhdG9yID0gdG9HZW5lcmF0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldGMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/mobx/etc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/mobx/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/mobx/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./etc */ \"(ssr)/./node_modules/@keplr-wallet/common/build/mobx/etc.js\"), exports);\n__exportStar(__webpack_require__(/*! ./debounce */ \"(ssr)/./node_modules/@keplr-wallet/common/build/mobx/debounce.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvbW9ieC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsMEVBQU87QUFDNUIsYUFBYSxtQkFBTyxDQUFDLG9GQUFZO0FBQ2pDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb21tb25cXGJ1aWxkXFxtb2J4XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2V0Y1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGVib3VuY2VcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/mobx/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/utils/debouncer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/utils/debouncer.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Debouncer = void 0;\nclass Debouncer {\n    static promise(fn) {\n        let currentPromise;\n        return (...arguments_) => __awaiter(this, void 0, void 0, function* () {\n            if (currentPromise) {\n                return currentPromise;\n            }\n            try {\n                currentPromise = fn.apply(this, arguments_);\n                return yield currentPromise;\n            }\n            finally {\n                currentPromise = undefined;\n            }\n        });\n    }\n}\nexports.Debouncer = Debouncer;\n//# sourceMappingURL=debouncer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvdXRpbHMvZGVib3VuY2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb21tb25cXGJ1aWxkXFx1dGlsc1xcZGVib3VuY2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlYm91bmNlciA9IHZvaWQgMDtcbmNsYXNzIERlYm91bmNlciB7XG4gICAgc3RhdGljIHByb21pc2UoZm4pIHtcbiAgICAgICAgbGV0IGN1cnJlbnRQcm9taXNlO1xuICAgICAgICByZXR1cm4gKC4uLmFyZ3VtZW50c18pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50UHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFByb21pc2UgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHNfKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQgY3VycmVudFByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5EZWJvdW5jZXIgPSBEZWJvdW5jZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/utils/debouncer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/common/build/utils/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/common/build/utils/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./debouncer */ \"(ssr)/./node_modules/@keplr-wallet/common/build/utils/debouncer.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb21tb24vYnVpbGQvdXRpbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHVGQUFhO0FBQ2xDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb21tb25cXGJ1aWxkXFx1dGlsc1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9kZWJvdW5jZXJcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/common/build/utils/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/account/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/account/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseAccount = void 0;\nconst unit_1 = __webpack_require__(/*! @keplr-wallet/unit */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/index.js\");\nconst simple_fetch_1 = __webpack_require__(/*! @keplr-wallet/simple-fetch */ \"(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/index.js\");\nclass BaseAccount {\n    static fetchFromRest(rest, address, \n    // If the account doesn't exist, the result from `auth/accounts` would not have the address.\n    // In this case, if `defaultBech32Address` param is provided, this will use it instead of the result from rest.\n    defaultBech32Address = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield (0, simple_fetch_1.simpleFetch)(rest, `/cosmos/auth/v1beta1/accounts/${address}`, {\n                validateStatus: function (status) {\n                    // Permit 404 not found to handle the case of account not exists\n                    return (status >= 200 && status < 300) || status === 404;\n                },\n            });\n            return BaseAccount.fromProtoJSON(result.data, defaultBech32Address ? address : \"\");\n        });\n    }\n    static fromProtoJSON(obj, \n    // If the account doesn't exist, the result from `auth/accounts` would not have the address.\n    // In this case, if `defaultBech32Address` param is provided, this will use it instead of the result from rest.\n    defaultBech32Address = \"\") {\n        if (!obj.account) {\n            // Case of not existing account.\n            // {\n            //   \"code\": 5,\n            //   \"message\": \"rpc error: code = NotFound desc = account {address} not found: key not found\",\n            //   \"details\": [\n            //   ]\n            // }\n            if (!defaultBech32Address) {\n                throw new Error(`Account's address is unknown: ${JSON.stringify(obj)}`);\n            }\n            return new BaseAccount(\"\", defaultBech32Address, new unit_1.Int(0), new unit_1.Int(0));\n        }\n        let value = obj.account;\n        const type = value[\"@type\"] || \"\";\n        // If the chain modifies the account type, handle the case where the account type embeds the base account.\n        // (Actually, the only existent case is ethermint, and this is the line for handling ethermint)\n        const baseAccount = value.BaseAccount || value.baseAccount || value.base_account;\n        if (baseAccount) {\n            value = baseAccount;\n        }\n        // If the chain modifies the account type, handle the case where the account type embeds the account.\n        // (Actually, the only existent case is desmos, and this is the line for handling desmos)\n        const embedAccount = value.account;\n        if (embedAccount) {\n            value = embedAccount;\n        }\n        // If the account is the vesting account that embeds the base vesting account,\n        // the actual base account exists under the base vesting account.\n        // But, this can be different according to the version of cosmos-sdk.\n        // So, anyway, try to parse it by some ways...\n        const baseVestingAccount = value.BaseVestingAccount ||\n            value.baseVestingAccount ||\n            value.base_vesting_account;\n        if (baseVestingAccount) {\n            value = baseVestingAccount;\n            const baseAccount = value.BaseAccount || value.baseAccount || value.base_account;\n            if (baseAccount) {\n                value = baseAccount;\n            }\n        }\n        let address = value.address;\n        if (!address) {\n            if (!defaultBech32Address) {\n                throw new Error(`Account's address is unknown: ${JSON.stringify(obj)}`);\n            }\n            address = defaultBech32Address;\n        }\n        const accountNumber = value.account_number;\n        const sequence = value.sequence;\n        return new BaseAccount(type, address, new unit_1.Int(accountNumber || \"0\"), new unit_1.Int(sequence || \"0\"));\n    }\n    constructor(type, address, accountNumber, sequence) {\n        this.type = type;\n        this.address = address;\n        this.accountNumber = accountNumber;\n        this.sequence = sequence;\n    }\n    getType() {\n        return this.type;\n    }\n    getAddress() {\n        return this.address;\n    }\n    getAccountNumber() {\n        return this.accountNumber;\n    }\n    getSequence() {\n        return this.sequence;\n    }\n}\nexports.BaseAccount = BaseAccount;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/account/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/adr-36/amino.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/adr-36/amino.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.verifyADR36Amino = exports.verifyADR36AminoSignDoc = exports.makeADR36AminoSignDoc = exports.checkAndValidateADR36AminoSignDoc = void 0;\nconst signing_1 = __webpack_require__(/*! ../signing */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/signing/index.js\");\nconst bech32_1 = __webpack_require__(/*! ../bech32 */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/bech32/index.js\");\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nconst crypto_1 = __webpack_require__(/*! @keplr-wallet/crypto */ \"(ssr)/./node_modules/@keplr-wallet/crypto/build/index.js\");\n/**\n * Check the sign doc is for ADR-36.\n * If the sign doc is expected to be ADR-36, validate the sign doc and throw an error if the sign doc is valid ADR-36.\n * @param signDoc\n * @param bech32PrefixAccAddr If this argument is provided, validate the signer in the `MsgSignData` with this prefix.\n *                            If not, validate the signer in the `MsgSignData` without considering the bech32 prefix.\n */\nfunction checkAndValidateADR36AminoSignDoc(signDoc, bech32PrefixAccAddr) {\n    const hasOnlyMsgSignData = (() => {\n        if (signDoc &&\n            signDoc.msgs &&\n            Array.isArray(signDoc.msgs) &&\n            signDoc.msgs.length === 1) {\n            const msg = signDoc.msgs[0];\n            return msg.type === \"sign/MsgSignData\";\n        }\n        else {\n            return false;\n        }\n    })();\n    if (!hasOnlyMsgSignData) {\n        return false;\n    }\n    if (signDoc.chain_id !== \"\") {\n        throw new Error(\"Chain id should be empty string for ADR-36 signing\");\n    }\n    if (signDoc.memo !== \"\") {\n        throw new Error(\"Memo should be empty string for ADR-36 signing\");\n    }\n    if (signDoc.account_number !== \"0\") {\n        throw new Error('Account number should be \"0\" for ADR-36 signing');\n    }\n    if (signDoc.sequence !== \"0\") {\n        throw new Error('Sequence should be \"0\" for ADR-36 signing');\n    }\n    if (signDoc.fee.gas !== \"0\") {\n        throw new Error('Gas should be \"0\" for ADR-36 signing');\n    }\n    if (signDoc.fee.amount.length !== 0) {\n        throw new Error(\"Fee amount should be empty array for ADR-36 signing\");\n    }\n    const msg = signDoc.msgs[0];\n    if (msg.type !== \"sign/MsgSignData\") {\n        throw new Error(`Invalid type of ADR-36 sign msg: ${msg.type}`);\n    }\n    if (!msg.value) {\n        throw new Error(\"Empty value in the msg\");\n    }\n    const signer = msg.value.signer;\n    if (!signer) {\n        throw new Error(\"Empty signer in the ADR-36 msg\");\n    }\n    bech32_1.Bech32Address.validate(signer, bech32PrefixAccAddr);\n    const data = msg.value.data;\n    if (!data) {\n        throw new Error(\"Empty data in the ADR-36 msg\");\n    }\n    const rawData = buffer_1.Buffer.from(data, \"base64\");\n    // Validate the data is encoded as base64.\n    if (rawData.toString(\"base64\") !== data) {\n        throw new Error(\"Data is not encoded by base64\");\n    }\n    if (rawData.length === 0) {\n        throw new Error(\"Empty data in the ADR-36 msg\");\n    }\n    return true;\n}\nexports.checkAndValidateADR36AminoSignDoc = checkAndValidateADR36AminoSignDoc;\nfunction makeADR36AminoSignDoc(signer, data) {\n    if (typeof data === \"string\") {\n        data = buffer_1.Buffer.from(data).toString(\"base64\");\n    }\n    else {\n        data = buffer_1.Buffer.from(data).toString(\"base64\");\n    }\n    return {\n        chain_id: \"\",\n        account_number: \"0\",\n        sequence: \"0\",\n        fee: {\n            gas: \"0\",\n            amount: [],\n        },\n        msgs: [\n            {\n                type: \"sign/MsgSignData\",\n                value: {\n                    signer,\n                    data,\n                },\n            },\n        ],\n        memo: \"\",\n    };\n}\nexports.makeADR36AminoSignDoc = makeADR36AminoSignDoc;\nfunction verifyADR36AminoSignDoc(bech32PrefixAccAddr, signDoc, pubKey, signature, algo = \"secp256k1\") {\n    if (!checkAndValidateADR36AminoSignDoc(signDoc, bech32PrefixAccAddr)) {\n        throw new Error(\"Invalid sign doc for ADR-36\");\n    }\n    const cryptoPubKey = new crypto_1.PubKeySecp256k1(pubKey);\n    const expectedSigner = (() => {\n        if (algo === \"ethsecp256k1\") {\n            return new bech32_1.Bech32Address(cryptoPubKey.getEthAddress()).toBech32(bech32PrefixAccAddr);\n        }\n        return new bech32_1.Bech32Address(cryptoPubKey.getCosmosAddress()).toBech32(bech32PrefixAccAddr);\n    })();\n    const signer = signDoc.msgs[0].value.signer;\n    if (expectedSigner !== signer) {\n        throw new Error(\"Unmatched signer\");\n    }\n    const msg = (0, signing_1.serializeSignDoc)(signDoc);\n    return cryptoPubKey.verifyDigest32((() => {\n        if (algo === \"ethsecp256k1\") {\n            return crypto_1.Hash.keccak256(msg);\n        }\n        return crypto_1.Hash.sha256(msg);\n    })(), signature);\n}\nexports.verifyADR36AminoSignDoc = verifyADR36AminoSignDoc;\nfunction verifyADR36Amino(bech32PrefixAccAddr, signer, data, pubKey, signature, algo = \"secp256k1\") {\n    const signDoc = makeADR36AminoSignDoc(signer, data);\n    return verifyADR36AminoSignDoc(bech32PrefixAccAddr, signDoc, pubKey, signature, algo);\n}\nexports.verifyADR36Amino = verifyADR36Amino;\n//# sourceMappingURL=amino.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/adr-36/amino.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/adr-36/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/adr-36/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./amino */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/adr-36/amino.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvYWRyLTM2L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxnRkFBUztBQUM5QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcY29zbW9zXFxidWlsZFxcYWRyLTM2XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FtaW5vXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/adr-36/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/bech32/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/bech32/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bech32Address = void 0;\nconst bech32_1 = __importStar(__webpack_require__(/*! bech32 */ \"(ssr)/./node_modules/bech32/index.js\"));\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nconst address_1 = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib.esm/index.js\");\nclass Bech32Address {\n    static shortenAddress(bech32, maxCharacters) {\n        if (maxCharacters >= bech32.length) {\n            return bech32;\n        }\n        const i = bech32.indexOf(\"1\");\n        const prefix = bech32.slice(0, i);\n        const address = bech32.slice(i + 1);\n        maxCharacters -= prefix.length;\n        maxCharacters -= 3; // For \"...\"\n        maxCharacters -= 1; // For \"1\"\n        if (maxCharacters <= 0) {\n            return \"\";\n        }\n        const mid = Math.floor(address.length / 2);\n        let former = address.slice(0, mid);\n        let latter = address.slice(mid);\n        while (maxCharacters < former.length + latter.length) {\n            if ((former.length + latter.length) % 2 === 1 && former.length > 0) {\n                former = former.slice(0, former.length - 1);\n            }\n            else {\n                latter = latter.slice(1);\n            }\n        }\n        return prefix + \"1\" + former + \"...\" + latter;\n    }\n    static fromBech32(bech32Address, prefix) {\n        const decoded = bech32_1.default.decode(bech32Address);\n        if (prefix && decoded.prefix !== prefix) {\n            throw new Error(\"Unmatched prefix\");\n        }\n        return new Bech32Address(new Uint8Array((0, bech32_1.fromWords)(decoded.words)));\n    }\n    static validate(bech32Address, prefix) {\n        const { prefix: decodedPrefix } = bech32_1.default.decode(bech32Address);\n        if (prefix && prefix !== decodedPrefix) {\n            throw new Error(`Unexpected prefix (expected: ${prefix}, actual: ${decodedPrefix})`);\n        }\n    }\n    static defaultBech32Config(mainPrefix, validatorPrefix = \"val\", consensusPrefix = \"cons\", publicPrefix = \"pub\", operatorPrefix = \"oper\") {\n        return {\n            bech32PrefixAccAddr: mainPrefix,\n            bech32PrefixAccPub: mainPrefix + publicPrefix,\n            bech32PrefixValAddr: mainPrefix + validatorPrefix + operatorPrefix,\n            bech32PrefixValPub: mainPrefix + validatorPrefix + operatorPrefix + publicPrefix,\n            bech32PrefixConsAddr: mainPrefix + validatorPrefix + consensusPrefix,\n            bech32PrefixConsPub: mainPrefix + validatorPrefix + consensusPrefix + publicPrefix,\n        };\n    }\n    constructor(address) {\n        this.address = address;\n    }\n    toBech32(prefix) {\n        const words = bech32_1.default.toWords(this.address);\n        return bech32_1.default.encode(prefix, words);\n    }\n    toHex(mixedCaseChecksum = true) {\n        const hex = buffer_1.Buffer.from(this.address).toString(\"hex\");\n        if (hex.length === 0) {\n            throw new Error(\"Empty address\");\n        }\n        if (mixedCaseChecksum) {\n            return (0, address_1.getAddress)(\"0x\" + hex);\n        }\n        else {\n            return \"0x\" + hex;\n        }\n    }\n}\nexports.Bech32Address = Bech32Address;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvYmVjaDMyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsOEJBQThCLG1CQUFPLENBQUMsb0RBQVE7QUFDOUMsaUJBQWlCLG1CQUFPLENBQUMscURBQVM7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsNEZBQXdCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdCQUF3QjtBQUN4QztBQUNBLDREQUE0RCxPQUFPLFlBQVksY0FBYztBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb3Ntb3NcXGJ1aWxkXFxiZWNoMzJcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJlY2gzMkFkZHJlc3MgPSB2b2lkIDA7XG5jb25zdCBiZWNoMzJfMSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiYmVjaDMyXCIpKTtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlci9cIik7XG5jb25zdCBhZGRyZXNzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvYWRkcmVzc1wiKTtcbmNsYXNzIEJlY2gzMkFkZHJlc3Mge1xuICAgIHN0YXRpYyBzaG9ydGVuQWRkcmVzcyhiZWNoMzIsIG1heENoYXJhY3RlcnMpIHtcbiAgICAgICAgaWYgKG1heENoYXJhY3RlcnMgPj0gYmVjaDMyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGJlY2gzMjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpID0gYmVjaDMyLmluZGV4T2YoXCIxXCIpO1xuICAgICAgICBjb25zdCBwcmVmaXggPSBiZWNoMzIuc2xpY2UoMCwgaSk7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSBiZWNoMzIuc2xpY2UoaSArIDEpO1xuICAgICAgICBtYXhDaGFyYWN0ZXJzIC09IHByZWZpeC5sZW5ndGg7XG4gICAgICAgIG1heENoYXJhY3RlcnMgLT0gMzsgLy8gRm9yIFwiLi4uXCJcbiAgICAgICAgbWF4Q2hhcmFjdGVycyAtPSAxOyAvLyBGb3IgXCIxXCJcbiAgICAgICAgaWYgKG1heENoYXJhY3RlcnMgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWlkID0gTWF0aC5mbG9vcihhZGRyZXNzLmxlbmd0aCAvIDIpO1xuICAgICAgICBsZXQgZm9ybWVyID0gYWRkcmVzcy5zbGljZSgwLCBtaWQpO1xuICAgICAgICBsZXQgbGF0dGVyID0gYWRkcmVzcy5zbGljZShtaWQpO1xuICAgICAgICB3aGlsZSAobWF4Q2hhcmFjdGVycyA8IGZvcm1lci5sZW5ndGggKyBsYXR0ZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoKGZvcm1lci5sZW5ndGggKyBsYXR0ZXIubGVuZ3RoKSAlIDIgPT09IDEgJiYgZm9ybWVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3JtZXIgPSBmb3JtZXIuc2xpY2UoMCwgZm9ybWVyLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGF0dGVyID0gbGF0dGVyLnNsaWNlKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmVmaXggKyBcIjFcIiArIGZvcm1lciArIFwiLi4uXCIgKyBsYXR0ZXI7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmVjaDMyKGJlY2gzMkFkZHJlc3MsIHByZWZpeCkge1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gYmVjaDMyXzEuZGVmYXVsdC5kZWNvZGUoYmVjaDMyQWRkcmVzcyk7XG4gICAgICAgIGlmIChwcmVmaXggJiYgZGVjb2RlZC5wcmVmaXggIT09IHByZWZpeCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5tYXRjaGVkIHByZWZpeFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEJlY2gzMkFkZHJlc3MobmV3IFVpbnQ4QXJyYXkoKDAsIGJlY2gzMl8xLmZyb21Xb3JkcykoZGVjb2RlZC53b3JkcykpKTtcbiAgICB9XG4gICAgc3RhdGljIHZhbGlkYXRlKGJlY2gzMkFkZHJlc3MsIHByZWZpeCkge1xuICAgICAgICBjb25zdCB7IHByZWZpeDogZGVjb2RlZFByZWZpeCB9ID0gYmVjaDMyXzEuZGVmYXVsdC5kZWNvZGUoYmVjaDMyQWRkcmVzcyk7XG4gICAgICAgIGlmIChwcmVmaXggJiYgcHJlZml4ICE9PSBkZWNvZGVkUHJlZml4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgcHJlZml4IChleHBlY3RlZDogJHtwcmVmaXh9LCBhY3R1YWw6ICR7ZGVjb2RlZFByZWZpeH0pYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGRlZmF1bHRCZWNoMzJDb25maWcobWFpblByZWZpeCwgdmFsaWRhdG9yUHJlZml4ID0gXCJ2YWxcIiwgY29uc2Vuc3VzUHJlZml4ID0gXCJjb25zXCIsIHB1YmxpY1ByZWZpeCA9IFwicHViXCIsIG9wZXJhdG9yUHJlZml4ID0gXCJvcGVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJlY2gzMlByZWZpeEFjY0FkZHI6IG1haW5QcmVmaXgsXG4gICAgICAgICAgICBiZWNoMzJQcmVmaXhBY2NQdWI6IG1haW5QcmVmaXggKyBwdWJsaWNQcmVmaXgsXG4gICAgICAgICAgICBiZWNoMzJQcmVmaXhWYWxBZGRyOiBtYWluUHJlZml4ICsgdmFsaWRhdG9yUHJlZml4ICsgb3BlcmF0b3JQcmVmaXgsXG4gICAgICAgICAgICBiZWNoMzJQcmVmaXhWYWxQdWI6IG1haW5QcmVmaXggKyB2YWxpZGF0b3JQcmVmaXggKyBvcGVyYXRvclByZWZpeCArIHB1YmxpY1ByZWZpeCxcbiAgICAgICAgICAgIGJlY2gzMlByZWZpeENvbnNBZGRyOiBtYWluUHJlZml4ICsgdmFsaWRhdG9yUHJlZml4ICsgY29uc2Vuc3VzUHJlZml4LFxuICAgICAgICAgICAgYmVjaDMyUHJlZml4Q29uc1B1YjogbWFpblByZWZpeCArIHZhbGlkYXRvclByZWZpeCArIGNvbnNlbnN1c1ByZWZpeCArIHB1YmxpY1ByZWZpeCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoYWRkcmVzcykge1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIH1cbiAgICB0b0JlY2gzMihwcmVmaXgpIHtcbiAgICAgICAgY29uc3Qgd29yZHMgPSBiZWNoMzJfMS5kZWZhdWx0LnRvV29yZHModGhpcy5hZGRyZXNzKTtcbiAgICAgICAgcmV0dXJuIGJlY2gzMl8xLmRlZmF1bHQuZW5jb2RlKHByZWZpeCwgd29yZHMpO1xuICAgIH1cbiAgICB0b0hleChtaXhlZENhc2VDaGVja3N1bSA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgaGV4ID0gYnVmZmVyXzEuQnVmZmVyLmZyb20odGhpcy5hZGRyZXNzKS50b1N0cmluZyhcImhleFwiKTtcbiAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtcHR5IGFkZHJlc3NcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1peGVkQ2FzZUNoZWNrc3VtKSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGFkZHJlc3NfMS5nZXRBZGRyZXNzKShcIjB4XCIgKyBoZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiMHhcIiArIGhleDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQmVjaDMyQWRkcmVzcyA9IEJlY2gzMkFkZHJlc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/bech32/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/chain-id/cosmos.js":
/*!********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/chain-id/cosmos.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChainIdHelper = void 0;\nclass ChainIdHelper {\n    static parse(chainId) {\n        // In the case of injective dev/testnet, there is a difficult problem to deal with keplr's chain identifier system...\n        // Fundamentally, keplr's chain identifier system started when the app was created, so too mnay logic depends on chain identifier.\n        // Temporarily deal with it in the way below.\n        // There is a possibility of some kind of problem...\n        // But anyway, it's not a big problem because it's dev/testnet...\n        if (chainId === \"injective-777\" || chainId === \"injective-888\") {\n            return {\n                identifier: chainId,\n                version: 0,\n            };\n        }\n        const split = chainId\n            .split(ChainIdHelper.VersionFormatRegExp)\n            .filter(Boolean);\n        if (split.length !== 2) {\n            return {\n                identifier: chainId,\n                version: 0,\n            };\n        }\n        else {\n            return { identifier: split[0], version: parseInt(split[1]) };\n        }\n    }\n    static hasChainVersion(chainId) {\n        const version = ChainIdHelper.parse(chainId);\n        return version.identifier !== chainId;\n    }\n}\nexports.ChainIdHelper = ChainIdHelper;\n// VersionFormatRegExp checks if a chainID is in the format required for parsing versions\n// The chainID should be in the form: `{identifier}-{version}`\nChainIdHelper.VersionFormatRegExp = /(.+)-([\\d]+)/;\n//# sourceMappingURL=cosmos.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvY2hhaW4taWQvY29zbW9zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0Esd0NBQXdDLFdBQVcsRUFBRSxRQUFRO0FBQzdEO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvc21vc1xcYnVpbGRcXGNoYWluLWlkXFxjb3Ntb3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoYWluSWRIZWxwZXIgPSB2b2lkIDA7XG5jbGFzcyBDaGFpbklkSGVscGVyIHtcbiAgICBzdGF0aWMgcGFyc2UoY2hhaW5JZCkge1xuICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiBpbmplY3RpdmUgZGV2L3Rlc3RuZXQsIHRoZXJlIGlzIGEgZGlmZmljdWx0IHByb2JsZW0gdG8gZGVhbCB3aXRoIGtlcGxyJ3MgY2hhaW4gaWRlbnRpZmllciBzeXN0ZW0uLi5cbiAgICAgICAgLy8gRnVuZGFtZW50YWxseSwga2VwbHIncyBjaGFpbiBpZGVudGlmaWVyIHN5c3RlbSBzdGFydGVkIHdoZW4gdGhlIGFwcCB3YXMgY3JlYXRlZCwgc28gdG9vIG1uYXkgbG9naWMgZGVwZW5kcyBvbiBjaGFpbiBpZGVudGlmaWVyLlxuICAgICAgICAvLyBUZW1wb3JhcmlseSBkZWFsIHdpdGggaXQgaW4gdGhlIHdheSBiZWxvdy5cbiAgICAgICAgLy8gVGhlcmUgaXMgYSBwb3NzaWJpbGl0eSBvZiBzb21lIGtpbmQgb2YgcHJvYmxlbS4uLlxuICAgICAgICAvLyBCdXQgYW55d2F5LCBpdCdzIG5vdCBhIGJpZyBwcm9ibGVtIGJlY2F1c2UgaXQncyBkZXYvdGVzdG5ldC4uLlxuICAgICAgICBpZiAoY2hhaW5JZCA9PT0gXCJpbmplY3RpdmUtNzc3XCIgfHwgY2hhaW5JZCA9PT0gXCJpbmplY3RpdmUtODg4XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWRlbnRpZmllcjogY2hhaW5JZCxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzcGxpdCA9IGNoYWluSWRcbiAgICAgICAgICAgIC5zcGxpdChDaGFpbklkSGVscGVyLlZlcnNpb25Gb3JtYXRSZWdFeHApXG4gICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICBpZiAoc3BsaXQubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkZW50aWZpZXI6IGNoYWluSWQsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyBpZGVudGlmaWVyOiBzcGxpdFswXSwgdmVyc2lvbjogcGFyc2VJbnQoc3BsaXRbMV0pIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGhhc0NoYWluVmVyc2lvbihjaGFpbklkKSB7XG4gICAgICAgIGNvbnN0IHZlcnNpb24gPSBDaGFpbklkSGVscGVyLnBhcnNlKGNoYWluSWQpO1xuICAgICAgICByZXR1cm4gdmVyc2lvbi5pZGVudGlmaWVyICE9PSBjaGFpbklkO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2hhaW5JZEhlbHBlciA9IENoYWluSWRIZWxwZXI7XG4vLyBWZXJzaW9uRm9ybWF0UmVnRXhwIGNoZWNrcyBpZiBhIGNoYWluSUQgaXMgaW4gdGhlIGZvcm1hdCByZXF1aXJlZCBmb3IgcGFyc2luZyB2ZXJzaW9uc1xuLy8gVGhlIGNoYWluSUQgc2hvdWxkIGJlIGluIHRoZSBmb3JtOiBge2lkZW50aWZpZXJ9LXt2ZXJzaW9ufWBcbkNoYWluSWRIZWxwZXIuVmVyc2lvbkZvcm1hdFJlZ0V4cCA9IC8oLispLShbXFxkXSspLztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvc21vcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/chain-id/cosmos.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/chain-id/ethermint.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/chain-id/ethermint.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EthermintChainIdHelper = void 0;\nconst cosmos_1 = __webpack_require__(/*! ./cosmos */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/chain-id/cosmos.js\");\nclass EthermintChainIdHelper {\n    static parse(chainId) {\n        const cosmosChainId = cosmos_1.ChainIdHelper.parse(chainId);\n        if (chainId.startsWith(\"injective\")) {\n            const injectiveTestnetChainIds = [\"injective-777\", \"injective-888\"];\n            if (injectiveTestnetChainIds.includes(chainId)) {\n                return Object.assign({ ethChainId: 5 }, cosmosChainId);\n            }\n            return Object.assign({ ethChainId: 1 }, cosmosChainId);\n        }\n        const matches = chainId.match(\"^([a-z]{1,})_{1}([1-9][0-9]*)-{1}([1-9][0-9]*)$\");\n        if (!matches ||\n            matches.length !== 4 ||\n            matches[1] === \"\" ||\n            Number.isNaN(parseFloat(matches[2])) ||\n            !Number.isInteger(parseFloat(matches[2]))) {\n            throw new Error(`Invalid chainId for ethermint: ${chainId}`);\n        }\n        return Object.assign(Object.assign({}, cosmosChainId), { ethChainId: parseFloat(matches[2]) });\n    }\n}\nexports.EthermintChainIdHelper = EthermintChainIdHelper;\n//# sourceMappingURL=ethermint.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvY2hhaW4taWQvZXRoZXJtaW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixpQkFBaUIsbUJBQU8sQ0FBQyxvRkFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsZUFBZTtBQUN0RDtBQUNBLG1DQUFtQyxlQUFlO0FBQ2xEO0FBQ0EsK0NBQStDLEdBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELFFBQVE7QUFDdEU7QUFDQSw2Q0FBNkMsb0JBQW9CLG9DQUFvQztBQUNyRztBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb3Ntb3NcXGJ1aWxkXFxjaGFpbi1pZFxcZXRoZXJtaW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FdGhlcm1pbnRDaGFpbklkSGVscGVyID0gdm9pZCAwO1xuY29uc3QgY29zbW9zXzEgPSByZXF1aXJlKFwiLi9jb3Ntb3NcIik7XG5jbGFzcyBFdGhlcm1pbnRDaGFpbklkSGVscGVyIHtcbiAgICBzdGF0aWMgcGFyc2UoY2hhaW5JZCkge1xuICAgICAgICBjb25zdCBjb3Ntb3NDaGFpbklkID0gY29zbW9zXzEuQ2hhaW5JZEhlbHBlci5wYXJzZShjaGFpbklkKTtcbiAgICAgICAgaWYgKGNoYWluSWQuc3RhcnRzV2l0aChcImluamVjdGl2ZVwiKSkge1xuICAgICAgICAgICAgY29uc3QgaW5qZWN0aXZlVGVzdG5ldENoYWluSWRzID0gW1wiaW5qZWN0aXZlLTc3N1wiLCBcImluamVjdGl2ZS04ODhcIl07XG4gICAgICAgICAgICBpZiAoaW5qZWN0aXZlVGVzdG5ldENoYWluSWRzLmluY2x1ZGVzKGNoYWluSWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBldGhDaGFpbklkOiA1IH0sIGNvc21vc0NoYWluSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBldGhDaGFpbklkOiAxIH0sIGNvc21vc0NoYWluSWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBjaGFpbklkLm1hdGNoKFwiXihbYS16XXsxLH0pX3sxfShbMS05XVswLTldKiktezF9KFsxLTldWzAtOV0qKSRcIik7XG4gICAgICAgIGlmICghbWF0Y2hlcyB8fFxuICAgICAgICAgICAgbWF0Y2hlcy5sZW5ndGggIT09IDQgfHxcbiAgICAgICAgICAgIG1hdGNoZXNbMV0gPT09IFwiXCIgfHxcbiAgICAgICAgICAgIE51bWJlci5pc05hTihwYXJzZUZsb2F0KG1hdGNoZXNbMl0pKSB8fFxuICAgICAgICAgICAgIU51bWJlci5pc0ludGVnZXIocGFyc2VGbG9hdChtYXRjaGVzWzJdKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjaGFpbklkIGZvciBldGhlcm1pbnQ6ICR7Y2hhaW5JZH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb3Ntb3NDaGFpbklkKSwgeyBldGhDaGFpbklkOiBwYXJzZUZsb2F0KG1hdGNoZXNbMl0pIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuRXRoZXJtaW50Q2hhaW5JZEhlbHBlciA9IEV0aGVybWludENoYWluSWRIZWxwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldGhlcm1pbnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/chain-id/ethermint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/chain-id/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/chain-id/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./cosmos */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/chain-id/cosmos.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ethermint */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/chain-id/ethermint.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvY2hhaW4taWQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLG9GQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQywwRkFBYTtBQUNsQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcY29zbW9zXFxidWlsZFxcY2hhaW4taWRcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29zbW9zXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ldGhlcm1pbnRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/chain-id/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./account */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/account/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bech32 */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/bech32/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./chain-id */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/chain-id/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./tx-tracer */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/tx-tracer/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./stargate */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./adr-36 */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/adr-36/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./signing */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/signing/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLG1GQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyxpRkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMscUZBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLHVGQUFhO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQyxxRkFBWTtBQUNqQyxhQUFhLG1CQUFPLENBQUMsaUZBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLG1GQUFXO0FBQ2hDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb3Ntb3NcXGJ1aWxkXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FjY291bnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2JlY2gzMlwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2hhaW4taWRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R4LXRyYWNlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3RhcmdhdGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Fkci0zNlwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2lnbmluZ1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/signing/encode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/signing/encode.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serializeSignDoc = exports.encodeSecp256k1Signature = exports.encodeSecp256k1Pubkey = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nconst common_1 = __webpack_require__(/*! @keplr-wallet/common */ \"(ssr)/./node_modules/@keplr-wallet/common/build/index.js\");\nfunction encodeSecp256k1Pubkey(pubkey) {\n    if (pubkey.length !== 33 || (pubkey[0] !== 0x02 && pubkey[0] !== 0x03)) {\n        throw new Error(\"Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03\");\n    }\n    return {\n        type: \"tendermint/PubKeySecp256k1\",\n        value: buffer_1.Buffer.from(pubkey).toString(\"base64\"),\n    };\n}\nexports.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey;\nfunction encodeSecp256k1Signature(pubkey, signature) {\n    if (signature.length !== 64) {\n        throw new Error(\"Signature must be 64 bytes long. Cosmos SDK uses a 2x32 byte fixed length encoding for the secp256k1 signature integers r and s.\");\n    }\n    return {\n        pub_key: encodeSecp256k1Pubkey(pubkey),\n        signature: buffer_1.Buffer.from(signature).toString(\"base64\"),\n    };\n}\nexports.encodeSecp256k1Signature = encodeSecp256k1Signature;\nfunction serializeSignDoc(signDoc) {\n    return buffer_1.Buffer.from((0, common_1.escapeHTML)((0, common_1.sortedJsonByKeyStringify)(signDoc)));\n}\nexports.serializeSignDoc = serializeSignDoc;\n//# sourceMappingURL=encode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvc2lnbmluZy9lbmNvZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsZ0NBQWdDLEdBQUcsNkJBQTZCO0FBQzNGLGlCQUFpQixtQkFBTyxDQUFDLHFEQUFTO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLHNGQUFzQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcY29zbW9zXFxidWlsZFxcc2lnbmluZ1xcZW5jb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXJpYWxpemVTaWduRG9jID0gZXhwb3J0cy5lbmNvZGVTZWNwMjU2azFTaWduYXR1cmUgPSBleHBvcnRzLmVuY29kZVNlY3AyNTZrMVB1YmtleSA9IHZvaWQgMDtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlci9cIik7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCJAa2VwbHItd2FsbGV0L2NvbW1vblwiKTtcbmZ1bmN0aW9uIGVuY29kZVNlY3AyNTZrMVB1YmtleShwdWJrZXkpIHtcbiAgICBpZiAocHVia2V5Lmxlbmd0aCAhPT0gMzMgfHwgKHB1YmtleVswXSAhPT0gMHgwMiAmJiBwdWJrZXlbMF0gIT09IDB4MDMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlB1YmxpYyBrZXkgbXVzdCBiZSBjb21wcmVzc2VkIHNlY3AyNTZrMSwgaS5lLiAzMyBieXRlcyBzdGFydGluZyB3aXRoIDB4MDIgb3IgMHgwM1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJ0ZW5kZXJtaW50L1B1YktleVNlY3AyNTZrMVwiLFxuICAgICAgICB2YWx1ZTogYnVmZmVyXzEuQnVmZmVyLmZyb20ocHVia2V5KS50b1N0cmluZyhcImJhc2U2NFwiKSxcbiAgICB9O1xufVxuZXhwb3J0cy5lbmNvZGVTZWNwMjU2azFQdWJrZXkgPSBlbmNvZGVTZWNwMjU2azFQdWJrZXk7XG5mdW5jdGlvbiBlbmNvZGVTZWNwMjU2azFTaWduYXR1cmUocHVia2V5LCBzaWduYXR1cmUpIHtcbiAgICBpZiAoc2lnbmF0dXJlLmxlbmd0aCAhPT0gNjQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2lnbmF0dXJlIG11c3QgYmUgNjQgYnl0ZXMgbG9uZy4gQ29zbW9zIFNESyB1c2VzIGEgMngzMiBieXRlIGZpeGVkIGxlbmd0aCBlbmNvZGluZyBmb3IgdGhlIHNlY3AyNTZrMSBzaWduYXR1cmUgaW50ZWdlcnMgciBhbmQgcy5cIik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHB1Yl9rZXk6IGVuY29kZVNlY3AyNTZrMVB1YmtleShwdWJrZXkpLFxuICAgICAgICBzaWduYXR1cmU6IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKHNpZ25hdHVyZSkudG9TdHJpbmcoXCJiYXNlNjRcIiksXG4gICAgfTtcbn1cbmV4cG9ydHMuZW5jb2RlU2VjcDI1NmsxU2lnbmF0dXJlID0gZW5jb2RlU2VjcDI1NmsxU2lnbmF0dXJlO1xuZnVuY3Rpb24gc2VyaWFsaXplU2lnbkRvYyhzaWduRG9jKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKCgwLCBjb21tb25fMS5lc2NhcGVIVE1MKSgoMCwgY29tbW9uXzEuc29ydGVkSnNvbkJ5S2V5U3RyaW5naWZ5KShzaWduRG9jKSkpO1xufVxuZXhwb3J0cy5zZXJpYWxpemVTaWduRG9jID0gc2VyaWFsaXplU2lnbkRvYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuY29kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/signing/encode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/signing/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/signing/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./encode */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/signing/encode.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvc2lnbmluZy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsbUZBQVU7QUFDL0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvc21vc1xcYnVpbGRcXHNpZ25pbmdcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW5jb2RlXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/signing/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/codec/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/stargate/codec/index.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultProtoCodec = exports.ProtoCodec = void 0;\nconst msgs_1 = __webpack_require__(/*! @keplr-wallet/proto-types/agoric/swingset/msgs */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/agoric/swingset/msgs.js\");\nconst tx_1 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmos/bank/v1beta1/tx */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/tx.js\");\nconst tx_2 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmos/staking/v1beta1/tx */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/tx.js\");\nconst tx_3 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmos/authz/v1beta1/tx */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/authz/v1beta1/tx.js\");\nconst tx_4 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmos/gov/v1beta1/tx */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/gov/v1beta1/tx.js\");\nconst tx_5 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmos/distribution/v1beta1/tx */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/distribution/v1beta1/tx.js\");\nconst tx_6 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmwasm/wasm/v1/tx */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmwasm/wasm/v1/tx.js\");\nconst tx_7 = __webpack_require__(/*! @keplr-wallet/proto-types/ibc/applications/transfer/v1/tx */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/ibc/applications/transfer/v1/tx.js\");\nconst unknown_1 = __webpack_require__(/*! ./unknown */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/codec/unknown.js\");\nconst authz_1 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmos/authz/v1beta1/authz */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/authz/v1beta1/authz.js\");\nconst authz_2 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmos/staking/v1beta1/authz */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/authz.js\");\nconst authz_3 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmos/bank/v1beta1/authz */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/authz.js\");\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\n__exportStar(__webpack_require__(/*! ./unknown */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/codec/unknown.js\"), exports);\nclass ProtoCodec {\n    constructor() {\n        this.typeUrlMap = new Map();\n    }\n    unpackAnyFactory(typeUrl) {\n        if (!this.typeUrlMap.has(typeUrl)) {\n            return undefined;\n        }\n        return this.typeUrlMap.get(typeUrl);\n    }\n    /**\n     * Unpack the any to the registered message.\n     * NOTE: If there is no matched message, it will not throw an error but return the `UnknownMessage` class.\n     * @param any\n     */\n    unpackAny(any) {\n        const factory = this.unpackAnyFactory(any.typeUrl);\n        if (!factory) {\n            return new unknown_1.UnknownMessage(any.typeUrl, any.value);\n        }\n        const unpacked = factory.decode(any.value);\n        return Object.assign(Object.assign({}, any), { unpacked });\n    }\n    unpackedAnyToJSONRecursive(unpacked) {\n        if (unpacked instanceof unknown_1.UnknownMessage) {\n            return unpacked.toJSON();\n        }\n        const factory = this.unpackAnyFactory(unpacked.typeUrl);\n        if (factory && \"unpacked\" in unpacked && unpacked.unpacked) {\n            const isJSONEncodedAny = (any) => {\n                const r = typeof any === \"object\" &&\n                    !(any instanceof unknown_1.UnknownMessage) &&\n                    \"typeUrl\" in any &&\n                    any.typeUrl &&\n                    typeof any.typeUrl === \"string\" &&\n                    \"value\" in any &&\n                    any.value &&\n                    typeof any.value === \"string\";\n                if (r) {\n                    try {\n                        buffer_1.Buffer.from(any.value, \"base64\");\n                    }\n                    catch (_a) {\n                        return false;\n                    }\n                }\n                return r;\n            };\n            const unpackJSONEncodedAnyInner = (jsonEncodedAny) => {\n                const factory = this.unpackAnyFactory(jsonEncodedAny.typeUrl);\n                const bz = buffer_1.Buffer.from(jsonEncodedAny.value, \"base64\");\n                if (!factory) {\n                    return new unknown_1.UnknownMessage(jsonEncodedAny.typeUrl, bz).toJSON();\n                }\n                const unpacked = factory.decode(bz);\n                return {\n                    typeUrl: jsonEncodedAny.typeUrl,\n                    value: factory.toJSON(unpacked),\n                };\n            };\n            const unpackedJSONEncodedAnyRecursive = (obj) => {\n                if (Array.isArray(obj)) {\n                    for (let i = 0; i < obj.length; i++) {\n                        const value = obj[i];\n                        if (isJSONEncodedAny(value)) {\n                            obj[i] = unpackJSONEncodedAnyInner(value);\n                        }\n                        else if (typeof value === \"object\") {\n                            obj[i] = unpackedJSONEncodedAnyRecursive(value);\n                        }\n                    }\n                }\n                else {\n                    for (const key in obj) {\n                        const value = obj[key];\n                        if (isJSONEncodedAny(value)) {\n                            obj[key] = unpackJSONEncodedAnyInner(value);\n                        }\n                        else if (typeof value === \"object\") {\n                            obj[key] = unpackedJSONEncodedAnyRecursive(value);\n                        }\n                    }\n                }\n                return obj;\n            };\n            // This is mutated by logic.\n            let mutObj = factory.toJSON(unpacked.unpacked);\n            if (mutObj && typeof mutObj === \"object\") {\n                mutObj = unpackedJSONEncodedAnyRecursive(mutObj);\n                return {\n                    typeUrl: unpacked.typeUrl,\n                    value: mutObj,\n                };\n            }\n        }\n        return new unknown_1.UnknownMessage(unpacked.typeUrl, unpacked.value).toJSON();\n    }\n    registerAny(typeUrl, message) {\n        this.typeUrlMap.set(typeUrl, message);\n    }\n}\nexports.ProtoCodec = ProtoCodec;\nexports.defaultProtoCodec = new ProtoCodec();\nexports.defaultProtoCodec.registerAny(\"/agoric.swingset.MsgWalletSpendAction\", msgs_1.MsgWalletSpendAction);\nexports.defaultProtoCodec.registerAny(\"/agoric.swingset.MsgProvision\", msgs_1.MsgProvision);\nexports.defaultProtoCodec.registerAny(\"/cosmos.bank.v1beta1.MsgSend\", tx_1.MsgSend);\nexports.defaultProtoCodec.registerAny(\"/cosmos.bank.v1beta1.MsgMultiSend\", tx_1.MsgMultiSend);\nexports.defaultProtoCodec.registerAny(\"/cosmos.staking.v1beta1.MsgDelegate\", tx_2.MsgDelegate);\nexports.defaultProtoCodec.registerAny(\"/cosmos.staking.v1beta1.MsgUndelegate\", tx_2.MsgUndelegate);\nexports.defaultProtoCodec.registerAny(\"/cosmos.staking.v1beta1.MsgBeginRedelegate\", tx_2.MsgBeginRedelegate);\nexports.defaultProtoCodec.registerAny(\"/cosmwasm.wasm.v1.MsgExecuteContract\", tx_6.MsgExecuteContract);\nexports.defaultProtoCodec.registerAny(\"/cosmwasm.wasm.v1.MsgInstantiateContract\", tx_6.MsgInstantiateContract);\nexports.defaultProtoCodec.registerAny(\"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\", tx_5.MsgWithdrawDelegatorReward);\nexports.defaultProtoCodec.registerAny(\"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\", tx_5.MsgSetWithdrawAddress);\nexports.defaultProtoCodec.registerAny(\"/ibc.applications.transfer.v1.MsgTransfer\", tx_7.MsgTransfer);\nexports.defaultProtoCodec.registerAny(\"/cosmos.gov.v1beta1.MsgVote\", tx_4.MsgVote);\nexports.defaultProtoCodec.registerAny(\"/cosmos.authz.v1beta1.MsgGrant\", tx_3.MsgGrant);\n// ----- Authz grants -----\nexports.defaultProtoCodec.registerAny(\"/cosmos.authz.v1beta1.GenericAuthorization\", authz_1.GenericAuthorization);\nexports.defaultProtoCodec.registerAny(\"/cosmos.staking.v1beta1.StakeAuthorization\", authz_2.StakeAuthorization);\nexports.defaultProtoCodec.registerAny(\"/cosmos.bank.v1beta1.SendAuthorization\", authz_3.SendAuthorization);\n// ----- Authz grants -----\nexports.defaultProtoCodec.registerAny(\"/cosmos.authz.v1beta1.MsgRevoke\", tx_3.MsgRevoke);\nexports.defaultProtoCodec.registerAny(\"/cosmos.authz.v1beta1.MsgExec\", tx_3.MsgExec);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/codec/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/codec/unknown.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/stargate/codec/unknown.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnknownMessage = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nclass UnknownMessage {\n    constructor(\n    /** Any type_url. */\n    _typeUrl, \n    /** Any value. */\n    _value) {\n        this._typeUrl = _typeUrl;\n        this._value = _value;\n    }\n    get typeUrl() {\n        return this._typeUrl;\n    }\n    get value() {\n        return this._value;\n    }\n    toJSON() {\n        return {\n            typeUrl: this._typeUrl,\n            value: buffer_1.Buffer.from(this._value).toString(\"base64\"),\n        };\n    }\n}\nexports.UnknownMessage = UnknownMessage;\n//# sourceMappingURL=unknown.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvc3RhcmdhdGUvY29kZWMvdW5rbm93bi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsaUJBQWlCLG1CQUFPLENBQUMscURBQVM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvc21vc1xcYnVpbGRcXHN0YXJnYXRlXFxjb2RlY1xcdW5rbm93bi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVW5rbm93bk1lc3NhZ2UgPSB2b2lkIDA7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXIvXCIpO1xuY2xhc3MgVW5rbm93bk1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBBbnkgdHlwZV91cmwuICovXG4gICAgX3R5cGVVcmwsIFxuICAgIC8qKiBBbnkgdmFsdWUuICovXG4gICAgX3ZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3R5cGVVcmwgPSBfdHlwZVVybDtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBfdmFsdWU7XG4gICAgfVxuICAgIGdldCB0eXBlVXJsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZVVybDtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGVVcmw6IHRoaXMuX3R5cGVVcmwsXG4gICAgICAgICAgICB2YWx1ZTogYnVmZmVyXzEuQnVmZmVyLmZyb20odGhpcy5fdmFsdWUpLnRvU3RyaW5nKFwiYmFzZTY0XCIpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuVW5rbm93bk1lc3NhZ2UgPSBVbmtub3duTWVzc2FnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVua25vd24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/codec/unknown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/decoder/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/stargate/decoder/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProtoSignDocDecoder = void 0;\nconst tx_1 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmos/tx/v1beta1/tx */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx.js\");\nconst codec_1 = __webpack_require__(/*! ../codec */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/codec/index.js\");\nclass ProtoSignDocDecoder {\n    static decode(bytes) {\n        return new ProtoSignDocDecoder(tx_1.SignDoc.decode(bytes));\n    }\n    constructor(signDoc, protoCodec = codec_1.defaultProtoCodec) {\n        this.signDoc = signDoc;\n        this.protoCodec = protoCodec;\n    }\n    get txBody() {\n        if (!this._txBody) {\n            this._txBody = tx_1.TxBody.decode(this.signDoc.bodyBytes);\n        }\n        return this._txBody;\n    }\n    get txMsgs() {\n        const msgs = [];\n        for (const msg of this.txBody.messages) {\n            msgs.push(this.protoCodec.unpackAny(msg));\n        }\n        return msgs;\n    }\n    get authInfo() {\n        if (!this._authInfo) {\n            this._authInfo = tx_1.AuthInfo.decode(this.signDoc.authInfoBytes);\n        }\n        return this._authInfo;\n    }\n    get chainId() {\n        return this.signDoc.chainId;\n    }\n    get accountNumber() {\n        return this.signDoc.accountNumber.toString();\n    }\n    toBytes() {\n        return tx_1.SignDoc.encode(this.signDoc).finish();\n    }\n    toJSON() {\n        return {\n            txBody: Object.assign(Object.assign({}, tx_1.TxBody.toJSON(this.txBody)), {\n                messages: this.txMsgs.map((msg) => {\n                    return this.protoCodec.unpackedAnyToJSONRecursive(msg);\n                }),\n            }),\n            authInfo: tx_1.AuthInfo.toJSON(this.authInfo),\n            chainId: this.chainId,\n            accountNumber: this.accountNumber,\n        };\n    }\n}\nexports.ProtoSignDocDecoder = ProtoSignDocDecoder;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvc3RhcmdhdGUvZGVjb2Rlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsYUFBYSxtQkFBTyxDQUFDLDhIQUFnRDtBQUNyRSxnQkFBZ0IsbUJBQU8sQ0FBQyx5RkFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcY29zbW9zXFxidWlsZFxcc3RhcmdhdGVcXGRlY29kZXJcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm90b1NpZ25Eb2NEZWNvZGVyID0gdm9pZCAwO1xuY29uc3QgdHhfMSA9IHJlcXVpcmUoXCJAa2VwbHItd2FsbGV0L3Byb3RvLXR5cGVzL2Nvc21vcy90eC92MWJldGExL3R4XCIpO1xuY29uc3QgY29kZWNfMSA9IHJlcXVpcmUoXCIuLi9jb2RlY1wiKTtcbmNsYXNzIFByb3RvU2lnbkRvY0RlY29kZXIge1xuICAgIHN0YXRpYyBkZWNvZGUoYnl0ZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm90b1NpZ25Eb2NEZWNvZGVyKHR4XzEuU2lnbkRvYy5kZWNvZGUoYnl0ZXMpKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2lnbkRvYywgcHJvdG9Db2RlYyA9IGNvZGVjXzEuZGVmYXVsdFByb3RvQ29kZWMpIHtcbiAgICAgICAgdGhpcy5zaWduRG9jID0gc2lnbkRvYztcbiAgICAgICAgdGhpcy5wcm90b0NvZGVjID0gcHJvdG9Db2RlYztcbiAgICB9XG4gICAgZ2V0IHR4Qm9keSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90eEJvZHkpIHtcbiAgICAgICAgICAgIHRoaXMuX3R4Qm9keSA9IHR4XzEuVHhCb2R5LmRlY29kZSh0aGlzLnNpZ25Eb2MuYm9keUJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdHhCb2R5O1xuICAgIH1cbiAgICBnZXQgdHhNc2dzKCkge1xuICAgICAgICBjb25zdCBtc2dzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgbXNnIG9mIHRoaXMudHhCb2R5Lm1lc3NhZ2VzKSB7XG4gICAgICAgICAgICBtc2dzLnB1c2godGhpcy5wcm90b0NvZGVjLnVucGFja0FueShtc2cpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXNncztcbiAgICB9XG4gICAgZ2V0IGF1dGhJbmZvKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2F1dGhJbmZvKSB7XG4gICAgICAgICAgICB0aGlzLl9hdXRoSW5mbyA9IHR4XzEuQXV0aEluZm8uZGVjb2RlKHRoaXMuc2lnbkRvYy5hdXRoSW5mb0J5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYXV0aEluZm87XG4gICAgfVxuICAgIGdldCBjaGFpbklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaWduRG9jLmNoYWluSWQ7XG4gICAgfVxuICAgIGdldCBhY2NvdW50TnVtYmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaWduRG9jLmFjY291bnROdW1iZXIudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgdG9CeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHR4XzEuU2lnbkRvYy5lbmNvZGUodGhpcy5zaWduRG9jKS5maW5pc2goKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHhCb2R5OiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHR4XzEuVHhCb2R5LnRvSlNPTih0aGlzLnR4Qm9keSkpLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IHRoaXMudHhNc2dzLm1hcCgobXNnKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3RvQ29kZWMudW5wYWNrZWRBbnlUb0pTT05SZWN1cnNpdmUobXNnKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYXV0aEluZm86IHR4XzEuQXV0aEluZm8udG9KU09OKHRoaXMuYXV0aEluZm8pLFxuICAgICAgICAgICAgY2hhaW5JZDogdGhpcy5jaGFpbklkLFxuICAgICAgICAgICAgYWNjb3VudE51bWJlcjogdGhpcy5hY2NvdW50TnVtYmVyLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdG9TaWduRG9jRGVjb2RlciA9IFByb3RvU2lnbkRvY0RlY29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/decoder/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/stargate/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./codec */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/codec/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./decoder */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/decoder/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wrapper */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/wrapper/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvc3RhcmdhdGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHdGQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyw0RkFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsNEZBQVc7QUFDaEMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvc21vc1xcYnVpbGRcXHN0YXJnYXRlXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvZGVjXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9kZWNvZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi93cmFwcGVyXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/wrapper/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/stargate/wrapper/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SignDocWrapper = void 0;\nconst decoder_1 = __webpack_require__(/*! ../decoder */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/decoder/index.js\");\nconst tx_1 = __webpack_require__(/*! @keplr-wallet/proto-types/cosmos/tx/v1beta1/tx */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx.js\");\nconst adr_36_1 = __webpack_require__(/*! ../../adr-36 */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/adr-36/index.js\");\nclass SignDocWrapper {\n    constructor(signDoc) {\n        this.signDoc = signDoc;\n        if (\"msgs\" in signDoc) {\n            this.mode = \"amino\";\n        }\n        else {\n            this.mode = \"direct\";\n        }\n        if (this.mode === \"amino\") {\n            // Check that the sign doc is for ADR-36.\n            // The validation should be performed on the background process.\n            // So, here, we check once more, but the validation related to bech32 is considered to be done in the background process.\n            this.isADR36SignDoc = (0, adr_36_1.checkAndValidateADR36AminoSignDoc)(this.aminoSignDoc);\n        }\n        else {\n            // Currently, only support amino sign doc for ADR-36\n            this.isADR36SignDoc = false;\n        }\n    }\n    static fromAminoSignDoc(signDoc) {\n        return new SignDocWrapper(signDoc);\n    }\n    static fromDirectSignDoc(signDoc) {\n        return new SignDocWrapper(signDoc);\n    }\n    static fromDirectSignDocBytes(signDocBytes) {\n        return new SignDocWrapper(tx_1.SignDoc.decode(signDocBytes));\n    }\n    clone() {\n        return new SignDocWrapper(this.signDoc);\n    }\n    get protoSignDoc() {\n        if (this.mode === \"amino\") {\n            throw new Error(\"Sign doc is encoded as Amino Json\");\n        }\n        if (\"msgs\" in this.signDoc) {\n            throw new Error(\"Unexpected error\");\n        }\n        if (!this._protoSignDoc) {\n            this._protoSignDoc = new decoder_1.ProtoSignDocDecoder(this.signDoc);\n        }\n        return this._protoSignDoc;\n    }\n    get aminoSignDoc() {\n        if (this.mode === \"direct\") {\n            throw new Error(\"Sign doc is encoded as Protobuf\");\n        }\n        if (!(\"msgs\" in this.signDoc)) {\n            throw new Error(\"Unexpected error\");\n        }\n        return this.signDoc;\n    }\n    get chainId() {\n        if (this.mode === \"direct\") {\n            return this.protoSignDoc.chainId;\n        }\n        return this.aminoSignDoc.chain_id;\n    }\n    get memo() {\n        if (this.mode === \"direct\") {\n            return this.protoSignDoc.txBody.memo;\n        }\n        return this.aminoSignDoc.memo;\n    }\n    get fees() {\n        var _a, _b;\n        if (this.mode === \"direct\") {\n            const fees = [];\n            for (const coinObj of (_b = (_a = this.protoSignDoc.authInfo.fee) === null || _a === void 0 ? void 0 : _a.amount) !== null && _b !== void 0 ? _b : []) {\n                if (coinObj.denom == null || coinObj.amount == null) {\n                    throw new Error(\"Invalid fee\");\n                }\n                fees.push({\n                    denom: coinObj.denom,\n                    amount: coinObj.amount,\n                });\n            }\n            return fees;\n        }\n        return this.aminoSignDoc.fee.amount;\n    }\n    get payer() {\n        var _a;\n        if (this.mode === \"direct\") {\n            return (_a = this.protoSignDoc.authInfo.fee) === null || _a === void 0 ? void 0 : _a.payer;\n        }\n        return this.aminoSignDoc.fee.payer;\n    }\n    get granter() {\n        var _a;\n        if (this.mode === \"direct\") {\n            return (_a = this.protoSignDoc.authInfo.fee) === null || _a === void 0 ? void 0 : _a.granter;\n        }\n        return this.aminoSignDoc.fee.granter;\n    }\n    get gas() {\n        var _a;\n        if (this.mode === \"direct\") {\n            if ((_a = this.protoSignDoc.authInfo.fee) === null || _a === void 0 ? void 0 : _a.gasLimit) {\n                return parseInt(this.protoSignDoc.authInfo.fee.gasLimit);\n            }\n            else {\n                return 0;\n            }\n        }\n        return parseInt(this.aminoSignDoc.fee.gas);\n    }\n}\nexports.SignDocWrapper = SignDocWrapper;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvc3RhcmdhdGUvd3JhcHBlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsa0JBQWtCLG1CQUFPLENBQUMsNkZBQVk7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLDhIQUFnRDtBQUNyRSxpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBYztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjb3Ntb3NcXGJ1aWxkXFxzdGFyZ2F0ZVxcd3JhcHBlclxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNpZ25Eb2NXcmFwcGVyID0gdm9pZCAwO1xuY29uc3QgZGVjb2Rlcl8xID0gcmVxdWlyZShcIi4uL2RlY29kZXJcIik7XG5jb25zdCB0eF8xID0gcmVxdWlyZShcIkBrZXBsci13YWxsZXQvcHJvdG8tdHlwZXMvY29zbW9zL3R4L3YxYmV0YTEvdHhcIik7XG5jb25zdCBhZHJfMzZfMSA9IHJlcXVpcmUoXCIuLi8uLi9hZHItMzZcIik7XG5jbGFzcyBTaWduRG9jV3JhcHBlciB7XG4gICAgY29uc3RydWN0b3Ioc2lnbkRvYykge1xuICAgICAgICB0aGlzLnNpZ25Eb2MgPSBzaWduRG9jO1xuICAgICAgICBpZiAoXCJtc2dzXCIgaW4gc2lnbkRvYykge1xuICAgICAgICAgICAgdGhpcy5tb2RlID0gXCJhbWlub1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tb2RlID0gXCJkaXJlY3RcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBcImFtaW5vXCIpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIHNpZ24gZG9jIGlzIGZvciBBRFItMzYuXG4gICAgICAgICAgICAvLyBUaGUgdmFsaWRhdGlvbiBzaG91bGQgYmUgcGVyZm9ybWVkIG9uIHRoZSBiYWNrZ3JvdW5kIHByb2Nlc3MuXG4gICAgICAgICAgICAvLyBTbywgaGVyZSwgd2UgY2hlY2sgb25jZSBtb3JlLCBidXQgdGhlIHZhbGlkYXRpb24gcmVsYXRlZCB0byBiZWNoMzIgaXMgY29uc2lkZXJlZCB0byBiZSBkb25lIGluIHRoZSBiYWNrZ3JvdW5kIHByb2Nlc3MuXG4gICAgICAgICAgICB0aGlzLmlzQURSMzZTaWduRG9jID0gKDAsIGFkcl8zNl8xLmNoZWNrQW5kVmFsaWRhdGVBRFIzNkFtaW5vU2lnbkRvYykodGhpcy5hbWlub1NpZ25Eb2MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQ3VycmVudGx5LCBvbmx5IHN1cHBvcnQgYW1pbm8gc2lnbiBkb2MgZm9yIEFEUi0zNlxuICAgICAgICAgICAgdGhpcy5pc0FEUjM2U2lnbkRvYyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQW1pbm9TaWduRG9jKHNpZ25Eb2MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaWduRG9jV3JhcHBlcihzaWduRG9jKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21EaXJlY3RTaWduRG9jKHNpZ25Eb2MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaWduRG9jV3JhcHBlcihzaWduRG9jKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21EaXJlY3RTaWduRG9jQnl0ZXMoc2lnbkRvY0J5dGVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2lnbkRvY1dyYXBwZXIodHhfMS5TaWduRG9jLmRlY29kZShzaWduRG9jQnl0ZXMpKTtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2lnbkRvY1dyYXBwZXIodGhpcy5zaWduRG9jKTtcbiAgICB9XG4gICAgZ2V0IHByb3RvU2lnbkRvYygpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gXCJhbWlub1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWduIGRvYyBpcyBlbmNvZGVkIGFzIEFtaW5vIEpzb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwibXNnc1wiIGluIHRoaXMuc2lnbkRvYykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBlcnJvclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3Byb3RvU2lnbkRvYykge1xuICAgICAgICAgICAgdGhpcy5fcHJvdG9TaWduRG9jID0gbmV3IGRlY29kZXJfMS5Qcm90b1NpZ25Eb2NEZWNvZGVyKHRoaXMuc2lnbkRvYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3RvU2lnbkRvYztcbiAgICB9XG4gICAgZ2V0IGFtaW5vU2lnbkRvYygpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gXCJkaXJlY3RcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2lnbiBkb2MgaXMgZW5jb2RlZCBhcyBQcm90b2J1ZlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShcIm1zZ3NcIiBpbiB0aGlzLnNpZ25Eb2MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGVycm9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25Eb2M7XG4gICAgfVxuICAgIGdldCBjaGFpbklkKCkge1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBcImRpcmVjdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm90b1NpZ25Eb2MuY2hhaW5JZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hbWlub1NpZ25Eb2MuY2hhaW5faWQ7XG4gICAgfVxuICAgIGdldCBtZW1vKCkge1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBcImRpcmVjdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm90b1NpZ25Eb2MudHhCb2R5Lm1lbW87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYW1pbm9TaWduRG9jLm1lbW87XG4gICAgfVxuICAgIGdldCBmZWVzKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBcImRpcmVjdFwiKSB7XG4gICAgICAgICAgICBjb25zdCBmZWVzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvaW5PYmogb2YgKF9iID0gKF9hID0gdGhpcy5wcm90b1NpZ25Eb2MuYXV0aEluZm8uZmVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYW1vdW50KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXSkge1xuICAgICAgICAgICAgICAgIGlmIChjb2luT2JqLmRlbm9tID09IG51bGwgfHwgY29pbk9iai5hbW91bnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGZlZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmVlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZGVub206IGNvaW5PYmouZGVub20sXG4gICAgICAgICAgICAgICAgICAgIGFtb3VudDogY29pbk9iai5hbW91bnQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmVlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hbWlub1NpZ25Eb2MuZmVlLmFtb3VudDtcbiAgICB9XG4gICAgZ2V0IHBheWVyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IFwiZGlyZWN0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnByb3RvU2lnbkRvYy5hdXRoSW5mby5mZWUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXllcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hbWlub1NpZ25Eb2MuZmVlLnBheWVyO1xuICAgIH1cbiAgICBnZXQgZ3JhbnRlcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBcImRpcmVjdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5wcm90b1NpZ25Eb2MuYXV0aEluZm8uZmVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ3JhbnRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hbWlub1NpZ25Eb2MuZmVlLmdyYW50ZXI7XG4gICAgfVxuICAgIGdldCBnYXMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gXCJkaXJlY3RcIikge1xuICAgICAgICAgICAgaWYgKChfYSA9IHRoaXMucHJvdG9TaWduRG9jLmF1dGhJbmZvLmZlZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdhc0xpbWl0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMucHJvdG9TaWduRG9jLmF1dGhJbmZvLmZlZS5nYXNMaW1pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5hbWlub1NpZ25Eb2MuZmVlLmdhcyk7XG4gICAgfVxufVxuZXhwb3J0cy5TaWduRG9jV3JhcHBlciA9IFNpZ25Eb2NXcmFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/stargate/wrapper/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/tx-tracer/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/tx-tracer/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TendermintTxTracer = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@keplr-wallet/cosmos/build/tx-tracer/types.js\");\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nclass TendermintTxTracer {\n    constructor(url, wsEndpoint, options = {}) {\n        this.url = url;\n        this.wsEndpoint = wsEndpoint;\n        this.options = options;\n        this.newBlockSubscribes = [];\n        // Key is \"id\" for jsonrpc\n        this.txSubscribes = new Map();\n        // Key is \"id\" for jsonrpc\n        this.pendingQueries = new Map();\n        this.listeners = {};\n        this.onOpen = (e) => {\n            var _a;\n            if (this.newBlockSubscribes.length > 0) {\n                this.sendSubscribeBlockRpc();\n            }\n            for (const [id, tx] of this.txSubscribes) {\n                this.sendSubscribeTxRpc(id, tx.params);\n            }\n            for (const [id, query] of this.pendingQueries) {\n                this.sendQueryRpc(id, query.method, query.params);\n            }\n            for (const listener of (_a = this.listeners.open) !== null && _a !== void 0 ? _a : []) {\n                listener(e);\n            }\n        };\n        this.onMessage = (e) => {\n            var _a, _b, _c, _d, _e, _f;\n            for (const listener of (_a = this.listeners.message) !== null && _a !== void 0 ? _a : []) {\n                listener(e);\n            }\n            if (e.data) {\n                try {\n                    const obj = JSON.parse(e.data);\n                    if (obj === null || obj === void 0 ? void 0 : obj.id) {\n                        if (this.pendingQueries.has(obj.id)) {\n                            if (obj.error) {\n                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                this.pendingQueries\n                                    .get(obj.id)\n                                    .rejector(new Error(obj.error.data || obj.error.message));\n                            }\n                            else {\n                                // XXX: I'm not sure why this happens, but somtimes the form of tx id delivered under the \"tx_result\" field.\n                                if ((_b = obj.result) === null || _b === void 0 ? void 0 : _b.tx_result) {\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                    this.pendingQueries.get(obj.id).resolver(obj.result.tx_result);\n                                }\n                                else {\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                    this.pendingQueries.get(obj.id).resolver(obj.result);\n                                }\n                            }\n                            this.pendingQueries.delete(obj.id);\n                        }\n                    }\n                    if (((_d = (_c = obj === null || obj === void 0 ? void 0 : obj.result) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.type) === \"tendermint/event/NewBlock\") {\n                        for (const handler of this.newBlockSubscribes) {\n                            handler.handler(obj.result.data.value);\n                        }\n                    }\n                    if (((_f = (_e = obj === null || obj === void 0 ? void 0 : obj.result) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.type) === \"tendermint/event/Tx\") {\n                        if (obj === null || obj === void 0 ? void 0 : obj.id) {\n                            if (this.txSubscribes.has(obj.id)) {\n                                if (obj.error) {\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                    this.txSubscribes\n                                        .get(obj.id)\n                                        .rejector(new Error(obj.error.data || obj.error.message));\n                                }\n                                else {\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                    this.txSubscribes\n                                        .get(obj.id)\n                                        .resolver(obj.result.data.value.TxResult.result);\n                                }\n                                this.txSubscribes.delete(obj.id);\n                            }\n                        }\n                    }\n                }\n                catch (e) {\n                    console.log(`Tendermint websocket jsonrpc response is not JSON: ${e.message || e.toString()}`);\n                }\n            }\n        };\n        this.onClose = (e) => {\n            var _a;\n            for (const listener of (_a = this.listeners.close) !== null && _a !== void 0 ? _a : []) {\n                listener(e);\n            }\n        };\n        this.ws = this.options.wsObject\n            ? new this.options.wsObject(this.getWsEndpoint())\n            : new WebSocket(this.getWsEndpoint());\n        this.ws.onopen = this.onOpen;\n        this.ws.onmessage = this.onMessage;\n        this.ws.onclose = this.onClose;\n    }\n    getWsEndpoint() {\n        let url = this.url;\n        if (url.startsWith(\"http\")) {\n            url = url.replace(\"http\", \"ws\");\n        }\n        if (!url.endsWith(this.wsEndpoint)) {\n            const wsEndpoint = this.wsEndpoint.startsWith(\"/\")\n                ? this.wsEndpoint\n                : \"/\" + this.wsEndpoint;\n            url = url.endsWith(\"/\") ? url + wsEndpoint.slice(1) : url + wsEndpoint;\n        }\n        return url;\n    }\n    close() {\n        this.ws.close();\n    }\n    get readyState() {\n        switch (this.ws.readyState) {\n            case 0:\n                return types_1.WsReadyState.CONNECTING;\n            case 1:\n                return types_1.WsReadyState.OPEN;\n            case 2:\n                return types_1.WsReadyState.CLOSING;\n            case 3:\n                return types_1.WsReadyState.CLOSED;\n            default:\n                return types_1.WsReadyState.NONE;\n        }\n    }\n    addEventListener(type, listener) {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.listeners[type].push(listener);\n    }\n    /**\n     * SubscribeBlock receives the handler for the block.\n     * The handelrs shares the subscription of block.\n     * @param handler\n     * @return unsubscriber\n     */\n    subscribeBlock(handler) {\n        this.newBlockSubscribes.push({\n            handler,\n        });\n        if (this.newBlockSubscribes.length === 1) {\n            this.sendSubscribeBlockRpc();\n        }\n        return () => {\n            this.newBlockSubscribes = this.newBlockSubscribes.filter((s) => s.handler !== handler);\n        };\n    }\n    sendSubscribeBlockRpc() {\n        if (this.readyState === types_1.WsReadyState.OPEN) {\n            this.ws.send(JSON.stringify({\n                jsonrpc: \"2.0\",\n                method: \"subscribe\",\n                params: [\"tm.event='NewBlock'\"],\n                id: 1,\n            }));\n        }\n    }\n    // Query the tx and subscribe the tx.\n    traceTx(query) {\n        return new Promise((resolve) => {\n            // At first, try to query the tx at the same time of subscribing the tx.\n            // But, the querying's error will be ignored.\n            this.queryTx(query)\n                .then((result) => {\n                if (query instanceof Uint8Array) {\n                    resolve(result);\n                    return;\n                }\n                if ((result === null || result === void 0 ? void 0 : result.total_count) !== \"0\") {\n                    resolve(result);\n                    return;\n                }\n            })\n                .catch(() => {\n                // noop\n            });\n            this.subscribeTx(query).then(resolve);\n        }).then((tx) => {\n            // Occasionally, even if the subscribe tx event occurs, the state through query is not changed yet.\n            // Perhaps it is because the block has not been committed yet even though the result of deliverTx in tendermint is complete.\n            // This method is usually used to reflect the state change through query when tx is completed.\n            // The simplest solution is to just add a little delay.\n            return new Promise((resolve) => {\n                setTimeout(() => resolve(tx), 100);\n            });\n        });\n    }\n    subscribeTx(query) {\n        if (query instanceof Uint8Array) {\n            const id = this.createRandomId();\n            const params = {\n                query: `tm.event='Tx' AND tx.hash='${buffer_1.Buffer.from(query)\n                    .toString(\"hex\")\n                    .toUpperCase()}'`,\n            };\n            return new Promise((resolve, reject) => {\n                this.txSubscribes.set(id, {\n                    params,\n                    resolver: resolve,\n                    rejector: reject,\n                });\n                this.sendSubscribeTxRpc(id, params);\n            });\n        }\n        else {\n            const id = this.createRandomId();\n            const params = {\n                query: `tm.event='Tx' and ` +\n                    Object.keys(query)\n                        .map((key) => {\n                        return {\n                            key,\n                            value: query[key],\n                        };\n                    })\n                        .map((obj) => {\n                        return `${obj.key}=${typeof obj.value === \"string\" ? `'${obj.value}'` : obj.value}`;\n                    })\n                        .join(\" and \"),\n                page: \"1\",\n                per_page: \"1\",\n                order_by: \"desc\",\n            };\n            return new Promise((resolve, reject) => {\n                this.txSubscribes.set(id, {\n                    params,\n                    resolver: resolve,\n                    rejector: reject,\n                });\n                this.sendSubscribeTxRpc(id, params);\n            });\n        }\n    }\n    sendSubscribeTxRpc(id, params) {\n        if (this.readyState === types_1.WsReadyState.OPEN) {\n            this.ws.send(JSON.stringify({\n                jsonrpc: \"2.0\",\n                method: \"subscribe\",\n                params: params,\n                id,\n            }));\n        }\n    }\n    queryTx(query) {\n        if (query instanceof Uint8Array) {\n            return this.query(\"tx\", {\n                hash: buffer_1.Buffer.from(query).toString(\"base64\"),\n                prove: false,\n            });\n        }\n        else {\n            const params = {\n                query: Object.keys(query)\n                    .map((key) => {\n                    return {\n                        key,\n                        value: query[key],\n                    };\n                })\n                    .map((obj) => {\n                    return `${obj.key}=${typeof obj.value === \"string\" ? `'${obj.value}'` : obj.value}`;\n                })\n                    .join(\" and \"),\n                page: \"1\",\n                per_page: \"1\",\n                order_by: \"desc\",\n            };\n            return this.query(\"tx_search\", params);\n        }\n    }\n    query(method, params) {\n        const id = this.createRandomId();\n        return new Promise((resolve, reject) => {\n            this.pendingQueries.set(id, {\n                method,\n                params,\n                resolver: resolve,\n                rejector: reject,\n            });\n            this.sendQueryRpc(id, method, params);\n        });\n    }\n    sendQueryRpc(id, method, params) {\n        if (this.readyState === types_1.WsReadyState.OPEN) {\n            this.ws.send(JSON.stringify({\n                jsonrpc: \"2.0\",\n                method,\n                params,\n                id,\n            }));\n        }\n    }\n    createRandomId() {\n        return parseInt(Array.from({ length: 6 })\n            .map(() => Math.floor(Math.random() * 100))\n            .join(\"\"));\n    }\n}\nexports.TendermintTxTracer = TendermintTxTracer;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/tx-tracer/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/cosmos/build/tx-tracer/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/cosmos/build/tx-tracer/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WsReadyState = void 0;\nvar WsReadyState;\n(function (WsReadyState) {\n    WsReadyState[WsReadyState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    WsReadyState[WsReadyState[\"OPEN\"] = 1] = \"OPEN\";\n    WsReadyState[WsReadyState[\"CLOSING\"] = 2] = \"CLOSING\";\n    WsReadyState[WsReadyState[\"CLOSED\"] = 3] = \"CLOSED\";\n    // WS is not initialized or the ready state of WS is unknown\n    WsReadyState[WsReadyState[\"NONE\"] = 4] = \"NONE\";\n})(WsReadyState = exports.WsReadyState || (exports.WsReadyState = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jb3Ntb3MvYnVpbGQvdHgtdHJhY2VyL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEMsb0JBQW9CLEtBQUs7QUFDcEUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNvc21vc1xcYnVpbGRcXHR4LXRyYWNlclxcdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldzUmVhZHlTdGF0ZSA9IHZvaWQgMDtcbnZhciBXc1JlYWR5U3RhdGU7XG4oZnVuY3Rpb24gKFdzUmVhZHlTdGF0ZSkge1xuICAgIFdzUmVhZHlTdGF0ZVtXc1JlYWR5U3RhdGVbXCJDT05ORUNUSU5HXCJdID0gMF0gPSBcIkNPTk5FQ1RJTkdcIjtcbiAgICBXc1JlYWR5U3RhdGVbV3NSZWFkeVN0YXRlW1wiT1BFTlwiXSA9IDFdID0gXCJPUEVOXCI7XG4gICAgV3NSZWFkeVN0YXRlW1dzUmVhZHlTdGF0ZVtcIkNMT1NJTkdcIl0gPSAyXSA9IFwiQ0xPU0lOR1wiO1xuICAgIFdzUmVhZHlTdGF0ZVtXc1JlYWR5U3RhdGVbXCJDTE9TRURcIl0gPSAzXSA9IFwiQ0xPU0VEXCI7XG4gICAgLy8gV1MgaXMgbm90IGluaXRpYWxpemVkIG9yIHRoZSByZWFkeSBzdGF0ZSBvZiBXUyBpcyB1bmtub3duXG4gICAgV3NSZWFkeVN0YXRlW1dzUmVhZHlTdGF0ZVtcIk5PTkVcIl0gPSA0XSA9IFwiTk9ORVwiO1xufSkoV3NSZWFkeVN0YXRlID0gZXhwb3J0cy5Xc1JlYWR5U3RhdGUgfHwgKGV4cG9ydHMuV3NSZWFkeVN0YXRlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/cosmos/build/tx-tracer/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/crypto/build/hash.js":
/*!*********************************************************!*\
  !*** ./node_modules/@keplr-wallet/crypto/build/hash.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Hash = void 0;\nconst sha_js_1 = __webpack_require__(/*! sha.js */ \"(ssr)/./node_modules/sha.js/index.js\");\nconst keccak256_1 = __webpack_require__(/*! @ethersproject/keccak256 */ \"(ssr)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nclass Hash {\n    static sha256(data) {\n        return new Uint8Array(new sha_js_1.sha256().update(data).digest());\n    }\n    static keccak256(data) {\n        return buffer_1.Buffer.from((0, keccak256_1.keccak256)(data).replace(\"0x\", \"\"), \"hex\");\n    }\n    static truncHashPortion(str, firstCharCount = str.length, endCharCount = 0) {\n        return (str.substring(0, firstCharCount) +\n            \"…\" +\n            str.substring(str.length - endCharCount, str.length));\n    }\n}\nexports.Hash = Hash;\n//# sourceMappingURL=hash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jcnlwdG8vYnVpbGQvaGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZO0FBQ1osaUJBQWlCLG1CQUFPLENBQUMsb0RBQVE7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMsZ0dBQTBCO0FBQ3RELGlCQUFpQixtQkFBTyxDQUFDLHFEQUFTO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxjcnlwdG9cXGJ1aWxkXFxoYXNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IYXNoID0gdm9pZCAwO1xuY29uc3Qgc2hhX2pzXzEgPSByZXF1aXJlKFwic2hhLmpzXCIpO1xuY29uc3Qga2VjY2FrMjU2XzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCIpO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyL1wiKTtcbmNsYXNzIEhhc2gge1xuICAgIHN0YXRpYyBzaGEyNTYoZGF0YSkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IHNoYV9qc18xLnNoYTI1NigpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKSk7XG4gICAgfVxuICAgIHN0YXRpYyBrZWNjYWsyNTYoZGF0YSkge1xuICAgICAgICByZXR1cm4gYnVmZmVyXzEuQnVmZmVyLmZyb20oKDAsIGtlY2NhazI1Nl8xLmtlY2NhazI1NikoZGF0YSkucmVwbGFjZShcIjB4XCIsIFwiXCIpLCBcImhleFwiKTtcbiAgICB9XG4gICAgc3RhdGljIHRydW5jSGFzaFBvcnRpb24oc3RyLCBmaXJzdENoYXJDb3VudCA9IHN0ci5sZW5ndGgsIGVuZENoYXJDb3VudCA9IDApIHtcbiAgICAgICAgcmV0dXJuIChzdHIuc3Vic3RyaW5nKDAsIGZpcnN0Q2hhckNvdW50KSArXG4gICAgICAgICAgICBcIuKAplwiICtcbiAgICAgICAgICAgIHN0ci5zdWJzdHJpbmcoc3RyLmxlbmd0aCAtIGVuZENoYXJDb3VudCwgc3RyLmxlbmd0aCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuSGFzaCA9IEhhc2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/crypto/build/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/crypto/build/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@keplr-wallet/crypto/build/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./mnemonic */ \"(ssr)/./node_modules/@keplr-wallet/crypto/build/mnemonic.js\"), exports);\n__exportStar(__webpack_require__(/*! ./key */ \"(ssr)/./node_modules/@keplr-wallet/crypto/build/key.js\"), exports);\n__exportStar(__webpack_require__(/*! ./hash */ \"(ssr)/./node_modules/@keplr-wallet/crypto/build/hash.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jcnlwdG8vYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLCtFQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxxRUFBTztBQUM1QixhQUFhLG1CQUFPLENBQUMsdUVBQVE7QUFDN0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNyeXB0b1xcYnVpbGRcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbW5lbW9uaWNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2tleVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGFzaFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/crypto/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/crypto/build/key.js":
/*!********************************************************!*\
  !*** ./node_modules/@keplr-wallet/crypto/build/key.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PubKeySecp256k1 = exports.PrivKeySecp256k1 = void 0;\nconst elliptic_1 = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\nconst crypto_js_1 = __importDefault(__webpack_require__(/*! crypto-js */ \"(ssr)/./node_modules/crypto-js/index.js\"));\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nconst hash_1 = __webpack_require__(/*! ./hash */ \"(ssr)/./node_modules/@keplr-wallet/crypto/build/hash.js\");\nclass PrivKeySecp256k1 {\n    static generateRandomKey() {\n        const secp256k1 = new elliptic_1.ec(\"secp256k1\");\n        return new PrivKeySecp256k1(buffer_1.Buffer.from(secp256k1.genKeyPair().getPrivate().toArray()));\n    }\n    constructor(privKey) {\n        this.privKey = privKey;\n    }\n    toBytes() {\n        return new Uint8Array(this.privKey);\n    }\n    getPubKey() {\n        const secp256k1 = new elliptic_1.ec(\"secp256k1\");\n        const key = secp256k1.keyFromPrivate(this.privKey);\n        return new PubKeySecp256k1(new Uint8Array(key.getPublic().encodeCompressed(\"array\")));\n    }\n    signDigest32(digest) {\n        if (digest.length !== 32) {\n            throw new Error(`Invalid length of digest to sign: ${digest.length}`);\n        }\n        const secp256k1 = new elliptic_1.ec(\"secp256k1\");\n        const key = secp256k1.keyFromPrivate(this.privKey);\n        const signature = key.sign(digest, {\n            canonical: true,\n        });\n        return {\n            r: new Uint8Array(signature.r.toArray(\"be\", 32)),\n            s: new Uint8Array(signature.s.toArray(\"be\", 32)),\n            v: signature.recoveryParam,\n        };\n    }\n}\nexports.PrivKeySecp256k1 = PrivKeySecp256k1;\nclass PubKeySecp256k1 {\n    constructor(pubKey) {\n        this.pubKey = pubKey;\n        if (pubKey.length !== 33 && pubKey.length !== 65) {\n            throw new Error(`Invalid length of public key: ${pubKey.length}`);\n        }\n    }\n    toBytes(uncompressed) {\n        if (uncompressed && this.pubKey.length === 65) {\n            return this.pubKey;\n        }\n        if (!uncompressed && this.pubKey.length === 33) {\n            return this.pubKey;\n        }\n        const keyPair = this.toKeyPair();\n        if (uncompressed) {\n            return new Uint8Array(buffer_1.Buffer.from(keyPair.getPublic().encode(\"hex\", false), \"hex\"));\n        }\n        else {\n            return new Uint8Array(buffer_1.Buffer.from(keyPair.getPublic().encodeCompressed(\"hex\"), \"hex\"));\n        }\n    }\n    /**\n     * @deprecated Use `getCosmosAddress()` instead.\n     */\n    getAddress() {\n        return this.getCosmosAddress();\n    }\n    getCosmosAddress() {\n        let hash = crypto_js_1.default.SHA256(crypto_js_1.default.lib.WordArray.create(this.toBytes(false))).toString();\n        hash = crypto_js_1.default.RIPEMD160(crypto_js_1.default.enc.Hex.parse(hash)).toString();\n        return new Uint8Array(buffer_1.Buffer.from(hash, \"hex\"));\n    }\n    getEthAddress() {\n        // Should be uncompressed.\n        // And remove prefix byte.\n        // And hash by keccak256.\n        // Use last 20 bytes.\n        return hash_1.Hash.keccak256(this.toBytes(true).slice(1)).slice(-20);\n    }\n    toKeyPair() {\n        const secp256k1 = new elliptic_1.ec(\"secp256k1\");\n        return secp256k1.keyFromPublic(buffer_1.Buffer.from(this.pubKey).toString(\"hex\"), \"hex\");\n    }\n    verifyDigest32(digest, signature) {\n        if (digest.length !== 32) {\n            throw new Error(`Invalid length of digest to verify: ${digest.length}`);\n        }\n        if (signature.length !== 64) {\n            throw new Error(`Invalid length of signature: ${signature.length}`);\n        }\n        const secp256k1 = new elliptic_1.ec(\"secp256k1\");\n        const r = signature.slice(0, 32);\n        const s = signature.slice(32);\n        return secp256k1.verify(digest, {\n            r: buffer_1.Buffer.from(r).toString(\"hex\"),\n            s: buffer_1.Buffer.from(s).toString(\"hex\"),\n        }, this.toKeyPair());\n    }\n}\nexports.PubKeySecp256k1 = PubKeySecp256k1;\n//# sourceMappingURL=key.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jcnlwdG8vYnVpbGQva2V5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsd0JBQXdCO0FBQ2xELG1CQUFtQixtQkFBTyxDQUFDLCtEQUFVO0FBQ3JDLG9DQUFvQyxtQkFBTyxDQUFDLDBEQUFXO0FBQ3ZELGlCQUFpQixtQkFBTyxDQUFDLHFEQUFTO0FBQ2xDLGVBQWUsbUJBQU8sQ0FBQyx1RUFBUTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsY0FBYztBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGNBQWM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxjQUFjO0FBQ2pGO0FBQ0E7QUFDQSw0REFBNEQsaUJBQWlCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXGNyeXB0b1xcYnVpbGRcXGtleS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHViS2V5U2VjcDI1NmsxID0gZXhwb3J0cy5Qcml2S2V5U2VjcDI1NmsxID0gdm9pZCAwO1xuY29uc3QgZWxsaXB0aWNfMSA9IHJlcXVpcmUoXCJlbGxpcHRpY1wiKTtcbmNvbnN0IGNyeXB0b19qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjcnlwdG8tanNcIikpO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyL1wiKTtcbmNvbnN0IGhhc2hfMSA9IHJlcXVpcmUoXCIuL2hhc2hcIik7XG5jbGFzcyBQcml2S2V5U2VjcDI1NmsxIHtcbiAgICBzdGF0aWMgZ2VuZXJhdGVSYW5kb21LZXkoKSB7XG4gICAgICAgIGNvbnN0IHNlY3AyNTZrMSA9IG5ldyBlbGxpcHRpY18xLmVjKFwic2VjcDI1NmsxXCIpO1xuICAgICAgICByZXR1cm4gbmV3IFByaXZLZXlTZWNwMjU2azEoYnVmZmVyXzEuQnVmZmVyLmZyb20oc2VjcDI1NmsxLmdlbktleVBhaXIoKS5nZXRQcml2YXRlKCkudG9BcnJheSgpKSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHByaXZLZXkpIHtcbiAgICAgICAgdGhpcy5wcml2S2V5ID0gcHJpdktleTtcbiAgICB9XG4gICAgdG9CeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMucHJpdktleSk7XG4gICAgfVxuICAgIGdldFB1YktleSgpIHtcbiAgICAgICAgY29uc3Qgc2VjcDI1NmsxID0gbmV3IGVsbGlwdGljXzEuZWMoXCJzZWNwMjU2azFcIik7XG4gICAgICAgIGNvbnN0IGtleSA9IHNlY3AyNTZrMS5rZXlGcm9tUHJpdmF0ZSh0aGlzLnByaXZLZXkpO1xuICAgICAgICByZXR1cm4gbmV3IFB1YktleVNlY3AyNTZrMShuZXcgVWludDhBcnJheShrZXkuZ2V0UHVibGljKCkuZW5jb2RlQ29tcHJlc3NlZChcImFycmF5XCIpKSk7XG4gICAgfVxuICAgIHNpZ25EaWdlc3QzMihkaWdlc3QpIHtcbiAgICAgICAgaWYgKGRpZ2VzdC5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbGVuZ3RoIG9mIGRpZ2VzdCB0byBzaWduOiAke2RpZ2VzdC5sZW5ndGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VjcDI1NmsxID0gbmV3IGVsbGlwdGljXzEuZWMoXCJzZWNwMjU2azFcIik7XG4gICAgICAgIGNvbnN0IGtleSA9IHNlY3AyNTZrMS5rZXlGcm9tUHJpdmF0ZSh0aGlzLnByaXZLZXkpO1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBrZXkuc2lnbihkaWdlc3QsIHtcbiAgICAgICAgICAgIGNhbm9uaWNhbDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBuZXcgVWludDhBcnJheShzaWduYXR1cmUuci50b0FycmF5KFwiYmVcIiwgMzIpKSxcbiAgICAgICAgICAgIHM6IG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZS5zLnRvQXJyYXkoXCJiZVwiLCAzMikpLFxuICAgICAgICAgICAgdjogc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW0sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5Qcml2S2V5U2VjcDI1NmsxID0gUHJpdktleVNlY3AyNTZrMTtcbmNsYXNzIFB1YktleVNlY3AyNTZrMSB7XG4gICAgY29uc3RydWN0b3IocHViS2V5KSB7XG4gICAgICAgIHRoaXMucHViS2V5ID0gcHViS2V5O1xuICAgICAgICBpZiAocHViS2V5Lmxlbmd0aCAhPT0gMzMgJiYgcHViS2V5Lmxlbmd0aCAhPT0gNjUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBsZW5ndGggb2YgcHVibGljIGtleTogJHtwdWJLZXkubGVuZ3RofWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvQnl0ZXModW5jb21wcmVzc2VkKSB7XG4gICAgICAgIGlmICh1bmNvbXByZXNzZWQgJiYgdGhpcy5wdWJLZXkubGVuZ3RoID09PSA2NSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHViS2V5O1xuICAgICAgICB9XG4gICAgICAgIGlmICghdW5jb21wcmVzc2VkICYmIHRoaXMucHViS2V5Lmxlbmd0aCA9PT0gMzMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1YktleTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlQYWlyID0gdGhpcy50b0tleVBhaXIoKTtcbiAgICAgICAgaWYgKHVuY29tcHJlc3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGtleVBhaXIuZ2V0UHVibGljKCkuZW5jb2RlKFwiaGV4XCIsIGZhbHNlKSwgXCJoZXhcIikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGtleVBhaXIuZ2V0UHVibGljKCkuZW5jb2RlQ29tcHJlc3NlZChcImhleFwiKSwgXCJoZXhcIikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBgZ2V0Q29zbW9zQWRkcmVzcygpYCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGdldEFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvc21vc0FkZHJlc3MoKTtcbiAgICB9XG4gICAgZ2V0Q29zbW9zQWRkcmVzcygpIHtcbiAgICAgICAgbGV0IGhhc2ggPSBjcnlwdG9fanNfMS5kZWZhdWx0LlNIQTI1NihjcnlwdG9fanNfMS5kZWZhdWx0LmxpYi5Xb3JkQXJyYXkuY3JlYXRlKHRoaXMudG9CeXRlcyhmYWxzZSkpKS50b1N0cmluZygpO1xuICAgICAgICBoYXNoID0gY3J5cHRvX2pzXzEuZGVmYXVsdC5SSVBFTUQxNjAoY3J5cHRvX2pzXzEuZGVmYXVsdC5lbmMuSGV4LnBhcnNlKGhhc2gpKS50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyXzEuQnVmZmVyLmZyb20oaGFzaCwgXCJoZXhcIikpO1xuICAgIH1cbiAgICBnZXRFdGhBZGRyZXNzKCkge1xuICAgICAgICAvLyBTaG91bGQgYmUgdW5jb21wcmVzc2VkLlxuICAgICAgICAvLyBBbmQgcmVtb3ZlIHByZWZpeCBieXRlLlxuICAgICAgICAvLyBBbmQgaGFzaCBieSBrZWNjYWsyNTYuXG4gICAgICAgIC8vIFVzZSBsYXN0IDIwIGJ5dGVzLlxuICAgICAgICByZXR1cm4gaGFzaF8xLkhhc2gua2VjY2FrMjU2KHRoaXMudG9CeXRlcyh0cnVlKS5zbGljZSgxKSkuc2xpY2UoLTIwKTtcbiAgICB9XG4gICAgdG9LZXlQYWlyKCkge1xuICAgICAgICBjb25zdCBzZWNwMjU2azEgPSBuZXcgZWxsaXB0aWNfMS5lYyhcInNlY3AyNTZrMVwiKTtcbiAgICAgICAgcmV0dXJuIHNlY3AyNTZrMS5rZXlGcm9tUHVibGljKGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKHRoaXMucHViS2V5KS50b1N0cmluZyhcImhleFwiKSwgXCJoZXhcIik7XG4gICAgfVxuICAgIHZlcmlmeURpZ2VzdDMyKGRpZ2VzdCwgc2lnbmF0dXJlKSB7XG4gICAgICAgIGlmIChkaWdlc3QubGVuZ3RoICE9PSAzMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGxlbmd0aCBvZiBkaWdlc3QgdG8gdmVyaWZ5OiAke2RpZ2VzdC5sZW5ndGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNpZ25hdHVyZS5sZW5ndGggIT09IDY0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbGVuZ3RoIG9mIHNpZ25hdHVyZTogJHtzaWduYXR1cmUubGVuZ3RofWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlY3AyNTZrMSA9IG5ldyBlbGxpcHRpY18xLmVjKFwic2VjcDI1NmsxXCIpO1xuICAgICAgICBjb25zdCByID0gc2lnbmF0dXJlLnNsaWNlKDAsIDMyKTtcbiAgICAgICAgY29uc3QgcyA9IHNpZ25hdHVyZS5zbGljZSgzMik7XG4gICAgICAgIHJldHVybiBzZWNwMjU2azEudmVyaWZ5KGRpZ2VzdCwge1xuICAgICAgICAgICAgcjogYnVmZmVyXzEuQnVmZmVyLmZyb20ocikudG9TdHJpbmcoXCJoZXhcIiksXG4gICAgICAgICAgICBzOiBidWZmZXJfMS5CdWZmZXIuZnJvbShzKS50b1N0cmluZyhcImhleFwiKSxcbiAgICAgICAgfSwgdGhpcy50b0tleVBhaXIoKSk7XG4gICAgfVxufVxuZXhwb3J0cy5QdWJLZXlTZWNwMjU2azEgPSBQdWJLZXlTZWNwMjU2azE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/crypto/build/key.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/crypto/build/mnemonic.js":
/*!*************************************************************!*\
  !*** ./node_modules/@keplr-wallet/crypto/build/mnemonic.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Mnemonic = void 0;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bip39 = __webpack_require__(/*! bip39 */ \"(ssr)/./node_modules/bip39/src/index.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bip32 = __webpack_require__(/*! bip32 */ \"(ssr)/./node_modules/bip32/src/index.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bs58check = __webpack_require__(/*! bs58check */ \"(ssr)/./node_modules/bs58check/index.js\");\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nclass Mnemonic {\n    static generateWallet(rng, path = `m/44'/118'/0'/0/0`, password = \"\", strength = 256) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mnemonic = yield Mnemonic.generateSeed(rng, strength);\n            const privKey = Mnemonic.generateWalletFromMnemonic(mnemonic, path, password);\n            return {\n                privKey,\n                mnemonic,\n            };\n        });\n    }\n    static validateMnemonic(mnemonic) {\n        return bip39.validateMnemonic(mnemonic);\n    }\n    static generateSeed(rng, strength = 128) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (strength % 32 !== 0) {\n                throw new TypeError(\"invalid entropy\");\n            }\n            let bytes = new Uint8Array(strength / 8);\n            bytes = yield rng(bytes);\n            return bip39.entropyToMnemonic(buffer_1.Buffer.from(bytes).toString(\"hex\"));\n        });\n    }\n    static generateWalletFromMnemonic(mnemonic, path = `m/44'/118'/0'/0/0`, password = \"\") {\n        const seed = bip39.mnemonicToSeedSync(mnemonic, password);\n        const masterSeed = bip32.fromSeed(seed);\n        const hd = masterSeed.derivePath(path);\n        const privateKey = hd.privateKey;\n        if (!privateKey) {\n            throw new Error(\"null hd key\");\n        }\n        return privateKey;\n    }\n    static generateMasterSeedFromMnemonic(mnemonic, password = \"\") {\n        const seed = bip39.mnemonicToSeedSync(mnemonic, password);\n        const masterKey = bip32.fromSeed(seed);\n        return buffer_1.Buffer.from(bs58check.decode(masterKey.toBase58()));\n    }\n    static generatePrivateKeyFromMasterSeed(seed, path = `m/44'/118'/0'/0/0`) {\n        const masterSeed = bip32.fromBase58(bs58check.encode(seed));\n        const hd = masterSeed.derivePath(path);\n        const privateKey = hd.privateKey;\n        if (!privateKey) {\n            throw new Error(\"null hd key\");\n        }\n        return privateKey;\n    }\n}\nexports.Mnemonic = Mnemonic;\n//# sourceMappingURL=mnemonic.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9jcnlwdG8vYnVpbGQvbW5lbW9uaWMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQjtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxzREFBTztBQUM3QjtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxzREFBTztBQUM3QjtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLDBEQUFXO0FBQ3JDLGlCQUFpQixtQkFBTyxDQUFDLHFEQUFTO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcY3J5cHRvXFxidWlsZFxcbW5lbW9uaWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW5lbW9uaWMgPSB2b2lkIDA7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgYmlwMzkgPSByZXF1aXJlKFwiYmlwMzlcIik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgYmlwMzIgPSByZXF1aXJlKFwiYmlwMzJcIik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgYnM1OGNoZWNrID0gcmVxdWlyZShcImJzNThjaGVja1wiKTtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlci9cIik7XG5jbGFzcyBNbmVtb25pYyB7XG4gICAgc3RhdGljIGdlbmVyYXRlV2FsbGV0KHJuZywgcGF0aCA9IGBtLzQ0Jy8xMTgnLzAnLzAvMGAsIHBhc3N3b3JkID0gXCJcIiwgc3RyZW5ndGggPSAyNTYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1uZW1vbmljID0geWllbGQgTW5lbW9uaWMuZ2VuZXJhdGVTZWVkKHJuZywgc3RyZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgcHJpdktleSA9IE1uZW1vbmljLmdlbmVyYXRlV2FsbGV0RnJvbU1uZW1vbmljKG1uZW1vbmljLCBwYXRoLCBwYXNzd29yZCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHByaXZLZXksXG4gICAgICAgICAgICAgICAgbW5lbW9uaWMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIHZhbGlkYXRlTW5lbW9uaWMobW5lbW9uaWMpIHtcbiAgICAgICAgcmV0dXJuIGJpcDM5LnZhbGlkYXRlTW5lbW9uaWMobW5lbW9uaWMpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2VuZXJhdGVTZWVkKHJuZywgc3RyZW5ndGggPSAxMjgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmIChzdHJlbmd0aCAlIDMyICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgZW50cm9weVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KHN0cmVuZ3RoIC8gOCk7XG4gICAgICAgICAgICBieXRlcyA9IHlpZWxkIHJuZyhieXRlcyk7XG4gICAgICAgICAgICByZXR1cm4gYmlwMzkuZW50cm9weVRvTW5lbW9uaWMoYnVmZmVyXzEuQnVmZmVyLmZyb20oYnl0ZXMpLnRvU3RyaW5nKFwiaGV4XCIpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBnZW5lcmF0ZVdhbGxldEZyb21NbmVtb25pYyhtbmVtb25pYywgcGF0aCA9IGBtLzQ0Jy8xMTgnLzAnLzAvMGAsIHBhc3N3b3JkID0gXCJcIikge1xuICAgICAgICBjb25zdCBzZWVkID0gYmlwMzkubW5lbW9uaWNUb1NlZWRTeW5jKG1uZW1vbmljLCBwYXNzd29yZCk7XG4gICAgICAgIGNvbnN0IG1hc3RlclNlZWQgPSBiaXAzMi5mcm9tU2VlZChzZWVkKTtcbiAgICAgICAgY29uc3QgaGQgPSBtYXN0ZXJTZWVkLmRlcml2ZVBhdGgocGF0aCk7XG4gICAgICAgIGNvbnN0IHByaXZhdGVLZXkgPSBoZC5wcml2YXRlS2V5O1xuICAgICAgICBpZiAoIXByaXZhdGVLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm51bGwgaGQga2V5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcml2YXRlS2V5O1xuICAgIH1cbiAgICBzdGF0aWMgZ2VuZXJhdGVNYXN0ZXJTZWVkRnJvbU1uZW1vbmljKG1uZW1vbmljLCBwYXNzd29yZCA9IFwiXCIpIHtcbiAgICAgICAgY29uc3Qgc2VlZCA9IGJpcDM5Lm1uZW1vbmljVG9TZWVkU3luYyhtbmVtb25pYywgcGFzc3dvcmQpO1xuICAgICAgICBjb25zdCBtYXN0ZXJLZXkgPSBiaXAzMi5mcm9tU2VlZChzZWVkKTtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGJzNThjaGVjay5kZWNvZGUobWFzdGVyS2V5LnRvQmFzZTU4KCkpKTtcbiAgICB9XG4gICAgc3RhdGljIGdlbmVyYXRlUHJpdmF0ZUtleUZyb21NYXN0ZXJTZWVkKHNlZWQsIHBhdGggPSBgbS80NCcvMTE4Jy8wJy8wLzBgKSB7XG4gICAgICAgIGNvbnN0IG1hc3RlclNlZWQgPSBiaXAzMi5mcm9tQmFzZTU4KGJzNThjaGVjay5lbmNvZGUoc2VlZCkpO1xuICAgICAgICBjb25zdCBoZCA9IG1hc3RlclNlZWQuZGVyaXZlUGF0aChwYXRoKTtcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IGhkLnByaXZhdGVLZXk7XG4gICAgICAgIGlmICghcHJpdmF0ZUtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibnVsbCBoZCBrZXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByaXZhdGVLZXk7XG4gICAgfVxufVxuZXhwb3J0cy5NbmVtb25pYyA9IE1uZW1vbmljO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW5lbW9uaWMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/crypto/build/mnemonic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/agoric/swingset/msgs.js":
/*!************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/agoric/swingset/msgs.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgInstallBundleResponse = exports.MsgInstallBundle = exports.MsgProvisionResponse = exports.MsgProvision = exports.MsgWalletSpendActionResponse = exports.MsgWalletSpendAction = exports.MsgWalletActionResponse = exports.MsgWalletAction = exports.MsgDeliverInboundResponse = exports.MsgDeliverInbound = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"agoric.swingset\";\nfunction createBaseMsgDeliverInbound() {\n    return { messages: [], nums: [], ack: \"0\", submitter: new Uint8Array() };\n}\nexports.MsgDeliverInbound = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.messages) {\n            writer.uint32(10).string(v);\n        }\n        writer.uint32(18).fork();\n        for (const v of message.nums) {\n            writer.uint64(v);\n        }\n        writer.ldelim();\n        if (message.ack !== \"0\") {\n            writer.uint32(24).uint64(message.ack);\n        }\n        if (message.submitter.length !== 0) {\n            writer.uint32(34).bytes(message.submitter);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgDeliverInbound();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.messages.push(reader.string());\n                    break;\n                case 2:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.nums.push(longToString(reader.uint64()));\n                        }\n                    }\n                    else {\n                        message.nums.push(longToString(reader.uint64()));\n                    }\n                    break;\n                case 3:\n                    message.ack = longToString(reader.uint64());\n                    break;\n                case 4:\n                    message.submitter = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            messages: Array.isArray(object === null || object === void 0 ? void 0 : object.messages)\n                ? object.messages.map((e) => String(e))\n                : [],\n            nums: Array.isArray(object === null || object === void 0 ? void 0 : object.nums)\n                ? object.nums.map((e) => String(e))\n                : [],\n            ack: isSet(object.ack) ? String(object.ack) : \"0\",\n            submitter: isSet(object.submitter)\n                ? bytesFromBase64(object.submitter)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.messages) {\n            obj.messages = message.messages.map((e) => e);\n        }\n        else {\n            obj.messages = [];\n        }\n        if (message.nums) {\n            obj.nums = message.nums.map((e) => e);\n        }\n        else {\n            obj.nums = [];\n        }\n        message.ack !== undefined && (obj.ack = message.ack);\n        message.submitter !== undefined &&\n            (obj.submitter = base64FromBytes(message.submitter !== undefined ? message.submitter : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseMsgDeliverInbound();\n        message.messages = ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        message.nums = ((_b = object.nums) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];\n        message.ack = (_c = object.ack) !== null && _c !== void 0 ? _c : \"0\";\n        message.submitter = (_d = object.submitter) !== null && _d !== void 0 ? _d : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgDeliverInboundResponse() {\n    return {};\n}\nexports.MsgDeliverInboundResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgDeliverInboundResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgDeliverInboundResponse();\n        return message;\n    },\n};\nfunction createBaseMsgWalletAction() {\n    return { owner: new Uint8Array(), action: \"\" };\n}\nexports.MsgWalletAction = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.owner.length !== 0) {\n            writer.uint32(10).bytes(message.owner);\n        }\n        if (message.action !== \"\") {\n            writer.uint32(18).string(message.action);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgWalletAction();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.owner = reader.bytes();\n                    break;\n                case 2:\n                    message.action = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            owner: isSet(object.owner)\n                ? bytesFromBase64(object.owner)\n                : new Uint8Array(),\n            action: isSet(object.action) ? String(object.action) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.owner !== undefined &&\n            (obj.owner = base64FromBytes(message.owner !== undefined ? message.owner : new Uint8Array()));\n        message.action !== undefined && (obj.action = message.action);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgWalletAction();\n        message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.action = (_b = object.action) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgWalletActionResponse() {\n    return {};\n}\nexports.MsgWalletActionResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgWalletActionResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgWalletActionResponse();\n        return message;\n    },\n};\nfunction createBaseMsgWalletSpendAction() {\n    return { owner: new Uint8Array(), spendAction: \"\" };\n}\nexports.MsgWalletSpendAction = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.owner.length !== 0) {\n            writer.uint32(10).bytes(message.owner);\n        }\n        if (message.spendAction !== \"\") {\n            writer.uint32(18).string(message.spendAction);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgWalletSpendAction();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.owner = reader.bytes();\n                    break;\n                case 2:\n                    message.spendAction = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            owner: isSet(object.owner)\n                ? bytesFromBase64(object.owner)\n                : new Uint8Array(),\n            spendAction: isSet(object.spendAction) ? String(object.spendAction) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.owner !== undefined &&\n            (obj.owner = base64FromBytes(message.owner !== undefined ? message.owner : new Uint8Array()));\n        message.spendAction !== undefined &&\n            (obj.spendAction = message.spendAction);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgWalletSpendAction();\n        message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.spendAction = (_b = object.spendAction) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgWalletSpendActionResponse() {\n    return {};\n}\nexports.MsgWalletSpendActionResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgWalletSpendActionResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgWalletSpendActionResponse();\n        return message;\n    },\n};\nfunction createBaseMsgProvision() {\n    return {\n        nickname: \"\",\n        address: new Uint8Array(),\n        powerFlags: [],\n        submitter: new Uint8Array(),\n    };\n}\nexports.MsgProvision = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.nickname !== \"\") {\n            writer.uint32(10).string(message.nickname);\n        }\n        if (message.address.length !== 0) {\n            writer.uint32(18).bytes(message.address);\n        }\n        for (const v of message.powerFlags) {\n            writer.uint32(26).string(v);\n        }\n        if (message.submitter.length !== 0) {\n            writer.uint32(34).bytes(message.submitter);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgProvision();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.nickname = reader.string();\n                    break;\n                case 2:\n                    message.address = reader.bytes();\n                    break;\n                case 3:\n                    message.powerFlags.push(reader.string());\n                    break;\n                case 4:\n                    message.submitter = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            nickname: isSet(object.nickname) ? String(object.nickname) : \"\",\n            address: isSet(object.address)\n                ? bytesFromBase64(object.address)\n                : new Uint8Array(),\n            powerFlags: Array.isArray(object === null || object === void 0 ? void 0 : object.powerFlags)\n                ? object.powerFlags.map((e) => String(e))\n                : [],\n            submitter: isSet(object.submitter)\n                ? bytesFromBase64(object.submitter)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.nickname !== undefined && (obj.nickname = message.nickname);\n        message.address !== undefined &&\n            (obj.address = base64FromBytes(message.address !== undefined ? message.address : new Uint8Array()));\n        if (message.powerFlags) {\n            obj.powerFlags = message.powerFlags.map((e) => e);\n        }\n        else {\n            obj.powerFlags = [];\n        }\n        message.submitter !== undefined &&\n            (obj.submitter = base64FromBytes(message.submitter !== undefined ? message.submitter : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseMsgProvision();\n        message.nickname = (_a = object.nickname) !== null && _a !== void 0 ? _a : \"\";\n        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.powerFlags = ((_c = object.powerFlags) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];\n        message.submitter = (_d = object.submitter) !== null && _d !== void 0 ? _d : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgProvisionResponse() {\n    return {};\n}\nexports.MsgProvisionResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgProvisionResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgProvisionResponse();\n        return message;\n    },\n};\nfunction createBaseMsgInstallBundle() {\n    return {\n        bundle: \"\",\n        submitter: new Uint8Array(),\n        compressedBundle: new Uint8Array(),\n        uncompressedSize: \"0\",\n    };\n}\nexports.MsgInstallBundle = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.bundle !== \"\") {\n            writer.uint32(10).string(message.bundle);\n        }\n        if (message.submitter.length !== 0) {\n            writer.uint32(18).bytes(message.submitter);\n        }\n        if (message.compressedBundle.length !== 0) {\n            writer.uint32(26).bytes(message.compressedBundle);\n        }\n        if (message.uncompressedSize !== \"0\") {\n            writer.uint32(32).int64(message.uncompressedSize);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstallBundle();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bundle = reader.string();\n                    break;\n                case 2:\n                    message.submitter = reader.bytes();\n                    break;\n                case 3:\n                    message.compressedBundle = reader.bytes();\n                    break;\n                case 4:\n                    message.uncompressedSize = longToString(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bundle: isSet(object.bundle) ? String(object.bundle) : \"\",\n            submitter: isSet(object.submitter)\n                ? bytesFromBase64(object.submitter)\n                : new Uint8Array(),\n            compressedBundle: isSet(object.compressedBundle)\n                ? bytesFromBase64(object.compressedBundle)\n                : new Uint8Array(),\n            uncompressedSize: isSet(object.uncompressedSize)\n                ? String(object.uncompressedSize)\n                : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bundle !== undefined && (obj.bundle = message.bundle);\n        message.submitter !== undefined &&\n            (obj.submitter = base64FromBytes(message.submitter !== undefined ? message.submitter : new Uint8Array()));\n        message.compressedBundle !== undefined &&\n            (obj.compressedBundle = base64FromBytes(message.compressedBundle !== undefined\n                ? message.compressedBundle\n                : new Uint8Array()));\n        message.uncompressedSize !== undefined &&\n            (obj.uncompressedSize = message.uncompressedSize);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseMsgInstallBundle();\n        message.bundle = (_a = object.bundle) !== null && _a !== void 0 ? _a : \"\";\n        message.submitter = (_b = object.submitter) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.compressedBundle = (_c = object.compressedBundle) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.uncompressedSize = (_d = object.uncompressedSize) !== null && _d !== void 0 ? _d : \"0\";\n        return message;\n    },\n};\nfunction createBaseMsgInstallBundleResponse() {\n    return {};\n}\nexports.MsgInstallBundleResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstallBundleResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgInstallBundleResponse();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=msgs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/agoric/swingset/msgs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/authz/v1beta1/authz.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/authz/v1beta1/authz.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Grant = exports.GenericAuthorization = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst timestamp_1 = __webpack_require__(/*! ../../../google/protobuf/timestamp */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/timestamp.js\");\nconst any_1 = __webpack_require__(/*! ../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nexports.protobufPackage = \"cosmos.authz.v1beta1\";\nfunction createBaseGenericAuthorization() {\n    return { msg: \"\" };\n}\nexports.GenericAuthorization = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.msg !== \"\") {\n            writer.uint32(10).string(message.msg);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGenericAuthorization();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.msg = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            msg: isSet(object.msg) ? String(object.msg) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.msg !== undefined && (obj.msg = message.msg);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGenericAuthorization();\n        message.msg = (_a = object.msg) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseGrant() {\n    return { authorization: undefined, expiration: undefined };\n}\nexports.Grant = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.authorization !== undefined) {\n            any_1.Any.encode(message.authorization, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.expiration !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.expiration), writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGrant();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.authorization = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.expiration = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            authorization: isSet(object.authorization)\n                ? any_1.Any.fromJSON(object.authorization)\n                : undefined,\n            expiration: isSet(object.expiration)\n                ? fromJsonTimestamp(object.expiration)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.authorization !== undefined &&\n            (obj.authorization = message.authorization\n                ? any_1.Any.toJSON(message.authorization)\n                : undefined);\n        message.expiration !== undefined &&\n            (obj.expiration = message.expiration.toISOString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseGrant();\n        message.authorization =\n            object.authorization !== undefined && object.authorization !== null\n                ? any_1.Any.fromPartial(object.authorization)\n                : undefined;\n        message.expiration = (_a = object.expiration) !== null && _a !== void 0 ? _a : undefined;\n        return message;\n    },\n};\nfunction toTimestamp(date) {\n    const seconds = Math.trunc(date.getTime() / 1000).toString();\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = Number(t.seconds) * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=authz.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/authz/v1beta1/authz.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/authz/v1beta1/tx.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/authz/v1beta1/tx.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgRevokeResponse = exports.MsgRevoke = exports.MsgGrantResponse = exports.MsgExec = exports.MsgExecResponse = exports.MsgGrant = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst authz_1 = __webpack_require__(/*! ../../../cosmos/authz/v1beta1/authz */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/authz/v1beta1/authz.js\");\nconst any_1 = __webpack_require__(/*! ../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nexports.protobufPackage = \"cosmos.authz.v1beta1\";\nfunction createBaseMsgGrant() {\n    return { granter: \"\", grantee: \"\", grant: undefined };\n}\nexports.MsgGrant = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.granter !== \"\") {\n            writer.uint32(10).string(message.granter);\n        }\n        if (message.grantee !== \"\") {\n            writer.uint32(18).string(message.grantee);\n        }\n        if (message.grant !== undefined) {\n            authz_1.Grant.encode(message.grant, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgGrant();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.granter = reader.string();\n                    break;\n                case 2:\n                    message.grantee = reader.string();\n                    break;\n                case 3:\n                    message.grant = authz_1.Grant.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            granter: isSet(object.granter) ? String(object.granter) : \"\",\n            grantee: isSet(object.grantee) ? String(object.grantee) : \"\",\n            grant: isSet(object.grant) ? authz_1.Grant.fromJSON(object.grant) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.granter !== undefined && (obj.granter = message.granter);\n        message.grantee !== undefined && (obj.grantee = message.grantee);\n        message.grant !== undefined &&\n            (obj.grant = message.grant ? authz_1.Grant.toJSON(message.grant) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgGrant();\n        message.granter = (_a = object.granter) !== null && _a !== void 0 ? _a : \"\";\n        message.grantee = (_b = object.grantee) !== null && _b !== void 0 ? _b : \"\";\n        message.grant =\n            object.grant !== undefined && object.grant !== null\n                ? authz_1.Grant.fromPartial(object.grant)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseMsgExecResponse() {\n    return { results: [] };\n}\nexports.MsgExecResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.results) {\n            writer.uint32(10).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgExecResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.results.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            results: Array.isArray(object === null || object === void 0 ? void 0 : object.results)\n                ? object.results.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.results) {\n            obj.results = message.results.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.results = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMsgExecResponse();\n        message.results = ((_a = object.results) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseMsgExec() {\n    return { grantee: \"\", msgs: [] };\n}\nexports.MsgExec = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.grantee !== \"\") {\n            writer.uint32(10).string(message.grantee);\n        }\n        for (const v of message.msgs) {\n            any_1.Any.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgExec();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.grantee = reader.string();\n                    break;\n                case 2:\n                    message.msgs.push(any_1.Any.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            grantee: isSet(object.grantee) ? String(object.grantee) : \"\",\n            msgs: Array.isArray(object === null || object === void 0 ? void 0 : object.msgs)\n                ? object.msgs.map((e) => any_1.Any.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.grantee !== undefined && (obj.grantee = message.grantee);\n        if (message.msgs) {\n            obj.msgs = message.msgs.map((e) => (e ? any_1.Any.toJSON(e) : undefined));\n        }\n        else {\n            obj.msgs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgExec();\n        message.grantee = (_a = object.grantee) !== null && _a !== void 0 ? _a : \"\";\n        message.msgs = ((_b = object.msgs) === null || _b === void 0 ? void 0 : _b.map((e) => any_1.Any.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseMsgGrantResponse() {\n    return {};\n}\nexports.MsgGrantResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgGrantResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgGrantResponse();\n        return message;\n    },\n};\nfunction createBaseMsgRevoke() {\n    return { granter: \"\", grantee: \"\", msgTypeUrl: \"\" };\n}\nexports.MsgRevoke = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.granter !== \"\") {\n            writer.uint32(10).string(message.granter);\n        }\n        if (message.grantee !== \"\") {\n            writer.uint32(18).string(message.grantee);\n        }\n        if (message.msgTypeUrl !== \"\") {\n            writer.uint32(26).string(message.msgTypeUrl);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgRevoke();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.granter = reader.string();\n                    break;\n                case 2:\n                    message.grantee = reader.string();\n                    break;\n                case 3:\n                    message.msgTypeUrl = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            granter: isSet(object.granter) ? String(object.granter) : \"\",\n            grantee: isSet(object.grantee) ? String(object.grantee) : \"\",\n            msgTypeUrl: isSet(object.msgTypeUrl) ? String(object.msgTypeUrl) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.granter !== undefined && (obj.granter = message.granter);\n        message.grantee !== undefined && (obj.grantee = message.grantee);\n        message.msgTypeUrl !== undefined && (obj.msgTypeUrl = message.msgTypeUrl);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMsgRevoke();\n        message.granter = (_a = object.granter) !== null && _a !== void 0 ? _a : \"\";\n        message.grantee = (_b = object.grantee) !== null && _b !== void 0 ? _b : \"\";\n        message.msgTypeUrl = (_c = object.msgTypeUrl) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgRevokeResponse() {\n    return {};\n}\nexports.MsgRevokeResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgRevokeResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgRevokeResponse();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=tx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/authz/v1beta1/tx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/authz.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/authz.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SendAuthorization = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nexports.protobufPackage = \"cosmos.bank.v1beta1\";\nfunction createBaseSendAuthorization() {\n    return { spendLimit: [] };\n}\nexports.SendAuthorization = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.spendLimit) {\n            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendAuthorization();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.spendLimit.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            spendLimit: Array.isArray(object === null || object === void 0 ? void 0 : object.spendLimit)\n                ? object.spendLimit.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.spendLimit) {\n            obj.spendLimit = message.spendLimit.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);\n        }\n        else {\n            obj.spendLimit = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSendAuthorization();\n        message.spendLimit =\n            ((_a = object.spendLimit) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        return message;\n    },\n};\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=authz.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm90by10eXBlcy9jb3Ntb3MvYmFuay92MWJldGExL2F1dGh6LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcsdUJBQXVCO0FBQ25EO0FBQ0EsK0JBQStCLG1CQUFPLENBQUMsbURBQU07QUFDN0Msa0NBQWtDLG1CQUFPLENBQUMsc0VBQW9CO0FBQzlELGVBQWUsbUJBQU8sQ0FBQyxxSEFBbUM7QUFDMUQsdUJBQXVCO0FBQ3ZCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm90by10eXBlc1xcY29zbW9zXFxiYW5rXFx2MWJldGExXFxhdXRoei5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VuZEF1dGhvcml6YXRpb24gPSBleHBvcnRzLnByb3RvYnVmUGFja2FnZSA9IHZvaWQgMDtcbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBsb25nXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvbmdcIikpO1xuY29uc3QgbWluaW1hbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwcm90b2J1ZmpzL21pbmltYWxcIikpO1xuY29uc3QgY29pbl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Nvc21vcy9iYXNlL3YxYmV0YTEvY29pblwiKTtcbmV4cG9ydHMucHJvdG9idWZQYWNrYWdlID0gXCJjb3Ntb3MuYmFuay52MWJldGExXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlU2VuZEF1dGhvcml6YXRpb24oKSB7XG4gICAgcmV0dXJuIHsgc3BlbmRMaW1pdDogW10gfTtcbn1cbmV4cG9ydHMuU2VuZEF1dGhvcml6YXRpb24gPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zcGVuZExpbWl0KSB7XG4gICAgICAgICAgICBjb2luXzEuQ29pbi5lbmNvZGUodiwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VTZW5kQXV0aG9yaXphdGlvbigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3BlbmRMaW1pdC5wdXNoKGNvaW5fMS5Db2luLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzcGVuZExpbWl0OiBBcnJheS5pc0FycmF5KG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iamVjdC5zcGVuZExpbWl0KVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LnNwZW5kTGltaXQubWFwKChlKSA9PiBjb2luXzEuQ29pbi5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLnNwZW5kTGltaXQpIHtcbiAgICAgICAgICAgIG9iai5zcGVuZExpbWl0ID0gbWVzc2FnZS5zcGVuZExpbWl0Lm1hcCgoZSkgPT4gZSA/IGNvaW5fMS5Db2luLnRvSlNPTihlKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmouc3BlbmRMaW1pdCA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVNlbmRBdXRob3JpemF0aW9uKCk7XG4gICAgICAgIG1lc3NhZ2Uuc3BlbmRMaW1pdCA9XG4gICAgICAgICAgICAoKF9hID0gb2JqZWN0LnNwZW5kTGltaXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXAoKGUpID0+IGNvaW5fMS5Db2luLmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuaWYgKG1pbmltYWxfMS5kZWZhdWx0LnV0aWwuTG9uZyAhPT0gbG9uZ18xLmRlZmF1bHQpIHtcbiAgICBtaW5pbWFsXzEuZGVmYXVsdC51dGlsLkxvbmcgPSBsb25nXzEuZGVmYXVsdDtcbiAgICBtaW5pbWFsXzEuZGVmYXVsdC5jb25maWd1cmUoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGh6LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/authz.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/bank.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/bank.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Metadata = exports.DenomUnit = exports.Supply = exports.Output = exports.Input = exports.SendEnabled = exports.Params = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nexports.protobufPackage = \"cosmos.bank.v1beta1\";\nfunction createBaseParams() {\n    return { sendEnabled: [], defaultSendEnabled: false };\n}\nexports.Params = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.sendEnabled) {\n            exports.SendEnabled.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.defaultSendEnabled === true) {\n            writer.uint32(16).bool(message.defaultSendEnabled);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParams();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sendEnabled.push(exports.SendEnabled.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.defaultSendEnabled = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sendEnabled: Array.isArray(object === null || object === void 0 ? void 0 : object.sendEnabled)\n                ? object.sendEnabled.map((e) => exports.SendEnabled.fromJSON(e))\n                : [],\n            defaultSendEnabled: isSet(object.defaultSendEnabled)\n                ? Boolean(object.defaultSendEnabled)\n                : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.sendEnabled) {\n            obj.sendEnabled = message.sendEnabled.map((e) => e ? exports.SendEnabled.toJSON(e) : undefined);\n        }\n        else {\n            obj.sendEnabled = [];\n        }\n        message.defaultSendEnabled !== undefined &&\n            (obj.defaultSendEnabled = message.defaultSendEnabled);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseParams();\n        message.sendEnabled =\n            ((_a = object.sendEnabled) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SendEnabled.fromPartial(e))) || [];\n        message.defaultSendEnabled = (_b = object.defaultSendEnabled) !== null && _b !== void 0 ? _b : false;\n        return message;\n    },\n};\nfunction createBaseSendEnabled() {\n    return { denom: \"\", enabled: false };\n}\nexports.SendEnabled = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.denom !== \"\") {\n            writer.uint32(10).string(message.denom);\n        }\n        if (message.enabled === true) {\n            writer.uint32(16).bool(message.enabled);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendEnabled();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.denom = reader.string();\n                    break;\n                case 2:\n                    message.enabled = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            denom: isSet(object.denom) ? String(object.denom) : \"\",\n            enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.denom !== undefined && (obj.denom = message.denom);\n        message.enabled !== undefined && (obj.enabled = message.enabled);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseSendEnabled();\n        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : \"\";\n        message.enabled = (_b = object.enabled) !== null && _b !== void 0 ? _b : false;\n        return message;\n    },\n};\nfunction createBaseInput() {\n    return { address: \"\", coins: [] };\n}\nexports.Input = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        for (const v of message.coins) {\n            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            address: isSet(object.address) ? String(object.address) : \"\",\n            coins: Array.isArray(object === null || object === void 0 ? void 0 : object.coins)\n                ? object.coins.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        if (message.coins) {\n            obj.coins = message.coins.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.coins = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseInput();\n        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : \"\";\n        message.coins = ((_b = object.coins) === null || _b === void 0 ? void 0 : _b.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseOutput() {\n    return { address: \"\", coins: [] };\n}\nexports.Output = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        for (const v of message.coins) {\n            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseOutput();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            address: isSet(object.address) ? String(object.address) : \"\",\n            coins: Array.isArray(object === null || object === void 0 ? void 0 : object.coins)\n                ? object.coins.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        if (message.coins) {\n            obj.coins = message.coins.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.coins = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseOutput();\n        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : \"\";\n        message.coins = ((_b = object.coins) === null || _b === void 0 ? void 0 : _b.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSupply() {\n    return { total: [] };\n}\nexports.Supply = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.total) {\n            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSupply();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.total.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            total: Array.isArray(object === null || object === void 0 ? void 0 : object.total)\n                ? object.total.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.total) {\n            obj.total = message.total.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.total = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSupply();\n        message.total = ((_a = object.total) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseDenomUnit() {\n    return { denom: \"\", exponent: 0, aliases: [] };\n}\nexports.DenomUnit = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.denom !== \"\") {\n            writer.uint32(10).string(message.denom);\n        }\n        if (message.exponent !== 0) {\n            writer.uint32(16).uint32(message.exponent);\n        }\n        for (const v of message.aliases) {\n            writer.uint32(26).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDenomUnit();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.denom = reader.string();\n                    break;\n                case 2:\n                    message.exponent = reader.uint32();\n                    break;\n                case 3:\n                    message.aliases.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            denom: isSet(object.denom) ? String(object.denom) : \"\",\n            exponent: isSet(object.exponent) ? Number(object.exponent) : 0,\n            aliases: Array.isArray(object === null || object === void 0 ? void 0 : object.aliases)\n                ? object.aliases.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.denom !== undefined && (obj.denom = message.denom);\n        message.exponent !== undefined &&\n            (obj.exponent = Math.round(message.exponent));\n        if (message.aliases) {\n            obj.aliases = message.aliases.map((e) => e);\n        }\n        else {\n            obj.aliases = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseDenomUnit();\n        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : \"\";\n        message.exponent = (_b = object.exponent) !== null && _b !== void 0 ? _b : 0;\n        message.aliases = ((_c = object.aliases) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseMetadata() {\n    return {\n        description: \"\",\n        denomUnits: [],\n        base: \"\",\n        display: \"\",\n        name: \"\",\n        symbol: \"\",\n    };\n}\nexports.Metadata = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.description !== \"\") {\n            writer.uint32(10).string(message.description);\n        }\n        for (const v of message.denomUnits) {\n            exports.DenomUnit.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.base !== \"\") {\n            writer.uint32(26).string(message.base);\n        }\n        if (message.display !== \"\") {\n            writer.uint32(34).string(message.display);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(42).string(message.name);\n        }\n        if (message.symbol !== \"\") {\n            writer.uint32(50).string(message.symbol);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMetadata();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.description = reader.string();\n                    break;\n                case 2:\n                    message.denomUnits.push(exports.DenomUnit.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.base = reader.string();\n                    break;\n                case 4:\n                    message.display = reader.string();\n                    break;\n                case 5:\n                    message.name = reader.string();\n                    break;\n                case 6:\n                    message.symbol = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            description: isSet(object.description) ? String(object.description) : \"\",\n            denomUnits: Array.isArray(object === null || object === void 0 ? void 0 : object.denomUnits)\n                ? object.denomUnits.map((e) => exports.DenomUnit.fromJSON(e))\n                : [],\n            base: isSet(object.base) ? String(object.base) : \"\",\n            display: isSet(object.display) ? String(object.display) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            symbol: isSet(object.symbol) ? String(object.symbol) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.description !== undefined &&\n            (obj.description = message.description);\n        if (message.denomUnits) {\n            obj.denomUnits = message.denomUnits.map((e) => e ? exports.DenomUnit.toJSON(e) : undefined);\n        }\n        else {\n            obj.denomUnits = [];\n        }\n        message.base !== undefined && (obj.base = message.base);\n        message.display !== undefined && (obj.display = message.display);\n        message.name !== undefined && (obj.name = message.name);\n        message.symbol !== undefined && (obj.symbol = message.symbol);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseMetadata();\n        message.description = (_a = object.description) !== null && _a !== void 0 ? _a : \"\";\n        message.denomUnits =\n            ((_b = object.denomUnits) === null || _b === void 0 ? void 0 : _b.map((e) => exports.DenomUnit.fromPartial(e))) || [];\n        message.base = (_c = object.base) !== null && _c !== void 0 ? _c : \"\";\n        message.display = (_d = object.display) !== null && _d !== void 0 ? _d : \"\";\n        message.name = (_e = object.name) !== null && _e !== void 0 ? _e : \"\";\n        message.symbol = (_f = object.symbol) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    },\n};\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=bank.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/bank.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/tx.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/tx.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgMultiSendResponse = exports.MsgMultiSend = exports.MsgSendResponse = exports.MsgSend = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nconst bank_1 = __webpack_require__(/*! ../../../cosmos/bank/v1beta1/bank */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/bank.js\");\nexports.protobufPackage = \"cosmos.bank.v1beta1\";\nfunction createBaseMsgSend() {\n    return { fromAddress: \"\", toAddress: \"\", amount: [] };\n}\nexports.MsgSend = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.fromAddress !== \"\") {\n            writer.uint32(10).string(message.fromAddress);\n        }\n        if (message.toAddress !== \"\") {\n            writer.uint32(18).string(message.toAddress);\n        }\n        for (const v of message.amount) {\n            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgSend();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.fromAddress = reader.string();\n                    break;\n                case 2:\n                    message.toAddress = reader.string();\n                    break;\n                case 3:\n                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            fromAddress: isSet(object.fromAddress) ? String(object.fromAddress) : \"\",\n            toAddress: isSet(object.toAddress) ? String(object.toAddress) : \"\",\n            amount: Array.isArray(object === null || object === void 0 ? void 0 : object.amount)\n                ? object.amount.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.fromAddress !== undefined &&\n            (obj.fromAddress = message.fromAddress);\n        message.toAddress !== undefined && (obj.toAddress = message.toAddress);\n        if (message.amount) {\n            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.amount = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMsgSend();\n        message.fromAddress = (_a = object.fromAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.toAddress = (_b = object.toAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.amount = ((_c = object.amount) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseMsgSendResponse() {\n    return {};\n}\nexports.MsgSendResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgSendResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgSendResponse();\n        return message;\n    },\n};\nfunction createBaseMsgMultiSend() {\n    return { inputs: [], outputs: [] };\n}\nexports.MsgMultiSend = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.inputs) {\n            bank_1.Input.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.outputs) {\n            bank_1.Output.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgMultiSend();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.inputs.push(bank_1.Input.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.outputs.push(bank_1.Output.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            inputs: Array.isArray(object === null || object === void 0 ? void 0 : object.inputs)\n                ? object.inputs.map((e) => bank_1.Input.fromJSON(e))\n                : [],\n            outputs: Array.isArray(object === null || object === void 0 ? void 0 : object.outputs)\n                ? object.outputs.map((e) => bank_1.Output.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.inputs) {\n            obj.inputs = message.inputs.map((e) => (e ? bank_1.Input.toJSON(e) : undefined));\n        }\n        else {\n            obj.inputs = [];\n        }\n        if (message.outputs) {\n            obj.outputs = message.outputs.map((e) => e ? bank_1.Output.toJSON(e) : undefined);\n        }\n        else {\n            obj.outputs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgMultiSend();\n        message.inputs = ((_a = object.inputs) === null || _a === void 0 ? void 0 : _a.map((e) => bank_1.Input.fromPartial(e))) || [];\n        message.outputs = ((_b = object.outputs) === null || _b === void 0 ? void 0 : _b.map((e) => bank_1.Output.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseMsgMultiSendResponse() {\n    return {};\n}\nexports.MsgMultiSendResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgMultiSendResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgMultiSendResponse();\n        return message;\n    },\n};\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=tx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/bank/v1beta1/tx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DecProto = exports.IntProto = exports.DecCoin = exports.Coin = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"cosmos.base.v1beta1\";\nfunction createBaseCoin() {\n    return { denom: \"\", amount: \"\" };\n}\nexports.Coin = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.denom !== \"\") {\n            writer.uint32(10).string(message.denom);\n        }\n        if (message.amount !== \"\") {\n            writer.uint32(18).string(message.amount);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCoin();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.denom = reader.string();\n                    break;\n                case 2:\n                    message.amount = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            denom: isSet(object.denom) ? String(object.denom) : \"\",\n            amount: isSet(object.amount) ? String(object.amount) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.denom !== undefined && (obj.denom = message.denom);\n        message.amount !== undefined && (obj.amount = message.amount);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseCoin();\n        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : \"\";\n        message.amount = (_b = object.amount) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseDecCoin() {\n    return { denom: \"\", amount: \"\" };\n}\nexports.DecCoin = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.denom !== \"\") {\n            writer.uint32(10).string(message.denom);\n        }\n        if (message.amount !== \"\") {\n            writer.uint32(18).string(message.amount);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecCoin();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.denom = reader.string();\n                    break;\n                case 2:\n                    message.amount = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            denom: isSet(object.denom) ? String(object.denom) : \"\",\n            amount: isSet(object.amount) ? String(object.amount) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.denom !== undefined && (obj.denom = message.denom);\n        message.amount !== undefined && (obj.amount = message.amount);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDecCoin();\n        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : \"\";\n        message.amount = (_b = object.amount) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseIntProto() {\n    return { int: \"\" };\n}\nexports.IntProto = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.int !== \"\") {\n            writer.uint32(10).string(message.int);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIntProto();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.int = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            int: isSet(object.int) ? String(object.int) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.int !== undefined && (obj.int = message.int);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseIntProto();\n        message.int = (_a = object.int) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseDecProto() {\n    return { dec: \"\" };\n}\nexports.DecProto = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.dec !== \"\") {\n            writer.uint32(10).string(message.dec);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecProto();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.dec = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            dec: isSet(object.dec) ? String(object.dec) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.dec !== undefined && (obj.dec = message.dec);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDecProto();\n        message.dec = (_a = object.dec) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=coin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/crypto/multisig/v1beta1/multisig.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/crypto/multisig/v1beta1/multisig.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CompactBitArray = exports.MultiSignature = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"cosmos.crypto.multisig.v1beta1\";\nfunction createBaseMultiSignature() {\n    return { signatures: [] };\n}\nexports.MultiSignature = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.signatures) {\n            writer.uint32(10).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMultiSignature();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signatures.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            signatures: Array.isArray(object === null || object === void 0 ? void 0 : object.signatures)\n                ? object.signatures.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMultiSignature();\n        message.signatures = ((_a = object.signatures) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseCompactBitArray() {\n    return { extraBitsStored: 0, elems: new Uint8Array() };\n}\nexports.CompactBitArray = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.extraBitsStored !== 0) {\n            writer.uint32(8).uint32(message.extraBitsStored);\n        }\n        if (message.elems.length !== 0) {\n            writer.uint32(18).bytes(message.elems);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCompactBitArray();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.extraBitsStored = reader.uint32();\n                    break;\n                case 2:\n                    message.elems = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            extraBitsStored: isSet(object.extraBitsStored)\n                ? Number(object.extraBitsStored)\n                : 0,\n            elems: isSet(object.elems)\n                ? bytesFromBase64(object.elems)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.extraBitsStored !== undefined &&\n            (obj.extraBitsStored = Math.round(message.extraBitsStored));\n        message.elems !== undefined &&\n            (obj.elems = base64FromBytes(message.elems !== undefined ? message.elems : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseCompactBitArray();\n        message.extraBitsStored = (_a = object.extraBitsStored) !== null && _a !== void 0 ? _a : 0;\n        message.elems = (_b = object.elems) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=multisig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/crypto/multisig/v1beta1/multisig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/distribution/v1beta1/tx.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/distribution/v1beta1/tx.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgFundCommunityPoolResponse = exports.MsgFundCommunityPool = exports.MsgWithdrawValidatorCommissionResponse = exports.MsgWithdrawValidatorCommission = exports.MsgWithdrawDelegatorRewardResponse = exports.MsgWithdrawDelegatorReward = exports.MsgSetWithdrawAddressResponse = exports.MsgSetWithdrawAddress = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nexports.protobufPackage = \"cosmos.distribution.v1beta1\";\nfunction createBaseMsgSetWithdrawAddress() {\n    return { delegatorAddress: \"\", withdrawAddress: \"\" };\n}\nexports.MsgSetWithdrawAddress = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.withdrawAddress !== \"\") {\n            writer.uint32(18).string(message.withdrawAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgSetWithdrawAddress();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.withdrawAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            withdrawAddress: isSet(object.withdrawAddress)\n                ? String(object.withdrawAddress)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.withdrawAddress !== undefined &&\n            (obj.withdrawAddress = message.withdrawAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgSetWithdrawAddress();\n        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.withdrawAddress = (_b = object.withdrawAddress) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgSetWithdrawAddressResponse() {\n    return {};\n}\nexports.MsgSetWithdrawAddressResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgSetWithdrawAddressResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgSetWithdrawAddressResponse();\n        return message;\n    },\n};\nfunction createBaseMsgWithdrawDelegatorReward() {\n    return { delegatorAddress: \"\", validatorAddress: \"\" };\n}\nexports.MsgWithdrawDelegatorReward = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(18).string(message.validatorAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgWithdrawDelegatorReward();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.validatorAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            validatorAddress: isSet(object.validatorAddress)\n                ? String(object.validatorAddress)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgWithdrawDelegatorReward();\n        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.validatorAddress = (_b = object.validatorAddress) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgWithdrawDelegatorRewardResponse() {\n    return {};\n}\nexports.MsgWithdrawDelegatorRewardResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgWithdrawDelegatorRewardResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgWithdrawDelegatorRewardResponse();\n        return message;\n    },\n};\nfunction createBaseMsgWithdrawValidatorCommission() {\n    return { validatorAddress: \"\" };\n}\nexports.MsgWithdrawValidatorCommission = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(10).string(message.validatorAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgWithdrawValidatorCommission();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validatorAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            validatorAddress: isSet(object.validatorAddress)\n                ? String(object.validatorAddress)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMsgWithdrawValidatorCommission();\n        message.validatorAddress = (_a = object.validatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgWithdrawValidatorCommissionResponse() {\n    return {};\n}\nexports.MsgWithdrawValidatorCommissionResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgWithdrawValidatorCommissionResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgWithdrawValidatorCommissionResponse();\n        return message;\n    },\n};\nfunction createBaseMsgFundCommunityPool() {\n    return { amount: [], depositor: \"\" };\n}\nexports.MsgFundCommunityPool = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.amount) {\n            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.depositor !== \"\") {\n            writer.uint32(18).string(message.depositor);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgFundCommunityPool();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.depositor = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            amount: Array.isArray(object === null || object === void 0 ? void 0 : object.amount)\n                ? object.amount.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n            depositor: isSet(object.depositor) ? String(object.depositor) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.amount) {\n            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.amount = [];\n        }\n        message.depositor !== undefined && (obj.depositor = message.depositor);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgFundCommunityPool();\n        message.amount = ((_a = object.amount) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        message.depositor = (_b = object.depositor) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgFundCommunityPoolResponse() {\n    return {};\n}\nexports.MsgFundCommunityPoolResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgFundCommunityPoolResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgFundCommunityPoolResponse();\n        return message;\n    },\n};\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=tx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/distribution/v1beta1/tx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/gov/v1beta1/gov.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/gov/v1beta1/gov.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TallyParams = exports.VotingParams = exports.DepositParams = exports.Vote = exports.TallyResult = exports.Proposal = exports.Deposit = exports.TextProposal = exports.WeightedVoteOption = exports.proposalStatusToJSON = exports.proposalStatusFromJSON = exports.ProposalStatus = exports.voteOptionToJSON = exports.voteOptionFromJSON = exports.VoteOption = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst timestamp_1 = __webpack_require__(/*! ../../../google/protobuf/timestamp */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/timestamp.js\");\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nconst any_1 = __webpack_require__(/*! ../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nconst duration_1 = __webpack_require__(/*! ../../../google/protobuf/duration */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/duration.js\");\nexports.protobufPackage = \"cosmos.gov.v1beta1\";\n/** VoteOption enumerates the valid vote options for a given governance proposal. */\nvar VoteOption;\n(function (VoteOption) {\n    /** VOTE_OPTION_UNSPECIFIED - VOTE_OPTION_UNSPECIFIED defines a no-op vote option. */\n    VoteOption[VoteOption[\"VOTE_OPTION_UNSPECIFIED\"] = 0] = \"VOTE_OPTION_UNSPECIFIED\";\n    /** VOTE_OPTION_YES - VOTE_OPTION_YES defines a yes vote option. */\n    VoteOption[VoteOption[\"VOTE_OPTION_YES\"] = 1] = \"VOTE_OPTION_YES\";\n    /** VOTE_OPTION_ABSTAIN - VOTE_OPTION_ABSTAIN defines an abstain vote option. */\n    VoteOption[VoteOption[\"VOTE_OPTION_ABSTAIN\"] = 2] = \"VOTE_OPTION_ABSTAIN\";\n    /** VOTE_OPTION_NO - VOTE_OPTION_NO defines a no vote option. */\n    VoteOption[VoteOption[\"VOTE_OPTION_NO\"] = 3] = \"VOTE_OPTION_NO\";\n    /** VOTE_OPTION_NO_WITH_VETO - VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option. */\n    VoteOption[VoteOption[\"VOTE_OPTION_NO_WITH_VETO\"] = 4] = \"VOTE_OPTION_NO_WITH_VETO\";\n    VoteOption[VoteOption[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(VoteOption = exports.VoteOption || (exports.VoteOption = {}));\nfunction voteOptionFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"VOTE_OPTION_UNSPECIFIED\":\n            return VoteOption.VOTE_OPTION_UNSPECIFIED;\n        case 1:\n        case \"VOTE_OPTION_YES\":\n            return VoteOption.VOTE_OPTION_YES;\n        case 2:\n        case \"VOTE_OPTION_ABSTAIN\":\n            return VoteOption.VOTE_OPTION_ABSTAIN;\n        case 3:\n        case \"VOTE_OPTION_NO\":\n            return VoteOption.VOTE_OPTION_NO;\n        case 4:\n        case \"VOTE_OPTION_NO_WITH_VETO\":\n            return VoteOption.VOTE_OPTION_NO_WITH_VETO;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return VoteOption.UNRECOGNIZED;\n    }\n}\nexports.voteOptionFromJSON = voteOptionFromJSON;\nfunction voteOptionToJSON(object) {\n    switch (object) {\n        case VoteOption.VOTE_OPTION_UNSPECIFIED:\n            return \"VOTE_OPTION_UNSPECIFIED\";\n        case VoteOption.VOTE_OPTION_YES:\n            return \"VOTE_OPTION_YES\";\n        case VoteOption.VOTE_OPTION_ABSTAIN:\n            return \"VOTE_OPTION_ABSTAIN\";\n        case VoteOption.VOTE_OPTION_NO:\n            return \"VOTE_OPTION_NO\";\n        case VoteOption.VOTE_OPTION_NO_WITH_VETO:\n            return \"VOTE_OPTION_NO_WITH_VETO\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.voteOptionToJSON = voteOptionToJSON;\n/** ProposalStatus enumerates the valid statuses of a proposal. */\nvar ProposalStatus;\n(function (ProposalStatus) {\n    /** PROPOSAL_STATUS_UNSPECIFIED - PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status. */\n    ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_UNSPECIFIED\"] = 0] = \"PROPOSAL_STATUS_UNSPECIFIED\";\n    /**\n     * PROPOSAL_STATUS_DEPOSIT_PERIOD - PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit\n     * period.\n     */\n    ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_DEPOSIT_PERIOD\"] = 1] = \"PROPOSAL_STATUS_DEPOSIT_PERIOD\";\n    /**\n     * PROPOSAL_STATUS_VOTING_PERIOD - PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting\n     * period.\n     */\n    ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_VOTING_PERIOD\"] = 2] = \"PROPOSAL_STATUS_VOTING_PERIOD\";\n    /**\n     * PROPOSAL_STATUS_PASSED - PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has\n     * passed.\n     */\n    ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_PASSED\"] = 3] = \"PROPOSAL_STATUS_PASSED\";\n    /**\n     * PROPOSAL_STATUS_REJECTED - PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has\n     * been rejected.\n     */\n    ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_REJECTED\"] = 4] = \"PROPOSAL_STATUS_REJECTED\";\n    /**\n     * PROPOSAL_STATUS_FAILED - PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has\n     * failed.\n     */\n    ProposalStatus[ProposalStatus[\"PROPOSAL_STATUS_FAILED\"] = 5] = \"PROPOSAL_STATUS_FAILED\";\n    ProposalStatus[ProposalStatus[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ProposalStatus = exports.ProposalStatus || (exports.ProposalStatus = {}));\nfunction proposalStatusFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"PROPOSAL_STATUS_UNSPECIFIED\":\n            return ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED;\n        case 1:\n        case \"PROPOSAL_STATUS_DEPOSIT_PERIOD\":\n            return ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD;\n        case 2:\n        case \"PROPOSAL_STATUS_VOTING_PERIOD\":\n            return ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD;\n        case 3:\n        case \"PROPOSAL_STATUS_PASSED\":\n            return ProposalStatus.PROPOSAL_STATUS_PASSED;\n        case 4:\n        case \"PROPOSAL_STATUS_REJECTED\":\n            return ProposalStatus.PROPOSAL_STATUS_REJECTED;\n        case 5:\n        case \"PROPOSAL_STATUS_FAILED\":\n            return ProposalStatus.PROPOSAL_STATUS_FAILED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ProposalStatus.UNRECOGNIZED;\n    }\n}\nexports.proposalStatusFromJSON = proposalStatusFromJSON;\nfunction proposalStatusToJSON(object) {\n    switch (object) {\n        case ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED:\n            return \"PROPOSAL_STATUS_UNSPECIFIED\";\n        case ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD:\n            return \"PROPOSAL_STATUS_DEPOSIT_PERIOD\";\n        case ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD:\n            return \"PROPOSAL_STATUS_VOTING_PERIOD\";\n        case ProposalStatus.PROPOSAL_STATUS_PASSED:\n            return \"PROPOSAL_STATUS_PASSED\";\n        case ProposalStatus.PROPOSAL_STATUS_REJECTED:\n            return \"PROPOSAL_STATUS_REJECTED\";\n        case ProposalStatus.PROPOSAL_STATUS_FAILED:\n            return \"PROPOSAL_STATUS_FAILED\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.proposalStatusToJSON = proposalStatusToJSON;\nfunction createBaseWeightedVoteOption() {\n    return { option: 0, weight: \"\" };\n}\nexports.WeightedVoteOption = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.option !== 0) {\n            writer.uint32(8).int32(message.option);\n        }\n        if (message.weight !== \"\") {\n            writer.uint32(18).string(message.weight);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWeightedVoteOption();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.option = reader.int32();\n                    break;\n                case 2:\n                    message.weight = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            option: isSet(object.option) ? voteOptionFromJSON(object.option) : 0,\n            weight: isSet(object.weight) ? String(object.weight) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.option !== undefined &&\n            (obj.option = voteOptionToJSON(message.option));\n        message.weight !== undefined && (obj.weight = message.weight);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseWeightedVoteOption();\n        message.option = (_a = object.option) !== null && _a !== void 0 ? _a : 0;\n        message.weight = (_b = object.weight) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseTextProposal() {\n    return { title: \"\", description: \"\" };\n}\nexports.TextProposal = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.title !== \"\") {\n            writer.uint32(10).string(message.title);\n        }\n        if (message.description !== \"\") {\n            writer.uint32(18).string(message.description);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTextProposal();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.title = reader.string();\n                    break;\n                case 2:\n                    message.description = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            title: isSet(object.title) ? String(object.title) : \"\",\n            description: isSet(object.description) ? String(object.description) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.title !== undefined && (obj.title = message.title);\n        message.description !== undefined &&\n            (obj.description = message.description);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseTextProposal();\n        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : \"\";\n        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseDeposit() {\n    return { proposalId: \"0\", depositor: \"\", amount: [] };\n}\nexports.Deposit = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.proposalId !== \"0\") {\n            writer.uint32(8).uint64(message.proposalId);\n        }\n        if (message.depositor !== \"\") {\n            writer.uint32(18).string(message.depositor);\n        }\n        for (const v of message.amount) {\n            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeposit();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.proposalId = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.depositor = reader.string();\n                    break;\n                case 3:\n                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            proposalId: isSet(object.proposalId) ? String(object.proposalId) : \"0\",\n            depositor: isSet(object.depositor) ? String(object.depositor) : \"\",\n            amount: Array.isArray(object === null || object === void 0 ? void 0 : object.amount)\n                ? object.amount.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.proposalId !== undefined && (obj.proposalId = message.proposalId);\n        message.depositor !== undefined && (obj.depositor = message.depositor);\n        if (message.amount) {\n            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.amount = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseDeposit();\n        message.proposalId = (_a = object.proposalId) !== null && _a !== void 0 ? _a : \"0\";\n        message.depositor = (_b = object.depositor) !== null && _b !== void 0 ? _b : \"\";\n        message.amount = ((_c = object.amount) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseProposal() {\n    return {\n        proposalId: \"0\",\n        content: undefined,\n        status: 0,\n        finalTallyResult: undefined,\n        submitTime: undefined,\n        depositEndTime: undefined,\n        totalDeposit: [],\n        votingStartTime: undefined,\n        votingEndTime: undefined,\n    };\n}\nexports.Proposal = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.proposalId !== \"0\") {\n            writer.uint32(8).uint64(message.proposalId);\n        }\n        if (message.content !== undefined) {\n            any_1.Any.encode(message.content, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.status !== 0) {\n            writer.uint32(24).int32(message.status);\n        }\n        if (message.finalTallyResult !== undefined) {\n            exports.TallyResult.encode(message.finalTallyResult, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.submitTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.submitTime), writer.uint32(42).fork()).ldelim();\n        }\n        if (message.depositEndTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.depositEndTime), writer.uint32(50).fork()).ldelim();\n        }\n        for (const v of message.totalDeposit) {\n            coin_1.Coin.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.votingStartTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.votingStartTime), writer.uint32(66).fork()).ldelim();\n        }\n        if (message.votingEndTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.votingEndTime), writer.uint32(74).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseProposal();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.proposalId = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.content = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.status = reader.int32();\n                    break;\n                case 4:\n                    message.finalTallyResult = exports.TallyResult.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.submitTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.depositEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.totalDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.votingStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    message.votingEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            proposalId: isSet(object.proposalId) ? String(object.proposalId) : \"0\",\n            content: isSet(object.content) ? any_1.Any.fromJSON(object.content) : undefined,\n            status: isSet(object.status) ? proposalStatusFromJSON(object.status) : 0,\n            finalTallyResult: isSet(object.finalTallyResult)\n                ? exports.TallyResult.fromJSON(object.finalTallyResult)\n                : undefined,\n            submitTime: isSet(object.submitTime)\n                ? fromJsonTimestamp(object.submitTime)\n                : undefined,\n            depositEndTime: isSet(object.depositEndTime)\n                ? fromJsonTimestamp(object.depositEndTime)\n                : undefined,\n            totalDeposit: Array.isArray(object === null || object === void 0 ? void 0 : object.totalDeposit)\n                ? object.totalDeposit.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n            votingStartTime: isSet(object.votingStartTime)\n                ? fromJsonTimestamp(object.votingStartTime)\n                : undefined,\n            votingEndTime: isSet(object.votingEndTime)\n                ? fromJsonTimestamp(object.votingEndTime)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.proposalId !== undefined && (obj.proposalId = message.proposalId);\n        message.content !== undefined &&\n            (obj.content = message.content ? any_1.Any.toJSON(message.content) : undefined);\n        message.status !== undefined &&\n            (obj.status = proposalStatusToJSON(message.status));\n        message.finalTallyResult !== undefined &&\n            (obj.finalTallyResult = message.finalTallyResult\n                ? exports.TallyResult.toJSON(message.finalTallyResult)\n                : undefined);\n        message.submitTime !== undefined &&\n            (obj.submitTime = message.submitTime.toISOString());\n        message.depositEndTime !== undefined &&\n            (obj.depositEndTime = message.depositEndTime.toISOString());\n        if (message.totalDeposit) {\n            obj.totalDeposit = message.totalDeposit.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);\n        }\n        else {\n            obj.totalDeposit = [];\n        }\n        message.votingStartTime !== undefined &&\n            (obj.votingStartTime = message.votingStartTime.toISOString());\n        message.votingEndTime !== undefined &&\n            (obj.votingEndTime = message.votingEndTime.toISOString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseProposal();\n        message.proposalId = (_a = object.proposalId) !== null && _a !== void 0 ? _a : \"0\";\n        message.content =\n            object.content !== undefined && object.content !== null\n                ? any_1.Any.fromPartial(object.content)\n                : undefined;\n        message.status = (_b = object.status) !== null && _b !== void 0 ? _b : 0;\n        message.finalTallyResult =\n            object.finalTallyResult !== undefined && object.finalTallyResult !== null\n                ? exports.TallyResult.fromPartial(object.finalTallyResult)\n                : undefined;\n        message.submitTime = (_c = object.submitTime) !== null && _c !== void 0 ? _c : undefined;\n        message.depositEndTime = (_d = object.depositEndTime) !== null && _d !== void 0 ? _d : undefined;\n        message.totalDeposit =\n            ((_e = object.totalDeposit) === null || _e === void 0 ? void 0 : _e.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        message.votingStartTime = (_f = object.votingStartTime) !== null && _f !== void 0 ? _f : undefined;\n        message.votingEndTime = (_g = object.votingEndTime) !== null && _g !== void 0 ? _g : undefined;\n        return message;\n    },\n};\nfunction createBaseTallyResult() {\n    return { yes: \"\", abstain: \"\", no: \"\", noWithVeto: \"\" };\n}\nexports.TallyResult = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.yes !== \"\") {\n            writer.uint32(10).string(message.yes);\n        }\n        if (message.abstain !== \"\") {\n            writer.uint32(18).string(message.abstain);\n        }\n        if (message.no !== \"\") {\n            writer.uint32(26).string(message.no);\n        }\n        if (message.noWithVeto !== \"\") {\n            writer.uint32(34).string(message.noWithVeto);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTallyResult();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.yes = reader.string();\n                    break;\n                case 2:\n                    message.abstain = reader.string();\n                    break;\n                case 3:\n                    message.no = reader.string();\n                    break;\n                case 4:\n                    message.noWithVeto = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            yes: isSet(object.yes) ? String(object.yes) : \"\",\n            abstain: isSet(object.abstain) ? String(object.abstain) : \"\",\n            no: isSet(object.no) ? String(object.no) : \"\",\n            noWithVeto: isSet(object.noWithVeto) ? String(object.noWithVeto) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.yes !== undefined && (obj.yes = message.yes);\n        message.abstain !== undefined && (obj.abstain = message.abstain);\n        message.no !== undefined && (obj.no = message.no);\n        message.noWithVeto !== undefined && (obj.noWithVeto = message.noWithVeto);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseTallyResult();\n        message.yes = (_a = object.yes) !== null && _a !== void 0 ? _a : \"\";\n        message.abstain = (_b = object.abstain) !== null && _b !== void 0 ? _b : \"\";\n        message.no = (_c = object.no) !== null && _c !== void 0 ? _c : \"\";\n        message.noWithVeto = (_d = object.noWithVeto) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    },\n};\nfunction createBaseVote() {\n    return { proposalId: \"0\", voter: \"\", option: 0, options: [] };\n}\nexports.Vote = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.proposalId !== \"0\") {\n            writer.uint32(8).uint64(message.proposalId);\n        }\n        if (message.voter !== \"\") {\n            writer.uint32(18).string(message.voter);\n        }\n        if (message.option !== 0) {\n            writer.uint32(24).int32(message.option);\n        }\n        for (const v of message.options) {\n            exports.WeightedVoteOption.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVote();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.proposalId = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.voter = reader.string();\n                    break;\n                case 3:\n                    message.option = reader.int32();\n                    break;\n                case 4:\n                    message.options.push(exports.WeightedVoteOption.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            proposalId: isSet(object.proposalId) ? String(object.proposalId) : \"0\",\n            voter: isSet(object.voter) ? String(object.voter) : \"\",\n            option: isSet(object.option) ? voteOptionFromJSON(object.option) : 0,\n            options: Array.isArray(object === null || object === void 0 ? void 0 : object.options)\n                ? object.options.map((e) => exports.WeightedVoteOption.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.proposalId !== undefined && (obj.proposalId = message.proposalId);\n        message.voter !== undefined && (obj.voter = message.voter);\n        message.option !== undefined &&\n            (obj.option = voteOptionToJSON(message.option));\n        if (message.options) {\n            obj.options = message.options.map((e) => e ? exports.WeightedVoteOption.toJSON(e) : undefined);\n        }\n        else {\n            obj.options = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseVote();\n        message.proposalId = (_a = object.proposalId) !== null && _a !== void 0 ? _a : \"0\";\n        message.voter = (_b = object.voter) !== null && _b !== void 0 ? _b : \"\";\n        message.option = (_c = object.option) !== null && _c !== void 0 ? _c : 0;\n        message.options =\n            ((_d = object.options) === null || _d === void 0 ? void 0 : _d.map((e) => exports.WeightedVoteOption.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseDepositParams() {\n    return { minDeposit: [], maxDepositPeriod: undefined };\n}\nexports.DepositParams = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.minDeposit) {\n            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.maxDepositPeriod !== undefined) {\n            duration_1.Duration.encode(message.maxDepositPeriod, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDepositParams();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.minDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.maxDepositPeriod = duration_1.Duration.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            minDeposit: Array.isArray(object === null || object === void 0 ? void 0 : object.minDeposit)\n                ? object.minDeposit.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n            maxDepositPeriod: isSet(object.maxDepositPeriod)\n                ? duration_1.Duration.fromJSON(object.maxDepositPeriod)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.minDeposit) {\n            obj.minDeposit = message.minDeposit.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);\n        }\n        else {\n            obj.minDeposit = [];\n        }\n        message.maxDepositPeriod !== undefined &&\n            (obj.maxDepositPeriod = message.maxDepositPeriod\n                ? duration_1.Duration.toJSON(message.maxDepositPeriod)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDepositParams();\n        message.minDeposit =\n            ((_a = object.minDeposit) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        message.maxDepositPeriod =\n            object.maxDepositPeriod !== undefined && object.maxDepositPeriod !== null\n                ? duration_1.Duration.fromPartial(object.maxDepositPeriod)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseVotingParams() {\n    return { votingPeriod: undefined };\n}\nexports.VotingParams = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.votingPeriod !== undefined) {\n            duration_1.Duration.encode(message.votingPeriod, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVotingParams();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.votingPeriod = duration_1.Duration.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            votingPeriod: isSet(object.votingPeriod)\n                ? duration_1.Duration.fromJSON(object.votingPeriod)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.votingPeriod !== undefined &&\n            (obj.votingPeriod = message.votingPeriod\n                ? duration_1.Duration.toJSON(message.votingPeriod)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseVotingParams();\n        message.votingPeriod =\n            object.votingPeriod !== undefined && object.votingPeriod !== null\n                ? duration_1.Duration.fromPartial(object.votingPeriod)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseTallyParams() {\n    return {\n        quorum: new Uint8Array(),\n        threshold: new Uint8Array(),\n        vetoThreshold: new Uint8Array(),\n    };\n}\nexports.TallyParams = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.quorum.length !== 0) {\n            writer.uint32(10).bytes(message.quorum);\n        }\n        if (message.threshold.length !== 0) {\n            writer.uint32(18).bytes(message.threshold);\n        }\n        if (message.vetoThreshold.length !== 0) {\n            writer.uint32(26).bytes(message.vetoThreshold);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTallyParams();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.quorum = reader.bytes();\n                    break;\n                case 2:\n                    message.threshold = reader.bytes();\n                    break;\n                case 3:\n                    message.vetoThreshold = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            quorum: isSet(object.quorum)\n                ? bytesFromBase64(object.quorum)\n                : new Uint8Array(),\n            threshold: isSet(object.threshold)\n                ? bytesFromBase64(object.threshold)\n                : new Uint8Array(),\n            vetoThreshold: isSet(object.vetoThreshold)\n                ? bytesFromBase64(object.vetoThreshold)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.quorum !== undefined &&\n            (obj.quorum = base64FromBytes(message.quorum !== undefined ? message.quorum : new Uint8Array()));\n        message.threshold !== undefined &&\n            (obj.threshold = base64FromBytes(message.threshold !== undefined ? message.threshold : new Uint8Array()));\n        message.vetoThreshold !== undefined &&\n            (obj.vetoThreshold = base64FromBytes(message.vetoThreshold !== undefined\n                ? message.vetoThreshold\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseTallyParams();\n        message.quorum = (_a = object.quorum) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.threshold = (_b = object.threshold) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.vetoThreshold = (_c = object.vetoThreshold) !== null && _c !== void 0 ? _c : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction toTimestamp(date) {\n    const seconds = Math.trunc(date.getTime() / 1000).toString();\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = Number(t.seconds) * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=gov.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/gov/v1beta1/gov.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/gov/v1beta1/tx.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/gov/v1beta1/tx.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgDepositResponse = exports.MsgDeposit = exports.MsgVoteWeightedResponse = exports.MsgVoteWeighted = exports.MsgVoteResponse = exports.MsgVote = exports.MsgSubmitProposalResponse = exports.MsgSubmitProposal = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst gov_1 = __webpack_require__(/*! ../../../cosmos/gov/v1beta1/gov */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/gov/v1beta1/gov.js\");\nconst any_1 = __webpack_require__(/*! ../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nexports.protobufPackage = \"cosmos.gov.v1beta1\";\nfunction createBaseMsgSubmitProposal() {\n    return { content: undefined, initialDeposit: [], proposer: \"\" };\n}\nexports.MsgSubmitProposal = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.content !== undefined) {\n            any_1.Any.encode(message.content, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.initialDeposit) {\n            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.proposer !== \"\") {\n            writer.uint32(26).string(message.proposer);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgSubmitProposal();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.content = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.initialDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.proposer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            content: isSet(object.content) ? any_1.Any.fromJSON(object.content) : undefined,\n            initialDeposit: Array.isArray(object === null || object === void 0 ? void 0 : object.initialDeposit)\n                ? object.initialDeposit.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n            proposer: isSet(object.proposer) ? String(object.proposer) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.content !== undefined &&\n            (obj.content = message.content ? any_1.Any.toJSON(message.content) : undefined);\n        if (message.initialDeposit) {\n            obj.initialDeposit = message.initialDeposit.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);\n        }\n        else {\n            obj.initialDeposit = [];\n        }\n        message.proposer !== undefined && (obj.proposer = message.proposer);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgSubmitProposal();\n        message.content =\n            object.content !== undefined && object.content !== null\n                ? any_1.Any.fromPartial(object.content)\n                : undefined;\n        message.initialDeposit =\n            ((_a = object.initialDeposit) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        message.proposer = (_b = object.proposer) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgSubmitProposalResponse() {\n    return { proposalId: \"0\" };\n}\nexports.MsgSubmitProposalResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.proposalId !== \"0\") {\n            writer.uint32(8).uint64(message.proposalId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgSubmitProposalResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.proposalId = longToString(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            proposalId: isSet(object.proposalId) ? String(object.proposalId) : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.proposalId !== undefined && (obj.proposalId = message.proposalId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMsgSubmitProposalResponse();\n        message.proposalId = (_a = object.proposalId) !== null && _a !== void 0 ? _a : \"0\";\n        return message;\n    },\n};\nfunction createBaseMsgVote() {\n    return { proposalId: \"0\", voter: \"\", option: 0 };\n}\nexports.MsgVote = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.proposalId !== \"0\") {\n            writer.uint32(8).uint64(message.proposalId);\n        }\n        if (message.voter !== \"\") {\n            writer.uint32(18).string(message.voter);\n        }\n        if (message.option !== 0) {\n            writer.uint32(24).int32(message.option);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgVote();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.proposalId = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.voter = reader.string();\n                    break;\n                case 3:\n                    message.option = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            proposalId: isSet(object.proposalId) ? String(object.proposalId) : \"0\",\n            voter: isSet(object.voter) ? String(object.voter) : \"\",\n            option: isSet(object.option) ? (0, gov_1.voteOptionFromJSON)(object.option) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.proposalId !== undefined && (obj.proposalId = message.proposalId);\n        message.voter !== undefined && (obj.voter = message.voter);\n        message.option !== undefined &&\n            (obj.option = (0, gov_1.voteOptionToJSON)(message.option));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMsgVote();\n        message.proposalId = (_a = object.proposalId) !== null && _a !== void 0 ? _a : \"0\";\n        message.voter = (_b = object.voter) !== null && _b !== void 0 ? _b : \"\";\n        message.option = (_c = object.option) !== null && _c !== void 0 ? _c : 0;\n        return message;\n    },\n};\nfunction createBaseMsgVoteResponse() {\n    return {};\n}\nexports.MsgVoteResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgVoteResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgVoteResponse();\n        return message;\n    },\n};\nfunction createBaseMsgVoteWeighted() {\n    return { proposalId: \"0\", voter: \"\", options: [] };\n}\nexports.MsgVoteWeighted = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.proposalId !== \"0\") {\n            writer.uint32(8).uint64(message.proposalId);\n        }\n        if (message.voter !== \"\") {\n            writer.uint32(18).string(message.voter);\n        }\n        for (const v of message.options) {\n            gov_1.WeightedVoteOption.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgVoteWeighted();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.proposalId = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.voter = reader.string();\n                    break;\n                case 3:\n                    message.options.push(gov_1.WeightedVoteOption.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            proposalId: isSet(object.proposalId) ? String(object.proposalId) : \"0\",\n            voter: isSet(object.voter) ? String(object.voter) : \"\",\n            options: Array.isArray(object === null || object === void 0 ? void 0 : object.options)\n                ? object.options.map((e) => gov_1.WeightedVoteOption.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.proposalId !== undefined && (obj.proposalId = message.proposalId);\n        message.voter !== undefined && (obj.voter = message.voter);\n        if (message.options) {\n            obj.options = message.options.map((e) => e ? gov_1.WeightedVoteOption.toJSON(e) : undefined);\n        }\n        else {\n            obj.options = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMsgVoteWeighted();\n        message.proposalId = (_a = object.proposalId) !== null && _a !== void 0 ? _a : \"0\";\n        message.voter = (_b = object.voter) !== null && _b !== void 0 ? _b : \"\";\n        message.options =\n            ((_c = object.options) === null || _c === void 0 ? void 0 : _c.map((e) => gov_1.WeightedVoteOption.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseMsgVoteWeightedResponse() {\n    return {};\n}\nexports.MsgVoteWeightedResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgVoteWeightedResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgVoteWeightedResponse();\n        return message;\n    },\n};\nfunction createBaseMsgDeposit() {\n    return { proposalId: \"0\", depositor: \"\", amount: [] };\n}\nexports.MsgDeposit = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.proposalId !== \"0\") {\n            writer.uint32(8).uint64(message.proposalId);\n        }\n        if (message.depositor !== \"\") {\n            writer.uint32(18).string(message.depositor);\n        }\n        for (const v of message.amount) {\n            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgDeposit();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.proposalId = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.depositor = reader.string();\n                    break;\n                case 3:\n                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            proposalId: isSet(object.proposalId) ? String(object.proposalId) : \"0\",\n            depositor: isSet(object.depositor) ? String(object.depositor) : \"\",\n            amount: Array.isArray(object === null || object === void 0 ? void 0 : object.amount)\n                ? object.amount.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.proposalId !== undefined && (obj.proposalId = message.proposalId);\n        message.depositor !== undefined && (obj.depositor = message.depositor);\n        if (message.amount) {\n            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.amount = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMsgDeposit();\n        message.proposalId = (_a = object.proposalId) !== null && _a !== void 0 ? _a : \"0\";\n        message.depositor = (_b = object.depositor) !== null && _b !== void 0 ? _b : \"\";\n        message.amount = ((_c = object.amount) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseMsgDepositResponse() {\n    return {};\n}\nexports.MsgDepositResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgDepositResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgDepositResponse();\n        return message;\n    },\n};\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=tx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/gov/v1beta1/tx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/authz.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/authz.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StakeAuthorization_Validators = exports.StakeAuthorization = exports.authorizationTypeToJSON = exports.authorizationTypeFromJSON = exports.AuthorizationType = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nexports.protobufPackage = \"cosmos.staking.v1beta1\";\n/** AuthorizationType defines the type of staking module authorization type */\nvar AuthorizationType;\n(function (AuthorizationType) {\n    /** AUTHORIZATION_TYPE_UNSPECIFIED - AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type */\n    AuthorizationType[AuthorizationType[\"AUTHORIZATION_TYPE_UNSPECIFIED\"] = 0] = \"AUTHORIZATION_TYPE_UNSPECIFIED\";\n    /** AUTHORIZATION_TYPE_DELEGATE - AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate */\n    AuthorizationType[AuthorizationType[\"AUTHORIZATION_TYPE_DELEGATE\"] = 1] = \"AUTHORIZATION_TYPE_DELEGATE\";\n    /** AUTHORIZATION_TYPE_UNDELEGATE - AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate */\n    AuthorizationType[AuthorizationType[\"AUTHORIZATION_TYPE_UNDELEGATE\"] = 2] = \"AUTHORIZATION_TYPE_UNDELEGATE\";\n    /** AUTHORIZATION_TYPE_REDELEGATE - AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate */\n    AuthorizationType[AuthorizationType[\"AUTHORIZATION_TYPE_REDELEGATE\"] = 3] = \"AUTHORIZATION_TYPE_REDELEGATE\";\n    AuthorizationType[AuthorizationType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(AuthorizationType = exports.AuthorizationType || (exports.AuthorizationType = {}));\nfunction authorizationTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"AUTHORIZATION_TYPE_UNSPECIFIED\":\n            return AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED;\n        case 1:\n        case \"AUTHORIZATION_TYPE_DELEGATE\":\n            return AuthorizationType.AUTHORIZATION_TYPE_DELEGATE;\n        case 2:\n        case \"AUTHORIZATION_TYPE_UNDELEGATE\":\n            return AuthorizationType.AUTHORIZATION_TYPE_UNDELEGATE;\n        case 3:\n        case \"AUTHORIZATION_TYPE_REDELEGATE\":\n            return AuthorizationType.AUTHORIZATION_TYPE_REDELEGATE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return AuthorizationType.UNRECOGNIZED;\n    }\n}\nexports.authorizationTypeFromJSON = authorizationTypeFromJSON;\nfunction authorizationTypeToJSON(object) {\n    switch (object) {\n        case AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED:\n            return \"AUTHORIZATION_TYPE_UNSPECIFIED\";\n        case AuthorizationType.AUTHORIZATION_TYPE_DELEGATE:\n            return \"AUTHORIZATION_TYPE_DELEGATE\";\n        case AuthorizationType.AUTHORIZATION_TYPE_UNDELEGATE:\n            return \"AUTHORIZATION_TYPE_UNDELEGATE\";\n        case AuthorizationType.AUTHORIZATION_TYPE_REDELEGATE:\n            return \"AUTHORIZATION_TYPE_REDELEGATE\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.authorizationTypeToJSON = authorizationTypeToJSON;\nfunction createBaseStakeAuthorization() {\n    return {\n        maxTokens: undefined,\n        allowList: undefined,\n        denyList: undefined,\n        authorizationType: 0,\n    };\n}\nexports.StakeAuthorization = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.maxTokens !== undefined) {\n            coin_1.Coin.encode(message.maxTokens, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.allowList !== undefined) {\n            exports.StakeAuthorization_Validators.encode(message.allowList, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.denyList !== undefined) {\n            exports.StakeAuthorization_Validators.encode(message.denyList, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.authorizationType !== 0) {\n            writer.uint32(32).int32(message.authorizationType);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStakeAuthorization();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.maxTokens = coin_1.Coin.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.allowList = exports.StakeAuthorization_Validators.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.denyList = exports.StakeAuthorization_Validators.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.authorizationType = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            maxTokens: isSet(object.maxTokens)\n                ? coin_1.Coin.fromJSON(object.maxTokens)\n                : undefined,\n            allowList: isSet(object.allowList)\n                ? exports.StakeAuthorization_Validators.fromJSON(object.allowList)\n                : undefined,\n            denyList: isSet(object.denyList)\n                ? exports.StakeAuthorization_Validators.fromJSON(object.denyList)\n                : undefined,\n            authorizationType: isSet(object.authorizationType)\n                ? authorizationTypeFromJSON(object.authorizationType)\n                : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.maxTokens !== undefined &&\n            (obj.maxTokens = message.maxTokens\n                ? coin_1.Coin.toJSON(message.maxTokens)\n                : undefined);\n        message.allowList !== undefined &&\n            (obj.allowList = message.allowList\n                ? exports.StakeAuthorization_Validators.toJSON(message.allowList)\n                : undefined);\n        message.denyList !== undefined &&\n            (obj.denyList = message.denyList\n                ? exports.StakeAuthorization_Validators.toJSON(message.denyList)\n                : undefined);\n        message.authorizationType !== undefined &&\n            (obj.authorizationType = authorizationTypeToJSON(message.authorizationType));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseStakeAuthorization();\n        message.maxTokens =\n            object.maxTokens !== undefined && object.maxTokens !== null\n                ? coin_1.Coin.fromPartial(object.maxTokens)\n                : undefined;\n        message.allowList =\n            object.allowList !== undefined && object.allowList !== null\n                ? exports.StakeAuthorization_Validators.fromPartial(object.allowList)\n                : undefined;\n        message.denyList =\n            object.denyList !== undefined && object.denyList !== null\n                ? exports.StakeAuthorization_Validators.fromPartial(object.denyList)\n                : undefined;\n        message.authorizationType = (_a = object.authorizationType) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    },\n};\nfunction createBaseStakeAuthorization_Validators() {\n    return { address: [] };\n}\nexports.StakeAuthorization_Validators = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.address) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStakeAuthorization_Validators();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            address: Array.isArray(object === null || object === void 0 ? void 0 : object.address)\n                ? object.address.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.address) {\n            obj.address = message.address.map((e) => e);\n        }\n        else {\n            obj.address = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseStakeAuthorization_Validators();\n        message.address = ((_a = object.address) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=authz.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/authz.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/staking.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/staking.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Pool = exports.RedelegationResponse = exports.RedelegationEntryResponse = exports.DelegationResponse = exports.Params = exports.Redelegation = exports.RedelegationEntry = exports.UnbondingDelegationEntry = exports.UnbondingDelegation = exports.Delegation = exports.DVVTriplets = exports.DVVTriplet = exports.DVPairs = exports.DVPair = exports.ValAddresses = exports.Validator = exports.Description = exports.Commission = exports.CommissionRates = exports.HistoricalInfo = exports.bondStatusToJSON = exports.bondStatusFromJSON = exports.BondStatus = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst timestamp_1 = __webpack_require__(/*! ../../../google/protobuf/timestamp */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/timestamp.js\");\nconst types_1 = __webpack_require__(/*! ../../../tendermint/types/types */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/types/types.js\");\nconst any_1 = __webpack_require__(/*! ../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nconst duration_1 = __webpack_require__(/*! ../../../google/protobuf/duration */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/duration.js\");\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nexports.protobufPackage = \"cosmos.staking.v1beta1\";\n/** BondStatus is the status of a validator. */\nvar BondStatus;\n(function (BondStatus) {\n    /** BOND_STATUS_UNSPECIFIED - UNSPECIFIED defines an invalid validator status. */\n    BondStatus[BondStatus[\"BOND_STATUS_UNSPECIFIED\"] = 0] = \"BOND_STATUS_UNSPECIFIED\";\n    /** BOND_STATUS_UNBONDED - UNBONDED defines a validator that is not bonded. */\n    BondStatus[BondStatus[\"BOND_STATUS_UNBONDED\"] = 1] = \"BOND_STATUS_UNBONDED\";\n    /** BOND_STATUS_UNBONDING - UNBONDING defines a validator that is unbonding. */\n    BondStatus[BondStatus[\"BOND_STATUS_UNBONDING\"] = 2] = \"BOND_STATUS_UNBONDING\";\n    /** BOND_STATUS_BONDED - BONDED defines a validator that is bonded. */\n    BondStatus[BondStatus[\"BOND_STATUS_BONDED\"] = 3] = \"BOND_STATUS_BONDED\";\n    BondStatus[BondStatus[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(BondStatus = exports.BondStatus || (exports.BondStatus = {}));\nfunction bondStatusFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"BOND_STATUS_UNSPECIFIED\":\n            return BondStatus.BOND_STATUS_UNSPECIFIED;\n        case 1:\n        case \"BOND_STATUS_UNBONDED\":\n            return BondStatus.BOND_STATUS_UNBONDED;\n        case 2:\n        case \"BOND_STATUS_UNBONDING\":\n            return BondStatus.BOND_STATUS_UNBONDING;\n        case 3:\n        case \"BOND_STATUS_BONDED\":\n            return BondStatus.BOND_STATUS_BONDED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return BondStatus.UNRECOGNIZED;\n    }\n}\nexports.bondStatusFromJSON = bondStatusFromJSON;\nfunction bondStatusToJSON(object) {\n    switch (object) {\n        case BondStatus.BOND_STATUS_UNSPECIFIED:\n            return \"BOND_STATUS_UNSPECIFIED\";\n        case BondStatus.BOND_STATUS_UNBONDED:\n            return \"BOND_STATUS_UNBONDED\";\n        case BondStatus.BOND_STATUS_UNBONDING:\n            return \"BOND_STATUS_UNBONDING\";\n        case BondStatus.BOND_STATUS_BONDED:\n            return \"BOND_STATUS_BONDED\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.bondStatusToJSON = bondStatusToJSON;\nfunction createBaseHistoricalInfo() {\n    return { header: undefined, valset: [] };\n}\nexports.HistoricalInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.header !== undefined) {\n            types_1.Header.encode(message.header, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.valset) {\n            exports.Validator.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseHistoricalInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.header = types_1.Header.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.valset.push(exports.Validator.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            header: isSet(object.header) ? types_1.Header.fromJSON(object.header) : undefined,\n            valset: Array.isArray(object === null || object === void 0 ? void 0 : object.valset)\n                ? object.valset.map((e) => exports.Validator.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.header !== undefined &&\n            (obj.header = message.header ? types_1.Header.toJSON(message.header) : undefined);\n        if (message.valset) {\n            obj.valset = message.valset.map((e) => e ? exports.Validator.toJSON(e) : undefined);\n        }\n        else {\n            obj.valset = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseHistoricalInfo();\n        message.header =\n            object.header !== undefined && object.header !== null\n                ? types_1.Header.fromPartial(object.header)\n                : undefined;\n        message.valset = ((_a = object.valset) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Validator.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseCommissionRates() {\n    return { rate: \"\", maxRate: \"\", maxChangeRate: \"\" };\n}\nexports.CommissionRates = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.rate !== \"\") {\n            writer.uint32(10).string(message.rate);\n        }\n        if (message.maxRate !== \"\") {\n            writer.uint32(18).string(message.maxRate);\n        }\n        if (message.maxChangeRate !== \"\") {\n            writer.uint32(26).string(message.maxChangeRate);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCommissionRates();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.rate = reader.string();\n                    break;\n                case 2:\n                    message.maxRate = reader.string();\n                    break;\n                case 3:\n                    message.maxChangeRate = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            rate: isSet(object.rate) ? String(object.rate) : \"\",\n            maxRate: isSet(object.maxRate) ? String(object.maxRate) : \"\",\n            maxChangeRate: isSet(object.maxChangeRate)\n                ? String(object.maxChangeRate)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.rate !== undefined && (obj.rate = message.rate);\n        message.maxRate !== undefined && (obj.maxRate = message.maxRate);\n        message.maxChangeRate !== undefined &&\n            (obj.maxChangeRate = message.maxChangeRate);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseCommissionRates();\n        message.rate = (_a = object.rate) !== null && _a !== void 0 ? _a : \"\";\n        message.maxRate = (_b = object.maxRate) !== null && _b !== void 0 ? _b : \"\";\n        message.maxChangeRate = (_c = object.maxChangeRate) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseCommission() {\n    return { commissionRates: undefined, updateTime: undefined };\n}\nexports.Commission = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.commissionRates !== undefined) {\n            exports.CommissionRates.encode(message.commissionRates, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.updateTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCommission();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.commissionRates = exports.CommissionRates.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.updateTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            commissionRates: isSet(object.commissionRates)\n                ? exports.CommissionRates.fromJSON(object.commissionRates)\n                : undefined,\n            updateTime: isSet(object.updateTime)\n                ? fromJsonTimestamp(object.updateTime)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.commissionRates !== undefined &&\n            (obj.commissionRates = message.commissionRates\n                ? exports.CommissionRates.toJSON(message.commissionRates)\n                : undefined);\n        message.updateTime !== undefined &&\n            (obj.updateTime = message.updateTime.toISOString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseCommission();\n        message.commissionRates =\n            object.commissionRates !== undefined && object.commissionRates !== null\n                ? exports.CommissionRates.fromPartial(object.commissionRates)\n                : undefined;\n        message.updateTime = (_a = object.updateTime) !== null && _a !== void 0 ? _a : undefined;\n        return message;\n    },\n};\nfunction createBaseDescription() {\n    return {\n        moniker: \"\",\n        identity: \"\",\n        website: \"\",\n        securityContact: \"\",\n        details: \"\",\n    };\n}\nexports.Description = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.moniker !== \"\") {\n            writer.uint32(10).string(message.moniker);\n        }\n        if (message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.website !== \"\") {\n            writer.uint32(26).string(message.website);\n        }\n        if (message.securityContact !== \"\") {\n            writer.uint32(34).string(message.securityContact);\n        }\n        if (message.details !== \"\") {\n            writer.uint32(42).string(message.details);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDescription();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.moniker = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.website = reader.string();\n                    break;\n                case 4:\n                    message.securityContact = reader.string();\n                    break;\n                case 5:\n                    message.details = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            moniker: isSet(object.moniker) ? String(object.moniker) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            website: isSet(object.website) ? String(object.website) : \"\",\n            securityContact: isSet(object.securityContact)\n                ? String(object.securityContact)\n                : \"\",\n            details: isSet(object.details) ? String(object.details) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.moniker !== undefined && (obj.moniker = message.moniker);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.website !== undefined && (obj.website = message.website);\n        message.securityContact !== undefined &&\n            (obj.securityContact = message.securityContact);\n        message.details !== undefined && (obj.details = message.details);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseDescription();\n        message.moniker = (_a = object.moniker) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.website = (_c = object.website) !== null && _c !== void 0 ? _c : \"\";\n        message.securityContact = (_d = object.securityContact) !== null && _d !== void 0 ? _d : \"\";\n        message.details = (_e = object.details) !== null && _e !== void 0 ? _e : \"\";\n        return message;\n    },\n};\nfunction createBaseValidator() {\n    return {\n        operatorAddress: \"\",\n        consensusPubkey: undefined,\n        jailed: false,\n        status: 0,\n        tokens: \"\",\n        delegatorShares: \"\",\n        description: undefined,\n        unbondingHeight: \"0\",\n        unbondingTime: undefined,\n        commission: undefined,\n        minSelfDelegation: \"\",\n    };\n}\nexports.Validator = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.operatorAddress !== \"\") {\n            writer.uint32(10).string(message.operatorAddress);\n        }\n        if (message.consensusPubkey !== undefined) {\n            any_1.Any.encode(message.consensusPubkey, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.jailed === true) {\n            writer.uint32(24).bool(message.jailed);\n        }\n        if (message.status !== 0) {\n            writer.uint32(32).int32(message.status);\n        }\n        if (message.tokens !== \"\") {\n            writer.uint32(42).string(message.tokens);\n        }\n        if (message.delegatorShares !== \"\") {\n            writer.uint32(50).string(message.delegatorShares);\n        }\n        if (message.description !== undefined) {\n            exports.Description.encode(message.description, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.unbondingHeight !== \"0\") {\n            writer.uint32(64).int64(message.unbondingHeight);\n        }\n        if (message.unbondingTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.unbondingTime), writer.uint32(74).fork()).ldelim();\n        }\n        if (message.commission !== undefined) {\n            exports.Commission.encode(message.commission, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.minSelfDelegation !== \"\") {\n            writer.uint32(90).string(message.minSelfDelegation);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidator();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.operatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.consensusPubkey = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.jailed = reader.bool();\n                    break;\n                case 4:\n                    message.status = reader.int32();\n                    break;\n                case 5:\n                    message.tokens = reader.string();\n                    break;\n                case 6:\n                    message.delegatorShares = reader.string();\n                    break;\n                case 7:\n                    message.description = exports.Description.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.unbondingHeight = longToString(reader.int64());\n                    break;\n                case 9:\n                    message.unbondingTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.commission = exports.Commission.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.minSelfDelegation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            operatorAddress: isSet(object.operatorAddress)\n                ? String(object.operatorAddress)\n                : \"\",\n            consensusPubkey: isSet(object.consensusPubkey)\n                ? any_1.Any.fromJSON(object.consensusPubkey)\n                : undefined,\n            jailed: isSet(object.jailed) ? Boolean(object.jailed) : false,\n            status: isSet(object.status) ? bondStatusFromJSON(object.status) : 0,\n            tokens: isSet(object.tokens) ? String(object.tokens) : \"\",\n            delegatorShares: isSet(object.delegatorShares)\n                ? String(object.delegatorShares)\n                : \"\",\n            description: isSet(object.description)\n                ? exports.Description.fromJSON(object.description)\n                : undefined,\n            unbondingHeight: isSet(object.unbondingHeight)\n                ? String(object.unbondingHeight)\n                : \"0\",\n            unbondingTime: isSet(object.unbondingTime)\n                ? fromJsonTimestamp(object.unbondingTime)\n                : undefined,\n            commission: isSet(object.commission)\n                ? exports.Commission.fromJSON(object.commission)\n                : undefined,\n            minSelfDelegation: isSet(object.minSelfDelegation)\n                ? String(object.minSelfDelegation)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.operatorAddress !== undefined &&\n            (obj.operatorAddress = message.operatorAddress);\n        message.consensusPubkey !== undefined &&\n            (obj.consensusPubkey = message.consensusPubkey\n                ? any_1.Any.toJSON(message.consensusPubkey)\n                : undefined);\n        message.jailed !== undefined && (obj.jailed = message.jailed);\n        message.status !== undefined &&\n            (obj.status = bondStatusToJSON(message.status));\n        message.tokens !== undefined && (obj.tokens = message.tokens);\n        message.delegatorShares !== undefined &&\n            (obj.delegatorShares = message.delegatorShares);\n        message.description !== undefined &&\n            (obj.description = message.description\n                ? exports.Description.toJSON(message.description)\n                : undefined);\n        message.unbondingHeight !== undefined &&\n            (obj.unbondingHeight = message.unbondingHeight);\n        message.unbondingTime !== undefined &&\n            (obj.unbondingTime = message.unbondingTime.toISOString());\n        message.commission !== undefined &&\n            (obj.commission = message.commission\n                ? exports.Commission.toJSON(message.commission)\n                : undefined);\n        message.minSelfDelegation !== undefined &&\n            (obj.minSelfDelegation = message.minSelfDelegation);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseValidator();\n        message.operatorAddress = (_a = object.operatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.consensusPubkey =\n            object.consensusPubkey !== undefined && object.consensusPubkey !== null\n                ? any_1.Any.fromPartial(object.consensusPubkey)\n                : undefined;\n        message.jailed = (_b = object.jailed) !== null && _b !== void 0 ? _b : false;\n        message.status = (_c = object.status) !== null && _c !== void 0 ? _c : 0;\n        message.tokens = (_d = object.tokens) !== null && _d !== void 0 ? _d : \"\";\n        message.delegatorShares = (_e = object.delegatorShares) !== null && _e !== void 0 ? _e : \"\";\n        message.description =\n            object.description !== undefined && object.description !== null\n                ? exports.Description.fromPartial(object.description)\n                : undefined;\n        message.unbondingHeight = (_f = object.unbondingHeight) !== null && _f !== void 0 ? _f : \"0\";\n        message.unbondingTime = (_g = object.unbondingTime) !== null && _g !== void 0 ? _g : undefined;\n        message.commission =\n            object.commission !== undefined && object.commission !== null\n                ? exports.Commission.fromPartial(object.commission)\n                : undefined;\n        message.minSelfDelegation = (_h = object.minSelfDelegation) !== null && _h !== void 0 ? _h : \"\";\n        return message;\n    },\n};\nfunction createBaseValAddresses() {\n    return { addresses: [] };\n}\nexports.ValAddresses = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.addresses) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValAddresses();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.addresses.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            addresses: Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)\n                ? object.addresses.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.addresses) {\n            obj.addresses = message.addresses.map((e) => e);\n        }\n        else {\n            obj.addresses = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValAddresses();\n        message.addresses = ((_a = object.addresses) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseDVPair() {\n    return { delegatorAddress: \"\", validatorAddress: \"\" };\n}\nexports.DVPair = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(18).string(message.validatorAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDVPair();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.validatorAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            validatorAddress: isSet(object.validatorAddress)\n                ? String(object.validatorAddress)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDVPair();\n        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.validatorAddress = (_b = object.validatorAddress) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseDVPairs() {\n    return { pairs: [] };\n}\nexports.DVPairs = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.pairs) {\n            exports.DVPair.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDVPairs();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.pairs.push(exports.DVPair.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            pairs: Array.isArray(object === null || object === void 0 ? void 0 : object.pairs)\n                ? object.pairs.map((e) => exports.DVPair.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.pairs) {\n            obj.pairs = message.pairs.map((e) => (e ? exports.DVPair.toJSON(e) : undefined));\n        }\n        else {\n            obj.pairs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDVPairs();\n        message.pairs = ((_a = object.pairs) === null || _a === void 0 ? void 0 : _a.map((e) => exports.DVPair.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseDVVTriplet() {\n    return {\n        delegatorAddress: \"\",\n        validatorSrcAddress: \"\",\n        validatorDstAddress: \"\",\n    };\n}\nexports.DVVTriplet = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.validatorSrcAddress !== \"\") {\n            writer.uint32(18).string(message.validatorSrcAddress);\n        }\n        if (message.validatorDstAddress !== \"\") {\n            writer.uint32(26).string(message.validatorDstAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDVVTriplet();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.validatorSrcAddress = reader.string();\n                    break;\n                case 3:\n                    message.validatorDstAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            validatorSrcAddress: isSet(object.validatorSrcAddress)\n                ? String(object.validatorSrcAddress)\n                : \"\",\n            validatorDstAddress: isSet(object.validatorDstAddress)\n                ? String(object.validatorDstAddress)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorSrcAddress !== undefined &&\n            (obj.validatorSrcAddress = message.validatorSrcAddress);\n        message.validatorDstAddress !== undefined &&\n            (obj.validatorDstAddress = message.validatorDstAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseDVVTriplet();\n        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.validatorSrcAddress = (_b = object.validatorSrcAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.validatorDstAddress = (_c = object.validatorDstAddress) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseDVVTriplets() {\n    return { triplets: [] };\n}\nexports.DVVTriplets = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.triplets) {\n            exports.DVVTriplet.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDVVTriplets();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.triplets.push(exports.DVVTriplet.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            triplets: Array.isArray(object === null || object === void 0 ? void 0 : object.triplets)\n                ? object.triplets.map((e) => exports.DVVTriplet.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.triplets) {\n            obj.triplets = message.triplets.map((e) => e ? exports.DVVTriplet.toJSON(e) : undefined);\n        }\n        else {\n            obj.triplets = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseDVVTriplets();\n        message.triplets =\n            ((_a = object.triplets) === null || _a === void 0 ? void 0 : _a.map((e) => exports.DVVTriplet.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseDelegation() {\n    return { delegatorAddress: \"\", validatorAddress: \"\", shares: \"\" };\n}\nexports.Delegation = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(18).string(message.validatorAddress);\n        }\n        if (message.shares !== \"\") {\n            writer.uint32(26).string(message.shares);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDelegation();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.validatorAddress = reader.string();\n                    break;\n                case 3:\n                    message.shares = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            validatorAddress: isSet(object.validatorAddress)\n                ? String(object.validatorAddress)\n                : \"\",\n            shares: isSet(object.shares) ? String(object.shares) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        message.shares !== undefined && (obj.shares = message.shares);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseDelegation();\n        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.validatorAddress = (_b = object.validatorAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.shares = (_c = object.shares) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseUnbondingDelegation() {\n    return { delegatorAddress: \"\", validatorAddress: \"\", entries: [] };\n}\nexports.UnbondingDelegation = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(18).string(message.validatorAddress);\n        }\n        for (const v of message.entries) {\n            exports.UnbondingDelegationEntry.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUnbondingDelegation();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.validatorAddress = reader.string();\n                    break;\n                case 3:\n                    message.entries.push(exports.UnbondingDelegationEntry.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            validatorAddress: isSet(object.validatorAddress)\n                ? String(object.validatorAddress)\n                : \"\",\n            entries: Array.isArray(object === null || object === void 0 ? void 0 : object.entries)\n                ? object.entries.map((e) => exports.UnbondingDelegationEntry.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        if (message.entries) {\n            obj.entries = message.entries.map((e) => e ? exports.UnbondingDelegationEntry.toJSON(e) : undefined);\n        }\n        else {\n            obj.entries = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseUnbondingDelegation();\n        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.validatorAddress = (_b = object.validatorAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.entries =\n            ((_c = object.entries) === null || _c === void 0 ? void 0 : _c.map((e) => exports.UnbondingDelegationEntry.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseUnbondingDelegationEntry() {\n    return {\n        creationHeight: \"0\",\n        completionTime: undefined,\n        initialBalance: \"\",\n        balance: \"\",\n    };\n}\nexports.UnbondingDelegationEntry = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.creationHeight !== \"0\") {\n            writer.uint32(8).int64(message.creationHeight);\n        }\n        if (message.completionTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.initialBalance !== \"\") {\n            writer.uint32(26).string(message.initialBalance);\n        }\n        if (message.balance !== \"\") {\n            writer.uint32(34).string(message.balance);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUnbondingDelegationEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.creationHeight = longToString(reader.int64());\n                    break;\n                case 2:\n                    message.completionTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.initialBalance = reader.string();\n                    break;\n                case 4:\n                    message.balance = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            creationHeight: isSet(object.creationHeight)\n                ? String(object.creationHeight)\n                : \"0\",\n            completionTime: isSet(object.completionTime)\n                ? fromJsonTimestamp(object.completionTime)\n                : undefined,\n            initialBalance: isSet(object.initialBalance)\n                ? String(object.initialBalance)\n                : \"\",\n            balance: isSet(object.balance) ? String(object.balance) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.creationHeight !== undefined &&\n            (obj.creationHeight = message.creationHeight);\n        message.completionTime !== undefined &&\n            (obj.completionTime = message.completionTime.toISOString());\n        message.initialBalance !== undefined &&\n            (obj.initialBalance = message.initialBalance);\n        message.balance !== undefined && (obj.balance = message.balance);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseUnbondingDelegationEntry();\n        message.creationHeight = (_a = object.creationHeight) !== null && _a !== void 0 ? _a : \"0\";\n        message.completionTime = (_b = object.completionTime) !== null && _b !== void 0 ? _b : undefined;\n        message.initialBalance = (_c = object.initialBalance) !== null && _c !== void 0 ? _c : \"\";\n        message.balance = (_d = object.balance) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    },\n};\nfunction createBaseRedelegationEntry() {\n    return {\n        creationHeight: \"0\",\n        completionTime: undefined,\n        initialBalance: \"\",\n        sharesDst: \"\",\n    };\n}\nexports.RedelegationEntry = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.creationHeight !== \"0\") {\n            writer.uint32(8).int64(message.creationHeight);\n        }\n        if (message.completionTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.initialBalance !== \"\") {\n            writer.uint32(26).string(message.initialBalance);\n        }\n        if (message.sharesDst !== \"\") {\n            writer.uint32(34).string(message.sharesDst);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRedelegationEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.creationHeight = longToString(reader.int64());\n                    break;\n                case 2:\n                    message.completionTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.initialBalance = reader.string();\n                    break;\n                case 4:\n                    message.sharesDst = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            creationHeight: isSet(object.creationHeight)\n                ? String(object.creationHeight)\n                : \"0\",\n            completionTime: isSet(object.completionTime)\n                ? fromJsonTimestamp(object.completionTime)\n                : undefined,\n            initialBalance: isSet(object.initialBalance)\n                ? String(object.initialBalance)\n                : \"\",\n            sharesDst: isSet(object.sharesDst) ? String(object.sharesDst) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.creationHeight !== undefined &&\n            (obj.creationHeight = message.creationHeight);\n        message.completionTime !== undefined &&\n            (obj.completionTime = message.completionTime.toISOString());\n        message.initialBalance !== undefined &&\n            (obj.initialBalance = message.initialBalance);\n        message.sharesDst !== undefined && (obj.sharesDst = message.sharesDst);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseRedelegationEntry();\n        message.creationHeight = (_a = object.creationHeight) !== null && _a !== void 0 ? _a : \"0\";\n        message.completionTime = (_b = object.completionTime) !== null && _b !== void 0 ? _b : undefined;\n        message.initialBalance = (_c = object.initialBalance) !== null && _c !== void 0 ? _c : \"\";\n        message.sharesDst = (_d = object.sharesDst) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    },\n};\nfunction createBaseRedelegation() {\n    return {\n        delegatorAddress: \"\",\n        validatorSrcAddress: \"\",\n        validatorDstAddress: \"\",\n        entries: [],\n    };\n}\nexports.Redelegation = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.validatorSrcAddress !== \"\") {\n            writer.uint32(18).string(message.validatorSrcAddress);\n        }\n        if (message.validatorDstAddress !== \"\") {\n            writer.uint32(26).string(message.validatorDstAddress);\n        }\n        for (const v of message.entries) {\n            exports.RedelegationEntry.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRedelegation();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.validatorSrcAddress = reader.string();\n                    break;\n                case 3:\n                    message.validatorDstAddress = reader.string();\n                    break;\n                case 4:\n                    message.entries.push(exports.RedelegationEntry.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            validatorSrcAddress: isSet(object.validatorSrcAddress)\n                ? String(object.validatorSrcAddress)\n                : \"\",\n            validatorDstAddress: isSet(object.validatorDstAddress)\n                ? String(object.validatorDstAddress)\n                : \"\",\n            entries: Array.isArray(object === null || object === void 0 ? void 0 : object.entries)\n                ? object.entries.map((e) => exports.RedelegationEntry.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorSrcAddress !== undefined &&\n            (obj.validatorSrcAddress = message.validatorSrcAddress);\n        message.validatorDstAddress !== undefined &&\n            (obj.validatorDstAddress = message.validatorDstAddress);\n        if (message.entries) {\n            obj.entries = message.entries.map((e) => e ? exports.RedelegationEntry.toJSON(e) : undefined);\n        }\n        else {\n            obj.entries = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseRedelegation();\n        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.validatorSrcAddress = (_b = object.validatorSrcAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.validatorDstAddress = (_c = object.validatorDstAddress) !== null && _c !== void 0 ? _c : \"\";\n        message.entries =\n            ((_d = object.entries) === null || _d === void 0 ? void 0 : _d.map((e) => exports.RedelegationEntry.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseParams() {\n    return {\n        unbondingTime: undefined,\n        maxValidators: 0,\n        maxEntries: 0,\n        historicalEntries: 0,\n        bondDenom: \"\",\n    };\n}\nexports.Params = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.unbondingTime !== undefined) {\n            duration_1.Duration.encode(message.unbondingTime, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.maxValidators !== 0) {\n            writer.uint32(16).uint32(message.maxValidators);\n        }\n        if (message.maxEntries !== 0) {\n            writer.uint32(24).uint32(message.maxEntries);\n        }\n        if (message.historicalEntries !== 0) {\n            writer.uint32(32).uint32(message.historicalEntries);\n        }\n        if (message.bondDenom !== \"\") {\n            writer.uint32(42).string(message.bondDenom);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParams();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.unbondingTime = duration_1.Duration.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.maxValidators = reader.uint32();\n                    break;\n                case 3:\n                    message.maxEntries = reader.uint32();\n                    break;\n                case 4:\n                    message.historicalEntries = reader.uint32();\n                    break;\n                case 5:\n                    message.bondDenom = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            unbondingTime: isSet(object.unbondingTime)\n                ? duration_1.Duration.fromJSON(object.unbondingTime)\n                : undefined,\n            maxValidators: isSet(object.maxValidators)\n                ? Number(object.maxValidators)\n                : 0,\n            maxEntries: isSet(object.maxEntries) ? Number(object.maxEntries) : 0,\n            historicalEntries: isSet(object.historicalEntries)\n                ? Number(object.historicalEntries)\n                : 0,\n            bondDenom: isSet(object.bondDenom) ? String(object.bondDenom) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.unbondingTime !== undefined &&\n            (obj.unbondingTime = message.unbondingTime\n                ? duration_1.Duration.toJSON(message.unbondingTime)\n                : undefined);\n        message.maxValidators !== undefined &&\n            (obj.maxValidators = Math.round(message.maxValidators));\n        message.maxEntries !== undefined &&\n            (obj.maxEntries = Math.round(message.maxEntries));\n        message.historicalEntries !== undefined &&\n            (obj.historicalEntries = Math.round(message.historicalEntries));\n        message.bondDenom !== undefined && (obj.bondDenom = message.bondDenom);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseParams();\n        message.unbondingTime =\n            object.unbondingTime !== undefined && object.unbondingTime !== null\n                ? duration_1.Duration.fromPartial(object.unbondingTime)\n                : undefined;\n        message.maxValidators = (_a = object.maxValidators) !== null && _a !== void 0 ? _a : 0;\n        message.maxEntries = (_b = object.maxEntries) !== null && _b !== void 0 ? _b : 0;\n        message.historicalEntries = (_c = object.historicalEntries) !== null && _c !== void 0 ? _c : 0;\n        message.bondDenom = (_d = object.bondDenom) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    },\n};\nfunction createBaseDelegationResponse() {\n    return { delegation: undefined, balance: undefined };\n}\nexports.DelegationResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegation !== undefined) {\n            exports.Delegation.encode(message.delegation, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.balance !== undefined) {\n            coin_1.Coin.encode(message.balance, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDelegationResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegation = exports.Delegation.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.balance = coin_1.Coin.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegation: isSet(object.delegation)\n                ? exports.Delegation.fromJSON(object.delegation)\n                : undefined,\n            balance: isSet(object.balance)\n                ? coin_1.Coin.fromJSON(object.balance)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegation !== undefined &&\n            (obj.delegation = message.delegation\n                ? exports.Delegation.toJSON(message.delegation)\n                : undefined);\n        message.balance !== undefined &&\n            (obj.balance = message.balance\n                ? coin_1.Coin.toJSON(message.balance)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseDelegationResponse();\n        message.delegation =\n            object.delegation !== undefined && object.delegation !== null\n                ? exports.Delegation.fromPartial(object.delegation)\n                : undefined;\n        message.balance =\n            object.balance !== undefined && object.balance !== null\n                ? coin_1.Coin.fromPartial(object.balance)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseRedelegationEntryResponse() {\n    return { redelegationEntry: undefined, balance: \"\" };\n}\nexports.RedelegationEntryResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.redelegationEntry !== undefined) {\n            exports.RedelegationEntry.encode(message.redelegationEntry, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.balance !== \"\") {\n            writer.uint32(34).string(message.balance);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRedelegationEntryResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.redelegationEntry = exports.RedelegationEntry.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.balance = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            redelegationEntry: isSet(object.redelegationEntry)\n                ? exports.RedelegationEntry.fromJSON(object.redelegationEntry)\n                : undefined,\n            balance: isSet(object.balance) ? String(object.balance) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.redelegationEntry !== undefined &&\n            (obj.redelegationEntry = message.redelegationEntry\n                ? exports.RedelegationEntry.toJSON(message.redelegationEntry)\n                : undefined);\n        message.balance !== undefined && (obj.balance = message.balance);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseRedelegationEntryResponse();\n        message.redelegationEntry =\n            object.redelegationEntry !== undefined &&\n                object.redelegationEntry !== null\n                ? exports.RedelegationEntry.fromPartial(object.redelegationEntry)\n                : undefined;\n        message.balance = (_a = object.balance) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    },\n};\nfunction createBaseRedelegationResponse() {\n    return { redelegation: undefined, entries: [] };\n}\nexports.RedelegationResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.redelegation !== undefined) {\n            exports.Redelegation.encode(message.redelegation, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.entries) {\n            exports.RedelegationEntryResponse.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRedelegationResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.redelegation = exports.Redelegation.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.entries.push(exports.RedelegationEntryResponse.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            redelegation: isSet(object.redelegation)\n                ? exports.Redelegation.fromJSON(object.redelegation)\n                : undefined,\n            entries: Array.isArray(object === null || object === void 0 ? void 0 : object.entries)\n                ? object.entries.map((e) => exports.RedelegationEntryResponse.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.redelegation !== undefined &&\n            (obj.redelegation = message.redelegation\n                ? exports.Redelegation.toJSON(message.redelegation)\n                : undefined);\n        if (message.entries) {\n            obj.entries = message.entries.map((e) => e ? exports.RedelegationEntryResponse.toJSON(e) : undefined);\n        }\n        else {\n            obj.entries = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseRedelegationResponse();\n        message.redelegation =\n            object.redelegation !== undefined && object.redelegation !== null\n                ? exports.Redelegation.fromPartial(object.redelegation)\n                : undefined;\n        message.entries =\n            ((_a = object.entries) === null || _a === void 0 ? void 0 : _a.map((e) => exports.RedelegationEntryResponse.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nfunction createBasePool() {\n    return { notBondedTokens: \"\", bondedTokens: \"\" };\n}\nexports.Pool = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.notBondedTokens !== \"\") {\n            writer.uint32(10).string(message.notBondedTokens);\n        }\n        if (message.bondedTokens !== \"\") {\n            writer.uint32(18).string(message.bondedTokens);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePool();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.notBondedTokens = reader.string();\n                    break;\n                case 2:\n                    message.bondedTokens = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            notBondedTokens: isSet(object.notBondedTokens)\n                ? String(object.notBondedTokens)\n                : \"\",\n            bondedTokens: isSet(object.bondedTokens)\n                ? String(object.bondedTokens)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.notBondedTokens !== undefined &&\n            (obj.notBondedTokens = message.notBondedTokens);\n        message.bondedTokens !== undefined &&\n            (obj.bondedTokens = message.bondedTokens);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBasePool();\n        message.notBondedTokens = (_a = object.notBondedTokens) !== null && _a !== void 0 ? _a : \"\";\n        message.bondedTokens = (_b = object.bondedTokens) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction toTimestamp(date) {\n    const seconds = Math.trunc(date.getTime() / 1000).toString();\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = Number(t.seconds) * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=staking.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/staking.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/tx.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/tx.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgUndelegateResponse = exports.MsgUndelegate = exports.MsgBeginRedelegateResponse = exports.MsgBeginRedelegate = exports.MsgDelegateResponse = exports.MsgDelegate = exports.MsgEditValidatorResponse = exports.MsgEditValidator = exports.MsgCreateValidatorResponse = exports.MsgCreateValidator = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst timestamp_1 = __webpack_require__(/*! ../../../google/protobuf/timestamp */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/timestamp.js\");\nconst staking_1 = __webpack_require__(/*! ../../../cosmos/staking/v1beta1/staking */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/staking.js\");\nconst any_1 = __webpack_require__(/*! ../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nexports.protobufPackage = \"cosmos.staking.v1beta1\";\nfunction createBaseMsgCreateValidator() {\n    return {\n        description: undefined,\n        commission: undefined,\n        minSelfDelegation: \"\",\n        delegatorAddress: \"\",\n        validatorAddress: \"\",\n        pubkey: undefined,\n        value: undefined,\n    };\n}\nexports.MsgCreateValidator = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.description !== undefined) {\n            staking_1.Description.encode(message.description, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.commission !== undefined) {\n            staking_1.CommissionRates.encode(message.commission, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.minSelfDelegation !== \"\") {\n            writer.uint32(26).string(message.minSelfDelegation);\n        }\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(34).string(message.delegatorAddress);\n        }\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(42).string(message.validatorAddress);\n        }\n        if (message.pubkey !== undefined) {\n            any_1.Any.encode(message.pubkey, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.value !== undefined) {\n            coin_1.Coin.encode(message.value, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgCreateValidator();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.description = staking_1.Description.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.commission = staking_1.CommissionRates.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.minSelfDelegation = reader.string();\n                    break;\n                case 4:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 5:\n                    message.validatorAddress = reader.string();\n                    break;\n                case 6:\n                    message.pubkey = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.value = coin_1.Coin.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            description: isSet(object.description)\n                ? staking_1.Description.fromJSON(object.description)\n                : undefined,\n            commission: isSet(object.commission)\n                ? staking_1.CommissionRates.fromJSON(object.commission)\n                : undefined,\n            minSelfDelegation: isSet(object.minSelfDelegation)\n                ? String(object.minSelfDelegation)\n                : \"\",\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            validatorAddress: isSet(object.validatorAddress)\n                ? String(object.validatorAddress)\n                : \"\",\n            pubkey: isSet(object.pubkey) ? any_1.Any.fromJSON(object.pubkey) : undefined,\n            value: isSet(object.value) ? coin_1.Coin.fromJSON(object.value) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.description !== undefined &&\n            (obj.description = message.description\n                ? staking_1.Description.toJSON(message.description)\n                : undefined);\n        message.commission !== undefined &&\n            (obj.commission = message.commission\n                ? staking_1.CommissionRates.toJSON(message.commission)\n                : undefined);\n        message.minSelfDelegation !== undefined &&\n            (obj.minSelfDelegation = message.minSelfDelegation);\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        message.pubkey !== undefined &&\n            (obj.pubkey = message.pubkey ? any_1.Any.toJSON(message.pubkey) : undefined);\n        message.value !== undefined &&\n            (obj.value = message.value ? coin_1.Coin.toJSON(message.value) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMsgCreateValidator();\n        message.description =\n            object.description !== undefined && object.description !== null\n                ? staking_1.Description.fromPartial(object.description)\n                : undefined;\n        message.commission =\n            object.commission !== undefined && object.commission !== null\n                ? staking_1.CommissionRates.fromPartial(object.commission)\n                : undefined;\n        message.minSelfDelegation = (_a = object.minSelfDelegation) !== null && _a !== void 0 ? _a : \"\";\n        message.delegatorAddress = (_b = object.delegatorAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.validatorAddress = (_c = object.validatorAddress) !== null && _c !== void 0 ? _c : \"\";\n        message.pubkey =\n            object.pubkey !== undefined && object.pubkey !== null\n                ? any_1.Any.fromPartial(object.pubkey)\n                : undefined;\n        message.value =\n            object.value !== undefined && object.value !== null\n                ? coin_1.Coin.fromPartial(object.value)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseMsgCreateValidatorResponse() {\n    return {};\n}\nexports.MsgCreateValidatorResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgCreateValidatorResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgCreateValidatorResponse();\n        return message;\n    },\n};\nfunction createBaseMsgEditValidator() {\n    return {\n        description: undefined,\n        validatorAddress: \"\",\n        commissionRate: \"\",\n        minSelfDelegation: \"\",\n    };\n}\nexports.MsgEditValidator = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.description !== undefined) {\n            staking_1.Description.encode(message.description, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(18).string(message.validatorAddress);\n        }\n        if (message.commissionRate !== \"\") {\n            writer.uint32(26).string(message.commissionRate);\n        }\n        if (message.minSelfDelegation !== \"\") {\n            writer.uint32(34).string(message.minSelfDelegation);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgEditValidator();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.description = staking_1.Description.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.validatorAddress = reader.string();\n                    break;\n                case 3:\n                    message.commissionRate = reader.string();\n                    break;\n                case 4:\n                    message.minSelfDelegation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            description: isSet(object.description)\n                ? staking_1.Description.fromJSON(object.description)\n                : undefined,\n            validatorAddress: isSet(object.validatorAddress)\n                ? String(object.validatorAddress)\n                : \"\",\n            commissionRate: isSet(object.commissionRate)\n                ? String(object.commissionRate)\n                : \"\",\n            minSelfDelegation: isSet(object.minSelfDelegation)\n                ? String(object.minSelfDelegation)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.description !== undefined &&\n            (obj.description = message.description\n                ? staking_1.Description.toJSON(message.description)\n                : undefined);\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        message.commissionRate !== undefined &&\n            (obj.commissionRate = message.commissionRate);\n        message.minSelfDelegation !== undefined &&\n            (obj.minSelfDelegation = message.minSelfDelegation);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMsgEditValidator();\n        message.description =\n            object.description !== undefined && object.description !== null\n                ? staking_1.Description.fromPartial(object.description)\n                : undefined;\n        message.validatorAddress = (_a = object.validatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.commissionRate = (_b = object.commissionRate) !== null && _b !== void 0 ? _b : \"\";\n        message.minSelfDelegation = (_c = object.minSelfDelegation) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgEditValidatorResponse() {\n    return {};\n}\nexports.MsgEditValidatorResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgEditValidatorResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgEditValidatorResponse();\n        return message;\n    },\n};\nfunction createBaseMsgDelegate() {\n    return { delegatorAddress: \"\", validatorAddress: \"\", amount: undefined };\n}\nexports.MsgDelegate = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(18).string(message.validatorAddress);\n        }\n        if (message.amount !== undefined) {\n            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgDelegate();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.validatorAddress = reader.string();\n                    break;\n                case 3:\n                    message.amount = coin_1.Coin.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            validatorAddress: isSet(object.validatorAddress)\n                ? String(object.validatorAddress)\n                : \"\",\n            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        message.amount !== undefined &&\n            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgDelegate();\n        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.validatorAddress = (_b = object.validatorAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.amount =\n            object.amount !== undefined && object.amount !== null\n                ? coin_1.Coin.fromPartial(object.amount)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseMsgDelegateResponse() {\n    return {};\n}\nexports.MsgDelegateResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgDelegateResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgDelegateResponse();\n        return message;\n    },\n};\nfunction createBaseMsgBeginRedelegate() {\n    return {\n        delegatorAddress: \"\",\n        validatorSrcAddress: \"\",\n        validatorDstAddress: \"\",\n        amount: undefined,\n    };\n}\nexports.MsgBeginRedelegate = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.validatorSrcAddress !== \"\") {\n            writer.uint32(18).string(message.validatorSrcAddress);\n        }\n        if (message.validatorDstAddress !== \"\") {\n            writer.uint32(26).string(message.validatorDstAddress);\n        }\n        if (message.amount !== undefined) {\n            coin_1.Coin.encode(message.amount, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgBeginRedelegate();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.validatorSrcAddress = reader.string();\n                    break;\n                case 3:\n                    message.validatorDstAddress = reader.string();\n                    break;\n                case 4:\n                    message.amount = coin_1.Coin.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            validatorSrcAddress: isSet(object.validatorSrcAddress)\n                ? String(object.validatorSrcAddress)\n                : \"\",\n            validatorDstAddress: isSet(object.validatorDstAddress)\n                ? String(object.validatorDstAddress)\n                : \"\",\n            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorSrcAddress !== undefined &&\n            (obj.validatorSrcAddress = message.validatorSrcAddress);\n        message.validatorDstAddress !== undefined &&\n            (obj.validatorDstAddress = message.validatorDstAddress);\n        message.amount !== undefined &&\n            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMsgBeginRedelegate();\n        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.validatorSrcAddress = (_b = object.validatorSrcAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.validatorDstAddress = (_c = object.validatorDstAddress) !== null && _c !== void 0 ? _c : \"\";\n        message.amount =\n            object.amount !== undefined && object.amount !== null\n                ? coin_1.Coin.fromPartial(object.amount)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseMsgBeginRedelegateResponse() {\n    return { completionTime: undefined };\n}\nexports.MsgBeginRedelegateResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.completionTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgBeginRedelegateResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.completionTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            completionTime: isSet(object.completionTime)\n                ? fromJsonTimestamp(object.completionTime)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.completionTime !== undefined &&\n            (obj.completionTime = message.completionTime.toISOString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMsgBeginRedelegateResponse();\n        message.completionTime = (_a = object.completionTime) !== null && _a !== void 0 ? _a : undefined;\n        return message;\n    },\n};\nfunction createBaseMsgUndelegate() {\n    return { delegatorAddress: \"\", validatorAddress: \"\", amount: undefined };\n}\nexports.MsgUndelegate = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(18).string(message.validatorAddress);\n        }\n        if (message.amount !== undefined) {\n            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUndelegate();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.validatorAddress = reader.string();\n                    break;\n                case 3:\n                    message.amount = coin_1.Coin.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            delegatorAddress: isSet(object.delegatorAddress)\n                ? String(object.delegatorAddress)\n                : \"\",\n            validatorAddress: isSet(object.validatorAddress)\n                ? String(object.validatorAddress)\n                : \"\",\n            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        message.amount !== undefined &&\n            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgUndelegate();\n        message.delegatorAddress = (_a = object.delegatorAddress) !== null && _a !== void 0 ? _a : \"\";\n        message.validatorAddress = (_b = object.validatorAddress) !== null && _b !== void 0 ? _b : \"\";\n        message.amount =\n            object.amount !== undefined && object.amount !== null\n                ? coin_1.Coin.fromPartial(object.amount)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseMsgUndelegateResponse() {\n    return { completionTime: undefined };\n}\nexports.MsgUndelegateResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.completionTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUndelegateResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.completionTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            completionTime: isSet(object.completionTime)\n                ? fromJsonTimestamp(object.completionTime)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.completionTime !== undefined &&\n            (obj.completionTime = message.completionTime.toISOString());\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMsgUndelegateResponse();\n        message.completionTime = (_a = object.completionTime) !== null && _a !== void 0 ? _a : undefined;\n        return message;\n    },\n};\nfunction toTimestamp(date) {\n    const seconds = Math.trunc(date.getTime() / 1000).toString();\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = Number(t.seconds) * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=tx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/staking/v1beta1/tx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/tx/signing/v1beta1/signing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/tx/signing/v1beta1/signing.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SignatureDescriptor_Data_Multi = exports.SignatureDescriptor_Data_Single = exports.SignatureDescriptor_Data = exports.SignatureDescriptor = exports.SignatureDescriptors = exports.signModeToJSON = exports.signModeFromJSON = exports.SignMode = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst any_1 = __webpack_require__(/*! ../../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nconst multisig_1 = __webpack_require__(/*! ../../../../cosmos/crypto/multisig/v1beta1/multisig */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/crypto/multisig/v1beta1/multisig.js\");\nexports.protobufPackage = \"cosmos.tx.signing.v1beta1\";\n/** SignMode represents a signing mode with its own security guarantees. */\nvar SignMode;\n(function (SignMode) {\n    /**\n     * SIGN_MODE_UNSPECIFIED - SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\n     * rejected\n     */\n    SignMode[SignMode[\"SIGN_MODE_UNSPECIFIED\"] = 0] = \"SIGN_MODE_UNSPECIFIED\";\n    /**\n     * SIGN_MODE_DIRECT - SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\n     * verified with raw bytes from Tx\n     */\n    SignMode[SignMode[\"SIGN_MODE_DIRECT\"] = 1] = \"SIGN_MODE_DIRECT\";\n    /**\n     * SIGN_MODE_TEXTUAL - SIGN_MODE_TEXTUAL is a future signing mode that will verify some\n     * human-readable textual representation on top of the binary representation\n     * from SIGN_MODE_DIRECT\n     */\n    SignMode[SignMode[\"SIGN_MODE_TEXTUAL\"] = 2] = \"SIGN_MODE_TEXTUAL\";\n    /**\n     * SIGN_MODE_LEGACY_AMINO_JSON - SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\n     * Amino JSON and will be removed in the future\n     */\n    SignMode[SignMode[\"SIGN_MODE_LEGACY_AMINO_JSON\"] = 127] = \"SIGN_MODE_LEGACY_AMINO_JSON\";\n    SignMode[SignMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SignMode = exports.SignMode || (exports.SignMode = {}));\nfunction signModeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"SIGN_MODE_UNSPECIFIED\":\n            return SignMode.SIGN_MODE_UNSPECIFIED;\n        case 1:\n        case \"SIGN_MODE_DIRECT\":\n            return SignMode.SIGN_MODE_DIRECT;\n        case 2:\n        case \"SIGN_MODE_TEXTUAL\":\n            return SignMode.SIGN_MODE_TEXTUAL;\n        case 127:\n        case \"SIGN_MODE_LEGACY_AMINO_JSON\":\n            return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SignMode.UNRECOGNIZED;\n    }\n}\nexports.signModeFromJSON = signModeFromJSON;\nfunction signModeToJSON(object) {\n    switch (object) {\n        case SignMode.SIGN_MODE_UNSPECIFIED:\n            return \"SIGN_MODE_UNSPECIFIED\";\n        case SignMode.SIGN_MODE_DIRECT:\n            return \"SIGN_MODE_DIRECT\";\n        case SignMode.SIGN_MODE_TEXTUAL:\n            return \"SIGN_MODE_TEXTUAL\";\n        case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:\n            return \"SIGN_MODE_LEGACY_AMINO_JSON\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.signModeToJSON = signModeToJSON;\nfunction createBaseSignatureDescriptors() {\n    return { signatures: [] };\n}\nexports.SignatureDescriptors = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.signatures) {\n            exports.SignatureDescriptor.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignatureDescriptors();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signatures.push(exports.SignatureDescriptor.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            signatures: Array.isArray(object === null || object === void 0 ? void 0 : object.signatures)\n                ? object.signatures.map((e) => exports.SignatureDescriptor.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => e ? exports.SignatureDescriptor.toJSON(e) : undefined);\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignatureDescriptors();\n        message.signatures =\n            ((_a = object.signatures) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SignatureDescriptor.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseSignatureDescriptor() {\n    return { publicKey: undefined, data: undefined, sequence: \"0\" };\n}\nexports.SignatureDescriptor = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.publicKey !== undefined) {\n            any_1.Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.data !== undefined) {\n            exports.SignatureDescriptor_Data.encode(message.data, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.sequence !== \"0\") {\n            writer.uint32(24).uint64(message.sequence);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignatureDescriptor();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.publicKey = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.data = exports.SignatureDescriptor_Data.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.sequence = longToString(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            publicKey: isSet(object.publicKey)\n                ? any_1.Any.fromJSON(object.publicKey)\n                : undefined,\n            data: isSet(object.data)\n                ? exports.SignatureDescriptor_Data.fromJSON(object.data)\n                : undefined,\n            sequence: isSet(object.sequence) ? String(object.sequence) : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.publicKey !== undefined &&\n            (obj.publicKey = message.publicKey\n                ? any_1.Any.toJSON(message.publicKey)\n                : undefined);\n        message.data !== undefined &&\n            (obj.data = message.data\n                ? exports.SignatureDescriptor_Data.toJSON(message.data)\n                : undefined);\n        message.sequence !== undefined && (obj.sequence = message.sequence);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignatureDescriptor();\n        message.publicKey =\n            object.publicKey !== undefined && object.publicKey !== null\n                ? any_1.Any.fromPartial(object.publicKey)\n                : undefined;\n        message.data =\n            object.data !== undefined && object.data !== null\n                ? exports.SignatureDescriptor_Data.fromPartial(object.data)\n                : undefined;\n        message.sequence = (_a = object.sequence) !== null && _a !== void 0 ? _a : \"0\";\n        return message;\n    },\n};\nfunction createBaseSignatureDescriptor_Data() {\n    return { single: undefined, multi: undefined };\n}\nexports.SignatureDescriptor_Data = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.single !== undefined) {\n            exports.SignatureDescriptor_Data_Single.encode(message.single, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.multi !== undefined) {\n            exports.SignatureDescriptor_Data_Multi.encode(message.multi, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignatureDescriptor_Data();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.single = exports.SignatureDescriptor_Data_Single.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.multi = exports.SignatureDescriptor_Data_Multi.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            single: isSet(object.single)\n                ? exports.SignatureDescriptor_Data_Single.fromJSON(object.single)\n                : undefined,\n            multi: isSet(object.multi)\n                ? exports.SignatureDescriptor_Data_Multi.fromJSON(object.multi)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.single !== undefined &&\n            (obj.single = message.single\n                ? exports.SignatureDescriptor_Data_Single.toJSON(message.single)\n                : undefined);\n        message.multi !== undefined &&\n            (obj.multi = message.multi\n                ? exports.SignatureDescriptor_Data_Multi.toJSON(message.multi)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignatureDescriptor_Data();\n        message.single =\n            object.single !== undefined && object.single !== null\n                ? exports.SignatureDescriptor_Data_Single.fromPartial(object.single)\n                : undefined;\n        message.multi =\n            object.multi !== undefined && object.multi !== null\n                ? exports.SignatureDescriptor_Data_Multi.fromPartial(object.multi)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignatureDescriptor_Data_Single() {\n    return { mode: 0, signature: new Uint8Array() };\n}\nexports.SignatureDescriptor_Data_Single = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mode !== 0) {\n            writer.uint32(8).int32(message.mode);\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(18).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignatureDescriptor_Data_Single();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mode = reader.int32();\n                    break;\n                case 2:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            mode: isSet(object.mode) ? signModeFromJSON(object.mode) : 0,\n            signature: isSet(object.signature)\n                ? bytesFromBase64(object.signature)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mode !== undefined && (obj.mode = signModeToJSON(message.mode));\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseSignatureDescriptor_Data_Single();\n        message.mode = (_a = object.mode) !== null && _a !== void 0 ? _a : 0;\n        message.signature = (_b = object.signature) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSignatureDescriptor_Data_Multi() {\n    return { bitarray: undefined, signatures: [] };\n}\nexports.SignatureDescriptor_Data_Multi = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.bitarray !== undefined) {\n            multisig_1.CompactBitArray.encode(message.bitarray, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.signatures) {\n            exports.SignatureDescriptor_Data.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignatureDescriptor_Data_Multi();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bitarray = multisig_1.CompactBitArray.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.signatures.push(exports.SignatureDescriptor_Data.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bitarray: isSet(object.bitarray)\n                ? multisig_1.CompactBitArray.fromJSON(object.bitarray)\n                : undefined,\n            signatures: Array.isArray(object === null || object === void 0 ? void 0 : object.signatures)\n                ? object.signatures.map((e) => exports.SignatureDescriptor_Data.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bitarray !== undefined &&\n            (obj.bitarray = message.bitarray\n                ? multisig_1.CompactBitArray.toJSON(message.bitarray)\n                : undefined);\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => e ? exports.SignatureDescriptor_Data.toJSON(e) : undefined);\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignatureDescriptor_Data_Multi();\n        message.bitarray =\n            object.bitarray !== undefined && object.bitarray !== null\n                ? multisig_1.CompactBitArray.fromPartial(object.bitarray)\n                : undefined;\n        message.signatures =\n            ((_a = object.signatures) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SignatureDescriptor_Data.fromPartial(e))) ||\n                [];\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=signing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/tx/signing/v1beta1/signing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx.js":
/*!************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Fee = exports.ModeInfo_Multi = exports.ModeInfo_Single = exports.ModeInfo = exports.SignerInfo = exports.AuthInfo = exports.TxBody = exports.SignDoc = exports.TxRaw = exports.Tx = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst signing_1 = __webpack_require__(/*! ../../../cosmos/tx/signing/v1beta1/signing */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/tx/signing/v1beta1/signing.js\");\nconst any_1 = __webpack_require__(/*! ../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nconst multisig_1 = __webpack_require__(/*! ../../../cosmos/crypto/multisig/v1beta1/multisig */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/crypto/multisig/v1beta1/multisig.js\");\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nexports.protobufPackage = \"cosmos.tx.v1beta1\";\nfunction createBaseTx() {\n    return { body: undefined, authInfo: undefined, signatures: [] };\n}\nexports.Tx = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.body !== undefined) {\n            exports.TxBody.encode(message.body, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.authInfo !== undefined) {\n            exports.AuthInfo.encode(message.authInfo, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.signatures) {\n            writer.uint32(26).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTx();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.body = exports.TxBody.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.authInfo = exports.AuthInfo.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.signatures.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            body: isSet(object.body) ? exports.TxBody.fromJSON(object.body) : undefined,\n            authInfo: isSet(object.authInfo)\n                ? exports.AuthInfo.fromJSON(object.authInfo)\n                : undefined,\n            signatures: Array.isArray(object === null || object === void 0 ? void 0 : object.signatures)\n                ? object.signatures.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.body !== undefined &&\n            (obj.body = message.body ? exports.TxBody.toJSON(message.body) : undefined);\n        message.authInfo !== undefined &&\n            (obj.authInfo = message.authInfo\n                ? exports.AuthInfo.toJSON(message.authInfo)\n                : undefined);\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseTx();\n        message.body =\n            object.body !== undefined && object.body !== null\n                ? exports.TxBody.fromPartial(object.body)\n                : undefined;\n        message.authInfo =\n            object.authInfo !== undefined && object.authInfo !== null\n                ? exports.AuthInfo.fromPartial(object.authInfo)\n                : undefined;\n        message.signatures = ((_a = object.signatures) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseTxRaw() {\n    return {\n        bodyBytes: new Uint8Array(),\n        authInfoBytes: new Uint8Array(),\n        signatures: [],\n    };\n}\nexports.TxRaw = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.bodyBytes.length !== 0) {\n            writer.uint32(10).bytes(message.bodyBytes);\n        }\n        if (message.authInfoBytes.length !== 0) {\n            writer.uint32(18).bytes(message.authInfoBytes);\n        }\n        for (const v of message.signatures) {\n            writer.uint32(26).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTxRaw();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bodyBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.authInfoBytes = reader.bytes();\n                    break;\n                case 3:\n                    message.signatures.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bodyBytes: isSet(object.bodyBytes)\n                ? bytesFromBase64(object.bodyBytes)\n                : new Uint8Array(),\n            authInfoBytes: isSet(object.authInfoBytes)\n                ? bytesFromBase64(object.authInfoBytes)\n                : new Uint8Array(),\n            signatures: Array.isArray(object === null || object === void 0 ? void 0 : object.signatures)\n                ? object.signatures.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bodyBytes !== undefined &&\n            (obj.bodyBytes = base64FromBytes(message.bodyBytes !== undefined ? message.bodyBytes : new Uint8Array()));\n        message.authInfoBytes !== undefined &&\n            (obj.authInfoBytes = base64FromBytes(message.authInfoBytes !== undefined\n                ? message.authInfoBytes\n                : new Uint8Array()));\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseTxRaw();\n        message.bodyBytes = (_a = object.bodyBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.authInfoBytes = (_b = object.authInfoBytes) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.signatures = ((_c = object.signatures) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseSignDoc() {\n    return {\n        bodyBytes: new Uint8Array(),\n        authInfoBytes: new Uint8Array(),\n        chainId: \"\",\n        accountNumber: \"0\",\n    };\n}\nexports.SignDoc = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.bodyBytes.length !== 0) {\n            writer.uint32(10).bytes(message.bodyBytes);\n        }\n        if (message.authInfoBytes.length !== 0) {\n            writer.uint32(18).bytes(message.authInfoBytes);\n        }\n        if (message.chainId !== \"\") {\n            writer.uint32(26).string(message.chainId);\n        }\n        if (message.accountNumber !== \"0\") {\n            writer.uint32(32).uint64(message.accountNumber);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignDoc();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bodyBytes = reader.bytes();\n                    break;\n                case 2:\n                    message.authInfoBytes = reader.bytes();\n                    break;\n                case 3:\n                    message.chainId = reader.string();\n                    break;\n                case 4:\n                    message.accountNumber = longToString(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bodyBytes: isSet(object.bodyBytes)\n                ? bytesFromBase64(object.bodyBytes)\n                : new Uint8Array(),\n            authInfoBytes: isSet(object.authInfoBytes)\n                ? bytesFromBase64(object.authInfoBytes)\n                : new Uint8Array(),\n            chainId: isSet(object.chainId) ? String(object.chainId) : \"\",\n            accountNumber: isSet(object.accountNumber)\n                ? String(object.accountNumber)\n                : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bodyBytes !== undefined &&\n            (obj.bodyBytes = base64FromBytes(message.bodyBytes !== undefined ? message.bodyBytes : new Uint8Array()));\n        message.authInfoBytes !== undefined &&\n            (obj.authInfoBytes = base64FromBytes(message.authInfoBytes !== undefined\n                ? message.authInfoBytes\n                : new Uint8Array()));\n        message.chainId !== undefined && (obj.chainId = message.chainId);\n        message.accountNumber !== undefined &&\n            (obj.accountNumber = message.accountNumber);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseSignDoc();\n        message.bodyBytes = (_a = object.bodyBytes) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.authInfoBytes = (_b = object.authInfoBytes) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.chainId = (_c = object.chainId) !== null && _c !== void 0 ? _c : \"\";\n        message.accountNumber = (_d = object.accountNumber) !== null && _d !== void 0 ? _d : \"0\";\n        return message;\n    },\n};\nfunction createBaseTxBody() {\n    return {\n        messages: [],\n        memo: \"\",\n        timeoutHeight: \"0\",\n        extensionOptions: [],\n        nonCriticalExtensionOptions: [],\n    };\n}\nexports.TxBody = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.messages) {\n            any_1.Any.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.memo !== \"\") {\n            writer.uint32(18).string(message.memo);\n        }\n        if (message.timeoutHeight !== \"0\") {\n            writer.uint32(24).uint64(message.timeoutHeight);\n        }\n        for (const v of message.extensionOptions) {\n            any_1.Any.encode(v, writer.uint32(8186).fork()).ldelim();\n        }\n        for (const v of message.nonCriticalExtensionOptions) {\n            any_1.Any.encode(v, writer.uint32(16378).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTxBody();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.messages.push(any_1.Any.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.memo = reader.string();\n                    break;\n                case 3:\n                    message.timeoutHeight = longToString(reader.uint64());\n                    break;\n                case 1023:\n                    message.extensionOptions.push(any_1.Any.decode(reader, reader.uint32()));\n                    break;\n                case 2047:\n                    message.nonCriticalExtensionOptions.push(any_1.Any.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            messages: Array.isArray(object === null || object === void 0 ? void 0 : object.messages)\n                ? object.messages.map((e) => any_1.Any.fromJSON(e))\n                : [],\n            memo: isSet(object.memo) ? String(object.memo) : \"\",\n            timeoutHeight: isSet(object.timeoutHeight)\n                ? String(object.timeoutHeight)\n                : \"0\",\n            extensionOptions: Array.isArray(object === null || object === void 0 ? void 0 : object.extensionOptions)\n                ? object.extensionOptions.map((e) => any_1.Any.fromJSON(e))\n                : [],\n            nonCriticalExtensionOptions: Array.isArray(object === null || object === void 0 ? void 0 : object.nonCriticalExtensionOptions)\n                ? object.nonCriticalExtensionOptions.map((e) => any_1.Any.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.messages) {\n            obj.messages = message.messages.map((e) => e ? any_1.Any.toJSON(e) : undefined);\n        }\n        else {\n            obj.messages = [];\n        }\n        message.memo !== undefined && (obj.memo = message.memo);\n        message.timeoutHeight !== undefined &&\n            (obj.timeoutHeight = message.timeoutHeight);\n        if (message.extensionOptions) {\n            obj.extensionOptions = message.extensionOptions.map((e) => e ? any_1.Any.toJSON(e) : undefined);\n        }\n        else {\n            obj.extensionOptions = [];\n        }\n        if (message.nonCriticalExtensionOptions) {\n            obj.nonCriticalExtensionOptions = message.nonCriticalExtensionOptions.map((e) => (e ? any_1.Any.toJSON(e) : undefined));\n        }\n        else {\n            obj.nonCriticalExtensionOptions = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseTxBody();\n        message.messages = ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => any_1.Any.fromPartial(e))) || [];\n        message.memo = (_b = object.memo) !== null && _b !== void 0 ? _b : \"\";\n        message.timeoutHeight = (_c = object.timeoutHeight) !== null && _c !== void 0 ? _c : \"0\";\n        message.extensionOptions =\n            ((_d = object.extensionOptions) === null || _d === void 0 ? void 0 : _d.map((e) => any_1.Any.fromPartial(e))) || [];\n        message.nonCriticalExtensionOptions =\n            ((_e = object.nonCriticalExtensionOptions) === null || _e === void 0 ? void 0 : _e.map((e) => any_1.Any.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseAuthInfo() {\n    return { signerInfos: [], fee: undefined };\n}\nexports.AuthInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.signerInfos) {\n            exports.SignerInfo.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.fee !== undefined) {\n            exports.Fee.encode(message.fee, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAuthInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signerInfos.push(exports.SignerInfo.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.fee = exports.Fee.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            signerInfos: Array.isArray(object === null || object === void 0 ? void 0 : object.signerInfos)\n                ? object.signerInfos.map((e) => exports.SignerInfo.fromJSON(e))\n                : [],\n            fee: isSet(object.fee) ? exports.Fee.fromJSON(object.fee) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.signerInfos) {\n            obj.signerInfos = message.signerInfos.map((e) => e ? exports.SignerInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.signerInfos = [];\n        }\n        message.fee !== undefined &&\n            (obj.fee = message.fee ? exports.Fee.toJSON(message.fee) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseAuthInfo();\n        message.signerInfos =\n            ((_a = object.signerInfos) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SignerInfo.fromPartial(e))) || [];\n        message.fee =\n            object.fee !== undefined && object.fee !== null\n                ? exports.Fee.fromPartial(object.fee)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSignerInfo() {\n    return { publicKey: undefined, modeInfo: undefined, sequence: \"0\" };\n}\nexports.SignerInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.publicKey !== undefined) {\n            any_1.Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.modeInfo !== undefined) {\n            exports.ModeInfo.encode(message.modeInfo, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.sequence !== \"0\") {\n            writer.uint32(24).uint64(message.sequence);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignerInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.publicKey = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.modeInfo = exports.ModeInfo.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.sequence = longToString(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            publicKey: isSet(object.publicKey)\n                ? any_1.Any.fromJSON(object.publicKey)\n                : undefined,\n            modeInfo: isSet(object.modeInfo)\n                ? exports.ModeInfo.fromJSON(object.modeInfo)\n                : undefined,\n            sequence: isSet(object.sequence) ? String(object.sequence) : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.publicKey !== undefined &&\n            (obj.publicKey = message.publicKey\n                ? any_1.Any.toJSON(message.publicKey)\n                : undefined);\n        message.modeInfo !== undefined &&\n            (obj.modeInfo = message.modeInfo\n                ? exports.ModeInfo.toJSON(message.modeInfo)\n                : undefined);\n        message.sequence !== undefined && (obj.sequence = message.sequence);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSignerInfo();\n        message.publicKey =\n            object.publicKey !== undefined && object.publicKey !== null\n                ? any_1.Any.fromPartial(object.publicKey)\n                : undefined;\n        message.modeInfo =\n            object.modeInfo !== undefined && object.modeInfo !== null\n                ? exports.ModeInfo.fromPartial(object.modeInfo)\n                : undefined;\n        message.sequence = (_a = object.sequence) !== null && _a !== void 0 ? _a : \"0\";\n        return message;\n    },\n};\nfunction createBaseModeInfo() {\n    return { single: undefined, multi: undefined };\n}\nexports.ModeInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.single !== undefined) {\n            exports.ModeInfo_Single.encode(message.single, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.multi !== undefined) {\n            exports.ModeInfo_Multi.encode(message.multi, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseModeInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.single = exports.ModeInfo_Single.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.multi = exports.ModeInfo_Multi.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            single: isSet(object.single)\n                ? exports.ModeInfo_Single.fromJSON(object.single)\n                : undefined,\n            multi: isSet(object.multi)\n                ? exports.ModeInfo_Multi.fromJSON(object.multi)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.single !== undefined &&\n            (obj.single = message.single\n                ? exports.ModeInfo_Single.toJSON(message.single)\n                : undefined);\n        message.multi !== undefined &&\n            (obj.multi = message.multi\n                ? exports.ModeInfo_Multi.toJSON(message.multi)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseModeInfo();\n        message.single =\n            object.single !== undefined && object.single !== null\n                ? exports.ModeInfo_Single.fromPartial(object.single)\n                : undefined;\n        message.multi =\n            object.multi !== undefined && object.multi !== null\n                ? exports.ModeInfo_Multi.fromPartial(object.multi)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseModeInfo_Single() {\n    return { mode: 0 };\n}\nexports.ModeInfo_Single = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mode !== 0) {\n            writer.uint32(8).int32(message.mode);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseModeInfo_Single();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mode = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            mode: isSet(object.mode) ? (0, signing_1.signModeFromJSON)(object.mode) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mode !== undefined && (obj.mode = (0, signing_1.signModeToJSON)(message.mode));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseModeInfo_Single();\n        message.mode = (_a = object.mode) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    },\n};\nfunction createBaseModeInfo_Multi() {\n    return { bitarray: undefined, modeInfos: [] };\n}\nexports.ModeInfo_Multi = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.bitarray !== undefined) {\n            multisig_1.CompactBitArray.encode(message.bitarray, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.modeInfos) {\n            exports.ModeInfo.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseModeInfo_Multi();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bitarray = multisig_1.CompactBitArray.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.modeInfos.push(exports.ModeInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            bitarray: isSet(object.bitarray)\n                ? multisig_1.CompactBitArray.fromJSON(object.bitarray)\n                : undefined,\n            modeInfos: Array.isArray(object === null || object === void 0 ? void 0 : object.modeInfos)\n                ? object.modeInfos.map((e) => exports.ModeInfo.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bitarray !== undefined &&\n            (obj.bitarray = message.bitarray\n                ? multisig_1.CompactBitArray.toJSON(message.bitarray)\n                : undefined);\n        if (message.modeInfos) {\n            obj.modeInfos = message.modeInfos.map((e) => e ? exports.ModeInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.modeInfos = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseModeInfo_Multi();\n        message.bitarray =\n            object.bitarray !== undefined && object.bitarray !== null\n                ? multisig_1.CompactBitArray.fromPartial(object.bitarray)\n                : undefined;\n        message.modeInfos =\n            ((_a = object.modeInfos) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ModeInfo.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseFee() {\n    return { amount: [], gasLimit: \"0\", payer: \"\", granter: \"\" };\n}\nexports.Fee = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.amount) {\n            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.gasLimit !== \"0\") {\n            writer.uint32(16).uint64(message.gasLimit);\n        }\n        if (message.payer !== \"\") {\n            writer.uint32(26).string(message.payer);\n        }\n        if (message.granter !== \"\") {\n            writer.uint32(34).string(message.granter);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFee();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.gasLimit = longToString(reader.uint64());\n                    break;\n                case 3:\n                    message.payer = reader.string();\n                    break;\n                case 4:\n                    message.granter = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            amount: Array.isArray(object === null || object === void 0 ? void 0 : object.amount)\n                ? object.amount.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n            gasLimit: isSet(object.gasLimit) ? String(object.gasLimit) : \"0\",\n            payer: isSet(object.payer) ? String(object.payer) : \"\",\n            granter: isSet(object.granter) ? String(object.granter) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.amount) {\n            obj.amount = message.amount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.amount = [];\n        }\n        message.gasLimit !== undefined && (obj.gasLimit = message.gasLimit);\n        message.payer !== undefined && (obj.payer = message.payer);\n        message.granter !== undefined && (obj.granter = message.granter);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseFee();\n        message.amount = ((_a = object.amount) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        message.gasLimit = (_b = object.gasLimit) !== null && _b !== void 0 ? _b : \"0\";\n        message.payer = (_c = object.payer) !== null && _c !== void 0 ? _c : \"\";\n        message.granter = (_d = object.granter) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=tx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/tx/v1beta1/tx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/upgrade/v1beta1/upgrade.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmos/upgrade/v1beta1/upgrade.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ModuleVersion = exports.CancelSoftwareUpgradeProposal = exports.SoftwareUpgradeProposal = exports.Plan = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst timestamp_1 = __webpack_require__(/*! ../../../google/protobuf/timestamp */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/timestamp.js\");\nconst any_1 = __webpack_require__(/*! ../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nexports.protobufPackage = \"cosmos.upgrade.v1beta1\";\nfunction createBasePlan() {\n    return {\n        name: \"\",\n        time: undefined,\n        height: \"0\",\n        info: \"\",\n        upgradedClientState: undefined,\n    };\n}\nexports.Plan = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.time !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.time), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.height !== \"0\") {\n            writer.uint32(24).int64(message.height);\n        }\n        if (message.info !== \"\") {\n            writer.uint32(34).string(message.info);\n        }\n        if (message.upgradedClientState !== undefined) {\n            any_1.Any.encode(message.upgradedClientState, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePlan();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.height = longToString(reader.int64());\n                    break;\n                case 4:\n                    message.info = reader.string();\n                    break;\n                case 5:\n                    message.upgradedClientState = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,\n            height: isSet(object.height) ? String(object.height) : \"0\",\n            info: isSet(object.info) ? String(object.info) : \"\",\n            upgradedClientState: isSet(object.upgradedClientState)\n                ? any_1.Any.fromJSON(object.upgradedClientState)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.time !== undefined && (obj.time = message.time.toISOString());\n        message.height !== undefined && (obj.height = message.height);\n        message.info !== undefined && (obj.info = message.info);\n        message.upgradedClientState !== undefined &&\n            (obj.upgradedClientState = message.upgradedClientState\n                ? any_1.Any.toJSON(message.upgradedClientState)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBasePlan();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.time = (_b = object.time) !== null && _b !== void 0 ? _b : undefined;\n        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : \"0\";\n        message.info = (_d = object.info) !== null && _d !== void 0 ? _d : \"\";\n        message.upgradedClientState =\n            object.upgradedClientState !== undefined &&\n                object.upgradedClientState !== null\n                ? any_1.Any.fromPartial(object.upgradedClientState)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseSoftwareUpgradeProposal() {\n    return { title: \"\", description: \"\", plan: undefined };\n}\nexports.SoftwareUpgradeProposal = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.title !== \"\") {\n            writer.uint32(10).string(message.title);\n        }\n        if (message.description !== \"\") {\n            writer.uint32(18).string(message.description);\n        }\n        if (message.plan !== undefined) {\n            exports.Plan.encode(message.plan, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSoftwareUpgradeProposal();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.title = reader.string();\n                    break;\n                case 2:\n                    message.description = reader.string();\n                    break;\n                case 3:\n                    message.plan = exports.Plan.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            title: isSet(object.title) ? String(object.title) : \"\",\n            description: isSet(object.description) ? String(object.description) : \"\",\n            plan: isSet(object.plan) ? exports.Plan.fromJSON(object.plan) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.title !== undefined && (obj.title = message.title);\n        message.description !== undefined &&\n            (obj.description = message.description);\n        message.plan !== undefined &&\n            (obj.plan = message.plan ? exports.Plan.toJSON(message.plan) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseSoftwareUpgradeProposal();\n        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : \"\";\n        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : \"\";\n        message.plan =\n            object.plan !== undefined && object.plan !== null\n                ? exports.Plan.fromPartial(object.plan)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseCancelSoftwareUpgradeProposal() {\n    return { title: \"\", description: \"\" };\n}\nexports.CancelSoftwareUpgradeProposal = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.title !== \"\") {\n            writer.uint32(10).string(message.title);\n        }\n        if (message.description !== \"\") {\n            writer.uint32(18).string(message.description);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCancelSoftwareUpgradeProposal();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.title = reader.string();\n                    break;\n                case 2:\n                    message.description = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            title: isSet(object.title) ? String(object.title) : \"\",\n            description: isSet(object.description) ? String(object.description) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.title !== undefined && (obj.title = message.title);\n        message.description !== undefined &&\n            (obj.description = message.description);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseCancelSoftwareUpgradeProposal();\n        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : \"\";\n        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseModuleVersion() {\n    return { name: \"\", version: \"0\" };\n}\nexports.ModuleVersion = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.version !== \"0\") {\n            writer.uint32(16).uint64(message.version);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseModuleVersion();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.version = longToString(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            version: isSet(object.version) ? String(object.version) : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.version !== undefined && (obj.version = message.version);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseModuleVersion();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : \"0\";\n        return message;\n    },\n};\nfunction toTimestamp(date) {\n    const seconds = Math.trunc(date.getTime() / 1000).toString();\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = Number(t.seconds) * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=upgrade.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/upgrade/v1beta1/upgrade.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmwasm/wasm/v1/tx.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmwasm/wasm/v1/tx.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgClearAdminResponse = exports.MsgClearAdmin = exports.MsgUpdateAdminResponse = exports.MsgUpdateAdmin = exports.MsgMigrateContractResponse = exports.MsgMigrateContract = exports.MsgExecuteContractResponse = exports.MsgExecuteContract = exports.MsgInstantiateContractResponse = exports.MsgInstantiateContract = exports.MsgStoreCodeResponse = exports.MsgStoreCode = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst types_1 = __webpack_require__(/*! ../../../cosmwasm/wasm/v1/types */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmwasm/wasm/v1/types.js\");\nconst coin_1 = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nexports.protobufPackage = \"cosmwasm.wasm.v1\";\nfunction createBaseMsgStoreCode() {\n    return {\n        sender: \"\",\n        wasmByteCode: new Uint8Array(),\n        instantiatePermission: undefined,\n    };\n}\nexports.MsgStoreCode = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.wasmByteCode.length !== 0) {\n            writer.uint32(18).bytes(message.wasmByteCode);\n        }\n        if (message.instantiatePermission !== undefined) {\n            types_1.AccessConfig.encode(message.instantiatePermission, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgStoreCode();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.wasmByteCode = reader.bytes();\n                    break;\n                case 5:\n                    message.instantiatePermission = types_1.AccessConfig.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sender: isSet(object.sender) ? String(object.sender) : \"\",\n            wasmByteCode: isSet(object.wasmByteCode)\n                ? bytesFromBase64(object.wasmByteCode)\n                : new Uint8Array(),\n            instantiatePermission: isSet(object.instantiatePermission)\n                ? types_1.AccessConfig.fromJSON(object.instantiatePermission)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.wasmByteCode !== undefined &&\n            (obj.wasmByteCode = base64FromBytes(message.wasmByteCode !== undefined\n                ? message.wasmByteCode\n                : new Uint8Array()));\n        message.instantiatePermission !== undefined &&\n            (obj.instantiatePermission = message.instantiatePermission\n                ? types_1.AccessConfig.toJSON(message.instantiatePermission)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgStoreCode();\n        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : \"\";\n        message.wasmByteCode = (_b = object.wasmByteCode) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.instantiatePermission =\n            object.instantiatePermission !== undefined &&\n                object.instantiatePermission !== null\n                ? types_1.AccessConfig.fromPartial(object.instantiatePermission)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseMsgStoreCodeResponse() {\n    return { codeId: \"0\" };\n}\nexports.MsgStoreCodeResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.codeId !== \"0\") {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgStoreCodeResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeId = longToString(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            codeId: isSet(object.codeId) ? String(object.codeId) : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeId !== undefined && (obj.codeId = message.codeId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMsgStoreCodeResponse();\n        message.codeId = (_a = object.codeId) !== null && _a !== void 0 ? _a : \"0\";\n        return message;\n    },\n};\nfunction createBaseMsgInstantiateContract() {\n    return {\n        sender: \"\",\n        admin: \"\",\n        codeId: \"0\",\n        label: \"\",\n        msg: new Uint8Array(),\n        funds: [],\n    };\n}\nexports.MsgInstantiateContract = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.admin !== \"\") {\n            writer.uint32(18).string(message.admin);\n        }\n        if (message.codeId !== \"0\") {\n            writer.uint32(24).uint64(message.codeId);\n        }\n        if (message.label !== \"\") {\n            writer.uint32(34).string(message.label);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(42).bytes(message.msg);\n        }\n        for (const v of message.funds) {\n            coin_1.Coin.encode(v, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstantiateContract();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.admin = reader.string();\n                    break;\n                case 3:\n                    message.codeId = longToString(reader.uint64());\n                    break;\n                case 4:\n                    message.label = reader.string();\n                    break;\n                case 5:\n                    message.msg = reader.bytes();\n                    break;\n                case 6:\n                    message.funds.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sender: isSet(object.sender) ? String(object.sender) : \"\",\n            admin: isSet(object.admin) ? String(object.admin) : \"\",\n            codeId: isSet(object.codeId) ? String(object.codeId) : \"0\",\n            label: isSet(object.label) ? String(object.label) : \"\",\n            msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(),\n            funds: Array.isArray(object === null || object === void 0 ? void 0 : object.funds)\n                ? object.funds.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.admin !== undefined && (obj.admin = message.admin);\n        message.codeId !== undefined && (obj.codeId = message.codeId);\n        message.label !== undefined && (obj.label = message.label);\n        message.msg !== undefined &&\n            (obj.msg = base64FromBytes(message.msg !== undefined ? message.msg : new Uint8Array()));\n        if (message.funds) {\n            obj.funds = message.funds.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.funds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseMsgInstantiateContract();\n        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : \"\";\n        message.admin = (_b = object.admin) !== null && _b !== void 0 ? _b : \"\";\n        message.codeId = (_c = object.codeId) !== null && _c !== void 0 ? _c : \"0\";\n        message.label = (_d = object.label) !== null && _d !== void 0 ? _d : \"\";\n        message.msg = (_e = object.msg) !== null && _e !== void 0 ? _e : new Uint8Array();\n        message.funds = ((_f = object.funds) === null || _f === void 0 ? void 0 : _f.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseMsgInstantiateContractResponse() {\n    return { address: \"\", data: new Uint8Array() };\n}\nexports.MsgInstantiateContractResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstantiateContractResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            address: isSet(object.address) ? String(object.address) : \"\",\n            data: isSet(object.data)\n                ? bytesFromBase64(object.data)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgInstantiateContractResponse();\n        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : \"\";\n        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgExecuteContract() {\n    return { sender: \"\", contract: \"\", msg: new Uint8Array(), funds: [] };\n}\nexports.MsgExecuteContract = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(18).string(message.contract);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(26).bytes(message.msg);\n        }\n        for (const v of message.funds) {\n            coin_1.Coin.encode(v, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgExecuteContract();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.contract = reader.string();\n                    break;\n                case 3:\n                    message.msg = reader.bytes();\n                    break;\n                case 5:\n                    message.funds.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sender: isSet(object.sender) ? String(object.sender) : \"\",\n            contract: isSet(object.contract) ? String(object.contract) : \"\",\n            msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(),\n            funds: Array.isArray(object === null || object === void 0 ? void 0 : object.funds)\n                ? object.funds.map((e) => coin_1.Coin.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.contract !== undefined && (obj.contract = message.contract);\n        message.msg !== undefined &&\n            (obj.msg = base64FromBytes(message.msg !== undefined ? message.msg : new Uint8Array()));\n        if (message.funds) {\n            obj.funds = message.funds.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.funds = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseMsgExecuteContract();\n        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : \"\";\n        message.contract = (_b = object.contract) !== null && _b !== void 0 ? _b : \"\";\n        message.msg = (_c = object.msg) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.funds = ((_d = object.funds) === null || _d === void 0 ? void 0 : _d.map((e) => coin_1.Coin.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseMsgExecuteContractResponse() {\n    return { data: new Uint8Array() };\n}\nexports.MsgExecuteContractResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgExecuteContractResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            data: isSet(object.data)\n                ? bytesFromBase64(object.data)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMsgExecuteContractResponse();\n        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgMigrateContract() {\n    return { sender: \"\", contract: \"\", codeId: \"0\", msg: new Uint8Array() };\n}\nexports.MsgMigrateContract = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(18).string(message.contract);\n        }\n        if (message.codeId !== \"0\") {\n            writer.uint32(24).uint64(message.codeId);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(34).bytes(message.msg);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgMigrateContract();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.contract = reader.string();\n                    break;\n                case 3:\n                    message.codeId = longToString(reader.uint64());\n                    break;\n                case 4:\n                    message.msg = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sender: isSet(object.sender) ? String(object.sender) : \"\",\n            contract: isSet(object.contract) ? String(object.contract) : \"\",\n            codeId: isSet(object.codeId) ? String(object.codeId) : \"0\",\n            msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.contract !== undefined && (obj.contract = message.contract);\n        message.codeId !== undefined && (obj.codeId = message.codeId);\n        message.msg !== undefined &&\n            (obj.msg = base64FromBytes(message.msg !== undefined ? message.msg : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseMsgMigrateContract();\n        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : \"\";\n        message.contract = (_b = object.contract) !== null && _b !== void 0 ? _b : \"\";\n        message.codeId = (_c = object.codeId) !== null && _c !== void 0 ? _c : \"0\";\n        message.msg = (_d = object.msg) !== null && _d !== void 0 ? _d : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgMigrateContractResponse() {\n    return { data: new Uint8Array() };\n}\nexports.MsgMigrateContractResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgMigrateContractResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            data: isSet(object.data)\n                ? bytesFromBase64(object.data)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseMsgMigrateContractResponse();\n        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseMsgUpdateAdmin() {\n    return { sender: \"\", newAdmin: \"\", contract: \"\" };\n}\nexports.MsgUpdateAdmin = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.newAdmin !== \"\") {\n            writer.uint32(18).string(message.newAdmin);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(26).string(message.contract);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpdateAdmin();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.newAdmin = reader.string();\n                    break;\n                case 3:\n                    message.contract = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sender: isSet(object.sender) ? String(object.sender) : \"\",\n            newAdmin: isSet(object.newAdmin) ? String(object.newAdmin) : \"\",\n            contract: isSet(object.contract) ? String(object.contract) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.newAdmin !== undefined && (obj.newAdmin = message.newAdmin);\n        message.contract !== undefined && (obj.contract = message.contract);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseMsgUpdateAdmin();\n        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : \"\";\n        message.newAdmin = (_b = object.newAdmin) !== null && _b !== void 0 ? _b : \"\";\n        message.contract = (_c = object.contract) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgUpdateAdminResponse() {\n    return {};\n}\nexports.MsgUpdateAdminResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpdateAdminResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgUpdateAdminResponse();\n        return message;\n    },\n};\nfunction createBaseMsgClearAdmin() {\n    return { sender: \"\", contract: \"\" };\n}\nexports.MsgClearAdmin = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(26).string(message.contract);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgClearAdmin();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 3:\n                    message.contract = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sender: isSet(object.sender) ? String(object.sender) : \"\",\n            contract: isSet(object.contract) ? String(object.contract) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.contract !== undefined && (obj.contract = message.contract);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseMsgClearAdmin();\n        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : \"\";\n        message.contract = (_b = object.contract) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgClearAdminResponse() {\n    return {};\n}\nexports.MsgClearAdminResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgClearAdminResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgClearAdminResponse();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=tx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm90by10eXBlcy9jb3Ntd2FzbS93YXNtL3YxL3R4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcscUJBQXFCLEdBQUcsOEJBQThCLEdBQUcsc0JBQXNCLEdBQUcsa0NBQWtDLEdBQUcsMEJBQTBCLEdBQUcsa0NBQWtDLEdBQUcsMEJBQTBCLEdBQUcsc0NBQXNDLEdBQUcsOEJBQThCLEdBQUcsNEJBQTRCLEdBQUcsb0JBQW9CLEdBQUcsdUJBQXVCO0FBQzdZO0FBQ0EsK0JBQStCLG1CQUFPLENBQUMsbURBQU07QUFDN0Msa0NBQWtDLG1CQUFPLENBQUMsc0VBQW9CO0FBQzlELGdCQUFnQixtQkFBTyxDQUFDLGlIQUFpQztBQUN6RCxlQUFlLG1CQUFPLENBQUMscUhBQW1DO0FBQzFELHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdG8tdHlwZXNcXGNvc213YXNtXFx3YXNtXFx2MVxcdHguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1zZ0NsZWFyQWRtaW5SZXNwb25zZSA9IGV4cG9ydHMuTXNnQ2xlYXJBZG1pbiA9IGV4cG9ydHMuTXNnVXBkYXRlQWRtaW5SZXNwb25zZSA9IGV4cG9ydHMuTXNnVXBkYXRlQWRtaW4gPSBleHBvcnRzLk1zZ01pZ3JhdGVDb250cmFjdFJlc3BvbnNlID0gZXhwb3J0cy5Nc2dNaWdyYXRlQ29udHJhY3QgPSBleHBvcnRzLk1zZ0V4ZWN1dGVDb250cmFjdFJlc3BvbnNlID0gZXhwb3J0cy5Nc2dFeGVjdXRlQ29udHJhY3QgPSBleHBvcnRzLk1zZ0luc3RhbnRpYXRlQ29udHJhY3RSZXNwb25zZSA9IGV4cG9ydHMuTXNnSW5zdGFudGlhdGVDb250cmFjdCA9IGV4cG9ydHMuTXNnU3RvcmVDb2RlUmVzcG9uc2UgPSBleHBvcnRzLk1zZ1N0b3JlQ29kZSA9IGV4cG9ydHMucHJvdG9idWZQYWNrYWdlID0gdm9pZCAwO1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IGxvbmdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibG9uZ1wiKSk7XG5jb25zdCBtaW5pbWFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInByb3RvYnVmanMvbWluaW1hbFwiKSk7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Nvc213YXNtL3dhc20vdjEvdHlwZXNcIik7XG5jb25zdCBjb2luXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vY29zbW9zL2Jhc2UvdjFiZXRhMS9jb2luXCIpO1xuZXhwb3J0cy5wcm90b2J1ZlBhY2thZ2UgPSBcImNvc213YXNtLndhc20udjFcIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VNc2dTdG9yZUNvZGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VuZGVyOiBcIlwiLFxuICAgICAgICB3YXNtQnl0ZUNvZGU6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIGluc3RhbnRpYXRlUGVybWlzc2lvbjogdW5kZWZpbmVkLFxuICAgIH07XG59XG5leHBvcnRzLk1zZ1N0b3JlQ29kZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnNlbmRlciAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2Uuc2VuZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS53YXNtQnl0ZUNvZGUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5ieXRlcyhtZXNzYWdlLndhc21CeXRlQ29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5zdGFudGlhdGVQZXJtaXNzaW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHR5cGVzXzEuQWNjZXNzQ29uZmlnLmVuY29kZShtZXNzYWdlLmluc3RhbnRpYXRlUGVybWlzc2lvbiwgd3JpdGVyLnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dTdG9yZUNvZGUoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlbmRlciA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLndhc21CeXRlQ29kZSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5zdGFudGlhdGVQZXJtaXNzaW9uID0gdHlwZXNfMS5BY2Nlc3NDb25maWcuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VuZGVyOiBpc1NldChvYmplY3Quc2VuZGVyKSA/IFN0cmluZyhvYmplY3Quc2VuZGVyKSA6IFwiXCIsXG4gICAgICAgICAgICB3YXNtQnl0ZUNvZGU6IGlzU2V0KG9iamVjdC53YXNtQnl0ZUNvZGUpXG4gICAgICAgICAgICAgICAgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0Lndhc21CeXRlQ29kZSlcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgICAgICBpbnN0YW50aWF0ZVBlcm1pc3Npb246IGlzU2V0KG9iamVjdC5pbnN0YW50aWF0ZVBlcm1pc3Npb24pXG4gICAgICAgICAgICAgICAgPyB0eXBlc18xLkFjY2Vzc0NvbmZpZy5mcm9tSlNPTihvYmplY3QuaW5zdGFudGlhdGVQZXJtaXNzaW9uKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uuc2VuZGVyICE9PSB1bmRlZmluZWQgJiYgKG9iai5zZW5kZXIgPSBtZXNzYWdlLnNlbmRlcik7XG4gICAgICAgIG1lc3NhZ2Uud2FzbUJ5dGVDb2RlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoud2FzbUJ5dGVDb2RlID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2Uud2FzbUJ5dGVDb2RlICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IG1lc3NhZ2Uud2FzbUJ5dGVDb2RlXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIG1lc3NhZ2UuaW5zdGFudGlhdGVQZXJtaXNzaW9uICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouaW5zdGFudGlhdGVQZXJtaXNzaW9uID0gbWVzc2FnZS5pbnN0YW50aWF0ZVBlcm1pc3Npb25cbiAgICAgICAgICAgICAgICA/IHR5cGVzXzEuQWNjZXNzQ29uZmlnLnRvSlNPTihtZXNzYWdlLmluc3RhbnRpYXRlUGVybWlzc2lvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dTdG9yZUNvZGUoKTtcbiAgICAgICAgbWVzc2FnZS5zZW5kZXIgPSAoX2EgPSBvYmplY3Quc2VuZGVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLndhc21CeXRlQ29kZSA9IChfYiA9IG9iamVjdC53YXNtQnl0ZUNvZGUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIG1lc3NhZ2UuaW5zdGFudGlhdGVQZXJtaXNzaW9uID1cbiAgICAgICAgICAgIG9iamVjdC5pbnN0YW50aWF0ZVBlcm1pc3Npb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIG9iamVjdC5pbnN0YW50aWF0ZVBlcm1pc3Npb24gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IHR5cGVzXzEuQWNjZXNzQ29uZmlnLmZyb21QYXJ0aWFsKG9iamVjdC5pbnN0YW50aWF0ZVBlcm1pc3Npb24pXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZU1zZ1N0b3JlQ29kZVJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IGNvZGVJZDogXCIwXCIgfTtcbn1cbmV4cG9ydHMuTXNnU3RvcmVDb2RlUmVzcG9uc2UgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5jb2RlSWQgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQ2NChtZXNzYWdlLmNvZGVJZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnU3RvcmVDb2RlUmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvZGVJZCA9IGxvbmdUb1N0cmluZyhyZWFkZXIudWludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2RlSWQ6IGlzU2V0KG9iamVjdC5jb2RlSWQpID8gU3RyaW5nKG9iamVjdC5jb2RlSWQpIDogXCIwXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5jb2RlSWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmNvZGVJZCA9IG1lc3NhZ2UuY29kZUlkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnU3RvcmVDb2RlUmVzcG9uc2UoKTtcbiAgICAgICAgbWVzc2FnZS5jb2RlSWQgPSAoX2EgPSBvYmplY3QuY29kZUlkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTXNnSW5zdGFudGlhdGVDb250cmFjdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZW5kZXI6IFwiXCIsXG4gICAgICAgIGFkbWluOiBcIlwiLFxuICAgICAgICBjb2RlSWQ6IFwiMFwiLFxuICAgICAgICBsYWJlbDogXCJcIixcbiAgICAgICAgbXNnOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICBmdW5kczogW10sXG4gICAgfTtcbn1cbmV4cG9ydHMuTXNnSW5zdGFudGlhdGVDb250cmFjdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnNlbmRlciAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2Uuc2VuZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hZG1pbiAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UuYWRtaW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNvZGVJZCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjQpLnVpbnQ2NChtZXNzYWdlLmNvZGVJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubGFiZWwgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzQpLnN0cmluZyhtZXNzYWdlLmxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tc2cubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDQyKS5ieXRlcyhtZXNzYWdlLm1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuZnVuZHMpIHtcbiAgICAgICAgICAgIGNvaW5fMS5Db2luLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDUwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1zZ0luc3RhbnRpYXRlQ29udHJhY3QoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlbmRlciA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFkbWluID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29kZUlkID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5sYWJlbCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1zZyA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZnVuZHMucHVzaChjb2luXzEuQ29pbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VuZGVyOiBpc1NldChvYmplY3Quc2VuZGVyKSA/IFN0cmluZyhvYmplY3Quc2VuZGVyKSA6IFwiXCIsXG4gICAgICAgICAgICBhZG1pbjogaXNTZXQob2JqZWN0LmFkbWluKSA/IFN0cmluZyhvYmplY3QuYWRtaW4pIDogXCJcIixcbiAgICAgICAgICAgIGNvZGVJZDogaXNTZXQob2JqZWN0LmNvZGVJZCkgPyBTdHJpbmcob2JqZWN0LmNvZGVJZCkgOiBcIjBcIixcbiAgICAgICAgICAgIGxhYmVsOiBpc1NldChvYmplY3QubGFiZWwpID8gU3RyaW5nKG9iamVjdC5sYWJlbCkgOiBcIlwiLFxuICAgICAgICAgICAgbXNnOiBpc1NldChvYmplY3QubXNnKSA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QubXNnKSA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgICAgICBmdW5kczogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3QuZnVuZHMpXG4gICAgICAgICAgICAgICAgPyBvYmplY3QuZnVuZHMubWFwKChlKSA9PiBjb2luXzEuQ29pbi5mcm9tSlNPTihlKSlcbiAgICAgICAgICAgICAgICA6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uuc2VuZGVyICE9PSB1bmRlZmluZWQgJiYgKG9iai5zZW5kZXIgPSBtZXNzYWdlLnNlbmRlcik7XG4gICAgICAgIG1lc3NhZ2UuYWRtaW4gIT09IHVuZGVmaW5lZCAmJiAob2JqLmFkbWluID0gbWVzc2FnZS5hZG1pbik7XG4gICAgICAgIG1lc3NhZ2UuY29kZUlkICE9PSB1bmRlZmluZWQgJiYgKG9iai5jb2RlSWQgPSBtZXNzYWdlLmNvZGVJZCk7XG4gICAgICAgIG1lc3NhZ2UubGFiZWwgIT09IHVuZGVmaW5lZCAmJiAob2JqLmxhYmVsID0gbWVzc2FnZS5sYWJlbCk7XG4gICAgICAgIG1lc3NhZ2UubXNnICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoubXNnID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UubXNnICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLm1zZyA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZnVuZHMpIHtcbiAgICAgICAgICAgIG9iai5mdW5kcyA9IG1lc3NhZ2UuZnVuZHMubWFwKChlKSA9PiAoZSA/IGNvaW5fMS5Db2luLnRvSlNPTihlKSA6IHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLmZ1bmRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dJbnN0YW50aWF0ZUNvbnRyYWN0KCk7XG4gICAgICAgIG1lc3NhZ2Uuc2VuZGVyID0gKF9hID0gb2JqZWN0LnNlbmRlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5hZG1pbiA9IChfYiA9IG9iamVjdC5hZG1pbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5jb2RlSWQgPSAoX2MgPSBvYmplY3QuY29kZUlkKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5sYWJlbCA9IChfZCA9IG9iamVjdC5sYWJlbCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5tc2cgPSAoX2UgPSBvYmplY3QubXNnKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICBtZXNzYWdlLmZ1bmRzID0gKChfZiA9IG9iamVjdC5mdW5kcykgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLm1hcCgoZSkgPT4gY29pbl8xLkNvaW4uZnJvbVBhcnRpYWwoZSkpKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTXNnSW5zdGFudGlhdGVDb250cmFjdFJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IGFkZHJlc3M6IFwiXCIsIGRhdGE6IG5ldyBVaW50OEFycmF5KCkgfTtcbn1cbmV4cG9ydHMuTXNnSW5zdGFudGlhdGVDb250cmFjdFJlc3BvbnNlID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYWRkcmVzcyAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGF0YS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnSW5zdGFudGlhdGVDb250cmFjdFJlc3BvbnNlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5hZGRyZXNzID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGF0YSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRyZXNzOiBpc1NldChvYmplY3QuYWRkcmVzcykgPyBTdHJpbmcob2JqZWN0LmFkZHJlc3MpIDogXCJcIixcbiAgICAgICAgICAgIGRhdGE6IGlzU2V0KG9iamVjdC5kYXRhKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5kYXRhKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmFkZHJlc3MgIT09IHVuZGVmaW5lZCAmJiAob2JqLmFkZHJlc3MgPSBtZXNzYWdlLmFkZHJlc3MpO1xuICAgICAgICBtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5kYXRhID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuZGF0YSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5kYXRhIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnSW5zdGFudGlhdGVDb250cmFjdFJlc3BvbnNlKCk7XG4gICAgICAgIG1lc3NhZ2UuYWRkcmVzcyA9IChfYSA9IG9iamVjdC5hZGRyZXNzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmRhdGEgPSAoX2IgPSBvYmplY3QuZGF0YSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTXNnRXhlY3V0ZUNvbnRyYWN0KCkge1xuICAgIHJldHVybiB7IHNlbmRlcjogXCJcIiwgY29udHJhY3Q6IFwiXCIsIG1zZzogbmV3IFVpbnQ4QXJyYXkoKSwgZnVuZHM6IFtdIH07XG59XG5leHBvcnRzLk1zZ0V4ZWN1dGVDb250cmFjdCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnNlbmRlciAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2Uuc2VuZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb250cmFjdCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UuY29udHJhY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm1zZy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMjYpLmJ5dGVzKG1lc3NhZ2UubXNnKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5mdW5kcykge1xuICAgICAgICAgICAgY29pbl8xLkNvaW4uZW5jb2RlKHYsIHdyaXRlci51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnRXhlY3V0ZUNvbnRyYWN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZW5kZXIgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb250cmFjdCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1zZyA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZnVuZHMucHVzaChjb2luXzEuQ29pbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VuZGVyOiBpc1NldChvYmplY3Quc2VuZGVyKSA/IFN0cmluZyhvYmplY3Quc2VuZGVyKSA6IFwiXCIsXG4gICAgICAgICAgICBjb250cmFjdDogaXNTZXQob2JqZWN0LmNvbnRyYWN0KSA/IFN0cmluZyhvYmplY3QuY29udHJhY3QpIDogXCJcIixcbiAgICAgICAgICAgIG1zZzogaXNTZXQob2JqZWN0Lm1zZykgPyBieXRlc0Zyb21CYXNlNjQob2JqZWN0Lm1zZykgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICAgICAgZnVuZHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LmZ1bmRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmZ1bmRzLm1hcCgoZSkgPT4gY29pbl8xLkNvaW4uZnJvbUpTT04oZSkpXG4gICAgICAgICAgICAgICAgOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnNlbmRlciAhPT0gdW5kZWZpbmVkICYmIChvYmouc2VuZGVyID0gbWVzc2FnZS5zZW5kZXIpO1xuICAgICAgICBtZXNzYWdlLmNvbnRyYWN0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5jb250cmFjdCA9IG1lc3NhZ2UuY29udHJhY3QpO1xuICAgICAgICBtZXNzYWdlLm1zZyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLm1zZyA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLm1zZyAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5tc2cgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIGlmIChtZXNzYWdlLmZ1bmRzKSB7XG4gICAgICAgICAgICBvYmouZnVuZHMgPSBtZXNzYWdlLmZ1bmRzLm1hcCgoZSkgPT4gKGUgPyBjb2luXzEuQ29pbi50b0pTT04oZSkgOiB1bmRlZmluZWQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5mdW5kcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1zZ0V4ZWN1dGVDb250cmFjdCgpO1xuICAgICAgICBtZXNzYWdlLnNlbmRlciA9IChfYSA9IG9iamVjdC5zZW5kZXIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuY29udHJhY3QgPSAoX2IgPSBvYmplY3QuY29udHJhY3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UubXNnID0gKF9jID0gb2JqZWN0Lm1zZykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgbWVzc2FnZS5mdW5kcyA9ICgoX2QgPSBvYmplY3QuZnVuZHMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5tYXAoKGUpID0+IGNvaW5fMS5Db2luLmZyb21QYXJ0aWFsKGUpKSkgfHwgW107XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZU1zZ0V4ZWN1dGVDb250cmFjdFJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7IGRhdGE6IG5ldyBVaW50OEFycmF5KCkgfTtcbn1cbmV4cG9ydHMuTXNnRXhlY3V0ZUNvbnRyYWN0UmVzcG9uc2UgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5kYXRhLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dFeGVjdXRlQ29udHJhY3RSZXNwb25zZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGF0YSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiBpc1NldChvYmplY3QuZGF0YSlcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuZGF0YSlcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KCksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5kYXRhICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouZGF0YSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UuZGF0YSA6IG5ldyBVaW50OEFycmF5KCkpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnRXhlY3V0ZUNvbnRyYWN0UmVzcG9uc2UoKTtcbiAgICAgICAgbWVzc2FnZS5kYXRhID0gKF9hID0gb2JqZWN0LmRhdGEpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZU1zZ01pZ3JhdGVDb250cmFjdCgpIHtcbiAgICByZXR1cm4geyBzZW5kZXI6IFwiXCIsIGNvbnRyYWN0OiBcIlwiLCBjb2RlSWQ6IFwiMFwiLCBtc2c6IG5ldyBVaW50OEFycmF5KCkgfTtcbn1cbmV4cG9ydHMuTXNnTWlncmF0ZUNvbnRyYWN0ID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VuZGVyICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5zZW5kZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbnRyYWN0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5jb250cmFjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY29kZUlkICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNCkudWludDY0KG1lc3NhZ2UuY29kZUlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5tc2cubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDM0KS5ieXRlcyhtZXNzYWdlLm1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnTWlncmF0ZUNvbnRyYWN0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZW5kZXIgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb250cmFjdCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvZGVJZCA9IGxvbmdUb1N0cmluZyhyZWFkZXIudWludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubXNnID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlbmRlcjogaXNTZXQob2JqZWN0LnNlbmRlcikgPyBTdHJpbmcob2JqZWN0LnNlbmRlcikgOiBcIlwiLFxuICAgICAgICAgICAgY29udHJhY3Q6IGlzU2V0KG9iamVjdC5jb250cmFjdCkgPyBTdHJpbmcob2JqZWN0LmNvbnRyYWN0KSA6IFwiXCIsXG4gICAgICAgICAgICBjb2RlSWQ6IGlzU2V0KG9iamVjdC5jb2RlSWQpID8gU3RyaW5nKG9iamVjdC5jb2RlSWQpIDogXCIwXCIsXG4gICAgICAgICAgICBtc2c6IGlzU2V0KG9iamVjdC5tc2cpID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5tc2cpIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLnNlbmRlciAhPT0gdW5kZWZpbmVkICYmIChvYmouc2VuZGVyID0gbWVzc2FnZS5zZW5kZXIpO1xuICAgICAgICBtZXNzYWdlLmNvbnRyYWN0ICE9PSB1bmRlZmluZWQgJiYgKG9iai5jb250cmFjdCA9IG1lc3NhZ2UuY29udHJhY3QpO1xuICAgICAgICBtZXNzYWdlLmNvZGVJZCAhPT0gdW5kZWZpbmVkICYmIChvYmouY29kZUlkID0gbWVzc2FnZS5jb2RlSWQpO1xuICAgICAgICBtZXNzYWdlLm1zZyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLm1zZyA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLm1zZyAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5tc2cgOiBuZXcgVWludDhBcnJheSgpKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1zZ01pZ3JhdGVDb250cmFjdCgpO1xuICAgICAgICBtZXNzYWdlLnNlbmRlciA9IChfYSA9IG9iamVjdC5zZW5kZXIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuY29udHJhY3QgPSAoX2IgPSBvYmplY3QuY29udHJhY3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuY29kZUlkID0gKF9jID0gb2JqZWN0LmNvZGVJZCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UubXNnID0gKF9kID0gb2JqZWN0Lm1zZykgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTXNnTWlncmF0ZUNvbnRyYWN0UmVzcG9uc2UoKSB7XG4gICAgcmV0dXJuIHsgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKSB9O1xufVxuZXhwb3J0cy5Nc2dNaWdyYXRlQ29udHJhY3RSZXNwb25zZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmRhdGEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5ieXRlcyhtZXNzYWdlLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1zZ01pZ3JhdGVDb250cmFjdFJlc3BvbnNlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5kYXRhID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IGlzU2V0KG9iamVjdC5kYXRhKVxuICAgICAgICAgICAgICAgID8gYnl0ZXNGcm9tQmFzZTY0KG9iamVjdC5kYXRhKVxuICAgICAgICAgICAgICAgIDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHRvSlNPTihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5kYXRhID0gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuZGF0YSAhPT0gdW5kZWZpbmVkID8gbWVzc2FnZS5kYXRhIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dNaWdyYXRlQ29udHJhY3RSZXNwb25zZSgpO1xuICAgICAgICBtZXNzYWdlLmRhdGEgPSAoX2EgPSBvYmplY3QuZGF0YSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTXNnVXBkYXRlQWRtaW4oKSB7XG4gICAgcmV0dXJuIHsgc2VuZGVyOiBcIlwiLCBuZXdBZG1pbjogXCJcIiwgY29udHJhY3Q6IFwiXCIgfTtcbn1cbmV4cG9ydHMuTXNnVXBkYXRlQWRtaW4gPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5zZW5kZXIgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnNlbmRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubmV3QWRtaW4gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLm5ld0FkbWluKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb250cmFjdCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2UuY29udHJhY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1zZ1VwZGF0ZUFkbWluKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZW5kZXIgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5uZXdBZG1pbiA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbnRyYWN0ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZW5kZXI6IGlzU2V0KG9iamVjdC5zZW5kZXIpID8gU3RyaW5nKG9iamVjdC5zZW5kZXIpIDogXCJcIixcbiAgICAgICAgICAgIG5ld0FkbWluOiBpc1NldChvYmplY3QubmV3QWRtaW4pID8gU3RyaW5nKG9iamVjdC5uZXdBZG1pbikgOiBcIlwiLFxuICAgICAgICAgICAgY29udHJhY3Q6IGlzU2V0KG9iamVjdC5jb250cmFjdCkgPyBTdHJpbmcob2JqZWN0LmNvbnRyYWN0KSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5zZW5kZXIgIT09IHVuZGVmaW5lZCAmJiAob2JqLnNlbmRlciA9IG1lc3NhZ2Uuc2VuZGVyKTtcbiAgICAgICAgbWVzc2FnZS5uZXdBZG1pbiAhPT0gdW5kZWZpbmVkICYmIChvYmoubmV3QWRtaW4gPSBtZXNzYWdlLm5ld0FkbWluKTtcbiAgICAgICAgbWVzc2FnZS5jb250cmFjdCAhPT0gdW5kZWZpbmVkICYmIChvYmouY29udHJhY3QgPSBtZXNzYWdlLmNvbnRyYWN0KTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dVcGRhdGVBZG1pbigpO1xuICAgICAgICBtZXNzYWdlLnNlbmRlciA9IChfYSA9IG9iamVjdC5zZW5kZXIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UubmV3QWRtaW4gPSAoX2IgPSBvYmplY3QubmV3QWRtaW4pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuY29udHJhY3QgPSAoX2MgPSBvYmplY3QuY29udHJhY3QpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFwiXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZU1zZ1VwZGF0ZUFkbWluUmVzcG9uc2UoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuZXhwb3J0cy5Nc2dVcGRhdGVBZG1pblJlc3BvbnNlID0ge1xuICAgIGVuY29kZShfLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnVXBkYXRlQWRtaW5SZXNwb25zZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04oXykge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICB0b0pTT04oXykge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKF8pIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dVcGRhdGVBZG1pblJlc3BvbnNlKCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZU1zZ0NsZWFyQWRtaW4oKSB7XG4gICAgcmV0dXJuIHsgc2VuZGVyOiBcIlwiLCBjb250cmFjdDogXCJcIiB9O1xufVxuZXhwb3J0cy5Nc2dDbGVhckFkbWluID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VuZGVyICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5zZW5kZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbnRyYWN0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDI2KS5zdHJpbmcobWVzc2FnZS5jb250cmFjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnQ2xlYXJBZG1pbigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2VuZGVyID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29udHJhY3QgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlbmRlcjogaXNTZXQob2JqZWN0LnNlbmRlcikgPyBTdHJpbmcob2JqZWN0LnNlbmRlcikgOiBcIlwiLFxuICAgICAgICAgICAgY29udHJhY3Q6IGlzU2V0KG9iamVjdC5jb250cmFjdCkgPyBTdHJpbmcob2JqZWN0LmNvbnRyYWN0KSA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5zZW5kZXIgIT09IHVuZGVmaW5lZCAmJiAob2JqLnNlbmRlciA9IG1lc3NhZ2Uuc2VuZGVyKTtcbiAgICAgICAgbWVzc2FnZS5jb250cmFjdCAhPT0gdW5kZWZpbmVkICYmIChvYmouY29udHJhY3QgPSBtZXNzYWdlLmNvbnRyYWN0KTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU1zZ0NsZWFyQWRtaW4oKTtcbiAgICAgICAgbWVzc2FnZS5zZW5kZXIgPSAoX2EgPSBvYmplY3Quc2VuZGVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmNvbnRyYWN0ID0gKF9iID0gb2JqZWN0LmNvbnRyYWN0KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcIlwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VNc2dDbGVhckFkbWluUmVzcG9uc2UoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuZXhwb3J0cy5Nc2dDbGVhckFkbWluUmVzcG9uc2UgPSB7XG4gICAgZW5jb2RlKF8sIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VNc2dDbGVhckFkbWluUmVzcG9uc2UoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKF8pIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgdG9KU09OKF8pIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChfKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTXNnQ2xlYXJBZG1pblJlc3BvbnNlKCk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xudmFyIGdsb2JhbFRoaXMgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB0aHJvdyBcIlVuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdFwiO1xufSkoKTtcbmNvbnN0IGF0b2IgPSBnbG9iYWxUaGlzLmF0b2IgfHxcbiAgICAoKGI2NCkgPT4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShiNjQsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwiYmluYXJ5XCIpKTtcbmZ1bmN0aW9uIGJ5dGVzRnJvbUJhc2U2NChiNjQpIHtcbiAgICBjb25zdCBiaW4gPSBhdG9iKGI2NCk7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYmluLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYXJyW2ldID0gYmluLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5jb25zdCBidG9hID0gZ2xvYmFsVGhpcy5idG9hIHx8XG4gICAgKChiaW4pID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYmluLCBcImJpbmFyeVwiKS50b1N0cmluZyhcImJhc2U2NFwiKSk7XG5mdW5jdGlvbiBiYXNlNjRGcm9tQnl0ZXMoYXJyKSB7XG4gICAgY29uc3QgYmluID0gW107XG4gICAgZm9yIChjb25zdCBieXRlIG9mIGFycikge1xuICAgICAgICBiaW4ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ0b2EoYmluLmpvaW4oXCJcIikpO1xufVxuZnVuY3Rpb24gbG9uZ1RvU3RyaW5nKGxvbmcpIHtcbiAgICByZXR1cm4gbG9uZy50b1N0cmluZygpO1xufVxuaWYgKG1pbmltYWxfMS5kZWZhdWx0LnV0aWwuTG9uZyAhPT0gbG9uZ18xLmRlZmF1bHQpIHtcbiAgICBtaW5pbWFsXzEuZGVmYXVsdC51dGlsLkxvbmcgPSBsb25nXzEuZGVmYXVsdDtcbiAgICBtaW5pbWFsXzEuZGVmYXVsdC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmwasm/wasm/v1/tx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/cosmwasm/wasm/v1/types.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/cosmwasm/wasm/v1/types.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Model = exports.AbsoluteTxPosition = exports.ContractCodeHistoryEntry = exports.ContractInfo = exports.CodeInfo = exports.Params = exports.AccessConfig = exports.AccessTypeParam = exports.contractCodeHistoryOperationTypeToJSON = exports.contractCodeHistoryOperationTypeFromJSON = exports.ContractCodeHistoryOperationType = exports.accessTypeToJSON = exports.accessTypeFromJSON = exports.AccessType = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst any_1 = __webpack_require__(/*! ../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nexports.protobufPackage = \"cosmwasm.wasm.v1\";\n/** AccessType permission types */\nvar AccessType;\n(function (AccessType) {\n    /** ACCESS_TYPE_UNSPECIFIED - AccessTypeUnspecified placeholder for empty value */\n    AccessType[AccessType[\"ACCESS_TYPE_UNSPECIFIED\"] = 0] = \"ACCESS_TYPE_UNSPECIFIED\";\n    /** ACCESS_TYPE_NOBODY - AccessTypeNobody forbidden */\n    AccessType[AccessType[\"ACCESS_TYPE_NOBODY\"] = 1] = \"ACCESS_TYPE_NOBODY\";\n    /** ACCESS_TYPE_ONLY_ADDRESS - AccessTypeOnlyAddress restricted to an address */\n    AccessType[AccessType[\"ACCESS_TYPE_ONLY_ADDRESS\"] = 2] = \"ACCESS_TYPE_ONLY_ADDRESS\";\n    /** ACCESS_TYPE_EVERYBODY - AccessTypeEverybody unrestricted */\n    AccessType[AccessType[\"ACCESS_TYPE_EVERYBODY\"] = 3] = \"ACCESS_TYPE_EVERYBODY\";\n    AccessType[AccessType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(AccessType = exports.AccessType || (exports.AccessType = {}));\nfunction accessTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"ACCESS_TYPE_UNSPECIFIED\":\n            return AccessType.ACCESS_TYPE_UNSPECIFIED;\n        case 1:\n        case \"ACCESS_TYPE_NOBODY\":\n            return AccessType.ACCESS_TYPE_NOBODY;\n        case 2:\n        case \"ACCESS_TYPE_ONLY_ADDRESS\":\n            return AccessType.ACCESS_TYPE_ONLY_ADDRESS;\n        case 3:\n        case \"ACCESS_TYPE_EVERYBODY\":\n            return AccessType.ACCESS_TYPE_EVERYBODY;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return AccessType.UNRECOGNIZED;\n    }\n}\nexports.accessTypeFromJSON = accessTypeFromJSON;\nfunction accessTypeToJSON(object) {\n    switch (object) {\n        case AccessType.ACCESS_TYPE_UNSPECIFIED:\n            return \"ACCESS_TYPE_UNSPECIFIED\";\n        case AccessType.ACCESS_TYPE_NOBODY:\n            return \"ACCESS_TYPE_NOBODY\";\n        case AccessType.ACCESS_TYPE_ONLY_ADDRESS:\n            return \"ACCESS_TYPE_ONLY_ADDRESS\";\n        case AccessType.ACCESS_TYPE_EVERYBODY:\n            return \"ACCESS_TYPE_EVERYBODY\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.accessTypeToJSON = accessTypeToJSON;\n/** ContractCodeHistoryOperationType actions that caused a code change */\nvar ContractCodeHistoryOperationType;\n(function (ContractCodeHistoryOperationType) {\n    /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED - ContractCodeHistoryOperationTypeUnspecified placeholder for empty value */\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\"] = 0] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\";\n    /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT - ContractCodeHistoryOperationTypeInit on chain contract instantiation */\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\"] = 1] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\";\n    /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE - ContractCodeHistoryOperationTypeMigrate code migration */\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\"] = 2] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\";\n    /** CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS - ContractCodeHistoryOperationTypeGenesis based on genesis data */\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\"] = 3] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\";\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ContractCodeHistoryOperationType = exports.ContractCodeHistoryOperationType || (exports.ContractCodeHistoryOperationType = {}));\nfunction contractCodeHistoryOperationTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED;\n        case 1:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT;\n        case 2:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE;\n        case 3:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ContractCodeHistoryOperationType.UNRECOGNIZED;\n    }\n}\nexports.contractCodeHistoryOperationTypeFromJSON = contractCodeHistoryOperationTypeFromJSON;\nfunction contractCodeHistoryOperationTypeToJSON(object) {\n    switch (object) {\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\";\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\";\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\";\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.contractCodeHistoryOperationTypeToJSON = contractCodeHistoryOperationTypeToJSON;\nfunction createBaseAccessTypeParam() {\n    return { value: 0 };\n}\nexports.AccessTypeParam = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.value !== 0) {\n            writer.uint32(8).int32(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAccessTypeParam();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.value = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            value: isSet(object.value) ? accessTypeFromJSON(object.value) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.value !== undefined &&\n            (obj.value = accessTypeToJSON(message.value));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseAccessTypeParam();\n        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    },\n};\nfunction createBaseAccessConfig() {\n    return { permission: 0, address: \"\" };\n}\nexports.AccessConfig = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.permission !== 0) {\n            writer.uint32(8).int32(message.permission);\n        }\n        if (message.address !== \"\") {\n            writer.uint32(18).string(message.address);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAccessConfig();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.permission = reader.int32();\n                    break;\n                case 2:\n                    message.address = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            permission: isSet(object.permission)\n                ? accessTypeFromJSON(object.permission)\n                : 0,\n            address: isSet(object.address) ? String(object.address) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.permission !== undefined &&\n            (obj.permission = accessTypeToJSON(message.permission));\n        message.address !== undefined && (obj.address = message.address);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseAccessConfig();\n        message.permission = (_a = object.permission) !== null && _a !== void 0 ? _a : 0;\n        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseParams() {\n    return {\n        codeUploadAccess: undefined,\n        instantiateDefaultPermission: 0,\n        maxWasmCodeSize: \"0\",\n    };\n}\nexports.Params = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.codeUploadAccess !== undefined) {\n            exports.AccessConfig.encode(message.codeUploadAccess, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.instantiateDefaultPermission !== 0) {\n            writer.uint32(16).int32(message.instantiateDefaultPermission);\n        }\n        if (message.maxWasmCodeSize !== \"0\") {\n            writer.uint32(24).uint64(message.maxWasmCodeSize);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParams();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeUploadAccess = exports.AccessConfig.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.instantiateDefaultPermission = reader.int32();\n                    break;\n                case 3:\n                    message.maxWasmCodeSize = longToString(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            codeUploadAccess: isSet(object.codeUploadAccess)\n                ? exports.AccessConfig.fromJSON(object.codeUploadAccess)\n                : undefined,\n            instantiateDefaultPermission: isSet(object.instantiateDefaultPermission)\n                ? accessTypeFromJSON(object.instantiateDefaultPermission)\n                : 0,\n            maxWasmCodeSize: isSet(object.maxWasmCodeSize)\n                ? String(object.maxWasmCodeSize)\n                : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeUploadAccess !== undefined &&\n            (obj.codeUploadAccess = message.codeUploadAccess\n                ? exports.AccessConfig.toJSON(message.codeUploadAccess)\n                : undefined);\n        message.instantiateDefaultPermission !== undefined &&\n            (obj.instantiateDefaultPermission = accessTypeToJSON(message.instantiateDefaultPermission));\n        message.maxWasmCodeSize !== undefined &&\n            (obj.maxWasmCodeSize = message.maxWasmCodeSize);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseParams();\n        message.codeUploadAccess =\n            object.codeUploadAccess !== undefined && object.codeUploadAccess !== null\n                ? exports.AccessConfig.fromPartial(object.codeUploadAccess)\n                : undefined;\n        message.instantiateDefaultPermission =\n            (_a = object.instantiateDefaultPermission) !== null && _a !== void 0 ? _a : 0;\n        message.maxWasmCodeSize = (_b = object.maxWasmCodeSize) !== null && _b !== void 0 ? _b : \"0\";\n        return message;\n    },\n};\nfunction createBaseCodeInfo() {\n    return {\n        codeHash: new Uint8Array(),\n        creator: \"\",\n        instantiateConfig: undefined,\n    };\n}\nexports.CodeInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.codeHash.length !== 0) {\n            writer.uint32(10).bytes(message.codeHash);\n        }\n        if (message.creator !== \"\") {\n            writer.uint32(18).string(message.creator);\n        }\n        if (message.instantiateConfig !== undefined) {\n            exports.AccessConfig.encode(message.instantiateConfig, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCodeInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeHash = reader.bytes();\n                    break;\n                case 2:\n                    message.creator = reader.string();\n                    break;\n                case 5:\n                    message.instantiateConfig = exports.AccessConfig.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            codeHash: isSet(object.codeHash)\n                ? bytesFromBase64(object.codeHash)\n                : new Uint8Array(),\n            creator: isSet(object.creator) ? String(object.creator) : \"\",\n            instantiateConfig: isSet(object.instantiateConfig)\n                ? exports.AccessConfig.fromJSON(object.instantiateConfig)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeHash !== undefined &&\n            (obj.codeHash = base64FromBytes(message.codeHash !== undefined ? message.codeHash : new Uint8Array()));\n        message.creator !== undefined && (obj.creator = message.creator);\n        message.instantiateConfig !== undefined &&\n            (obj.instantiateConfig = message.instantiateConfig\n                ? exports.AccessConfig.toJSON(message.instantiateConfig)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseCodeInfo();\n        message.codeHash = (_a = object.codeHash) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.creator = (_b = object.creator) !== null && _b !== void 0 ? _b : \"\";\n        message.instantiateConfig =\n            object.instantiateConfig !== undefined &&\n                object.instantiateConfig !== null\n                ? exports.AccessConfig.fromPartial(object.instantiateConfig)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseContractInfo() {\n    return {\n        codeId: \"0\",\n        creator: \"\",\n        admin: \"\",\n        label: \"\",\n        created: undefined,\n        ibcPortId: \"\",\n        extension: undefined,\n    };\n}\nexports.ContractInfo = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.codeId !== \"0\") {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        if (message.creator !== \"\") {\n            writer.uint32(18).string(message.creator);\n        }\n        if (message.admin !== \"\") {\n            writer.uint32(26).string(message.admin);\n        }\n        if (message.label !== \"\") {\n            writer.uint32(34).string(message.label);\n        }\n        if (message.created !== undefined) {\n            exports.AbsoluteTxPosition.encode(message.created, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.ibcPortId !== \"\") {\n            writer.uint32(50).string(message.ibcPortId);\n        }\n        if (message.extension !== undefined) {\n            any_1.Any.encode(message.extension, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContractInfo();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.codeId = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.creator = reader.string();\n                    break;\n                case 3:\n                    message.admin = reader.string();\n                    break;\n                case 4:\n                    message.label = reader.string();\n                    break;\n                case 5:\n                    message.created = exports.AbsoluteTxPosition.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.ibcPortId = reader.string();\n                    break;\n                case 7:\n                    message.extension = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            codeId: isSet(object.codeId) ? String(object.codeId) : \"0\",\n            creator: isSet(object.creator) ? String(object.creator) : \"\",\n            admin: isSet(object.admin) ? String(object.admin) : \"\",\n            label: isSet(object.label) ? String(object.label) : \"\",\n            created: isSet(object.created)\n                ? exports.AbsoluteTxPosition.fromJSON(object.created)\n                : undefined,\n            ibcPortId: isSet(object.ibcPortId) ? String(object.ibcPortId) : \"\",\n            extension: isSet(object.extension)\n                ? any_1.Any.fromJSON(object.extension)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.codeId !== undefined && (obj.codeId = message.codeId);\n        message.creator !== undefined && (obj.creator = message.creator);\n        message.admin !== undefined && (obj.admin = message.admin);\n        message.label !== undefined && (obj.label = message.label);\n        message.created !== undefined &&\n            (obj.created = message.created\n                ? exports.AbsoluteTxPosition.toJSON(message.created)\n                : undefined);\n        message.ibcPortId !== undefined && (obj.ibcPortId = message.ibcPortId);\n        message.extension !== undefined &&\n            (obj.extension = message.extension\n                ? any_1.Any.toJSON(message.extension)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseContractInfo();\n        message.codeId = (_a = object.codeId) !== null && _a !== void 0 ? _a : \"0\";\n        message.creator = (_b = object.creator) !== null && _b !== void 0 ? _b : \"\";\n        message.admin = (_c = object.admin) !== null && _c !== void 0 ? _c : \"\";\n        message.label = (_d = object.label) !== null && _d !== void 0 ? _d : \"\";\n        message.created =\n            object.created !== undefined && object.created !== null\n                ? exports.AbsoluteTxPosition.fromPartial(object.created)\n                : undefined;\n        message.ibcPortId = (_e = object.ibcPortId) !== null && _e !== void 0 ? _e : \"\";\n        message.extension =\n            object.extension !== undefined && object.extension !== null\n                ? any_1.Any.fromPartial(object.extension)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseContractCodeHistoryEntry() {\n    return {\n        operation: 0,\n        codeId: \"0\",\n        updated: undefined,\n        msg: new Uint8Array(),\n    };\n}\nexports.ContractCodeHistoryEntry = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.operation !== 0) {\n            writer.uint32(8).int32(message.operation);\n        }\n        if (message.codeId !== \"0\") {\n            writer.uint32(16).uint64(message.codeId);\n        }\n        if (message.updated !== undefined) {\n            exports.AbsoluteTxPosition.encode(message.updated, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(34).bytes(message.msg);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContractCodeHistoryEntry();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.operation = reader.int32();\n                    break;\n                case 2:\n                    message.codeId = longToString(reader.uint64());\n                    break;\n                case 3:\n                    message.updated = exports.AbsoluteTxPosition.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.msg = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            operation: isSet(object.operation)\n                ? contractCodeHistoryOperationTypeFromJSON(object.operation)\n                : 0,\n            codeId: isSet(object.codeId) ? String(object.codeId) : \"0\",\n            updated: isSet(object.updated)\n                ? exports.AbsoluteTxPosition.fromJSON(object.updated)\n                : undefined,\n            msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.operation !== undefined &&\n            (obj.operation = contractCodeHistoryOperationTypeToJSON(message.operation));\n        message.codeId !== undefined && (obj.codeId = message.codeId);\n        message.updated !== undefined &&\n            (obj.updated = message.updated\n                ? exports.AbsoluteTxPosition.toJSON(message.updated)\n                : undefined);\n        message.msg !== undefined &&\n            (obj.msg = base64FromBytes(message.msg !== undefined ? message.msg : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseContractCodeHistoryEntry();\n        message.operation = (_a = object.operation) !== null && _a !== void 0 ? _a : 0;\n        message.codeId = (_b = object.codeId) !== null && _b !== void 0 ? _b : \"0\";\n        message.updated =\n            object.updated !== undefined && object.updated !== null\n                ? exports.AbsoluteTxPosition.fromPartial(object.updated)\n                : undefined;\n        message.msg = (_c = object.msg) !== null && _c !== void 0 ? _c : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseAbsoluteTxPosition() {\n    return { blockHeight: \"0\", txIndex: \"0\" };\n}\nexports.AbsoluteTxPosition = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.blockHeight !== \"0\") {\n            writer.uint32(8).uint64(message.blockHeight);\n        }\n        if (message.txIndex !== \"0\") {\n            writer.uint32(16).uint64(message.txIndex);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAbsoluteTxPosition();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.blockHeight = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.txIndex = longToString(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            blockHeight: isSet(object.blockHeight) ? String(object.blockHeight) : \"0\",\n            txIndex: isSet(object.txIndex) ? String(object.txIndex) : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.blockHeight !== undefined &&\n            (obj.blockHeight = message.blockHeight);\n        message.txIndex !== undefined && (obj.txIndex = message.txIndex);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseAbsoluteTxPosition();\n        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : \"0\";\n        message.txIndex = (_b = object.txIndex) !== null && _b !== void 0 ? _b : \"0\";\n        return message;\n    },\n};\nfunction createBaseModel() {\n    return { key: new Uint8Array(), value: new Uint8Array() };\n}\nexports.Model = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseModel();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n            value: isSet(object.value)\n                ? bytesFromBase64(object.value)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.value !== undefined &&\n            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseModel();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/cosmwasm/wasm/v1/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Any = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"google.protobuf\";\nfunction createBaseAny() {\n    return { typeUrl: \"\", value: new Uint8Array() };\n}\nexports.Any = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.typeUrl !== \"\") {\n            writer.uint32(10).string(message.typeUrl);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAny();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.typeUrl = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            typeUrl: isSet(object.typeUrl) ? String(object.typeUrl) : \"\",\n            value: isSet(object.value)\n                ? bytesFromBase64(object.value)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.typeUrl !== undefined && (obj.typeUrl = message.typeUrl);\n        message.value !== undefined &&\n            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseAny();\n        message.typeUrl = (_a = object.typeUrl) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=any.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm90by10eXBlcy9nb29nbGUvcHJvdG9idWYvYW55LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVyxHQUFHLHVCQUF1QjtBQUNyQztBQUNBLCtCQUErQixtQkFBTyxDQUFDLG1EQUFNO0FBQzdDLGtDQUFrQyxtQkFBTyxDQUFDLHNFQUFvQjtBQUM5RCx1QkFBdUI7QUFDdkI7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm90by10eXBlc1xcZ29vZ2xlXFxwcm90b2J1ZlxcYW55LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbnkgPSBleHBvcnRzLnByb3RvYnVmUGFja2FnZSA9IHZvaWQgMDtcbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBsb25nXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvbmdcIikpO1xuY29uc3QgbWluaW1hbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwcm90b2J1ZmpzL21pbmltYWxcIikpO1xuZXhwb3J0cy5wcm90b2J1ZlBhY2thZ2UgPSBcImdvb2dsZS5wcm90b2J1ZlwiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZUFueSgpIHtcbiAgICByZXR1cm4geyB0eXBlVXJsOiBcIlwiLCB2YWx1ZTogbmV3IFVpbnQ4QXJyYXkoKSB9O1xufVxuZXhwb3J0cy5BbnkgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS50eXBlVXJsICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS50eXBlVXJsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS52YWx1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2UudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUFueSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHlwZVVybCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbHVlID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGVVcmw6IGlzU2V0KG9iamVjdC50eXBlVXJsKSA/IFN0cmluZyhvYmplY3QudHlwZVVybCkgOiBcIlwiLFxuICAgICAgICAgICAgdmFsdWU6IGlzU2V0KG9iamVjdC52YWx1ZSlcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QudmFsdWUpXG4gICAgICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudHlwZVVybCAhPT0gdW5kZWZpbmVkICYmIChvYmoudHlwZVVybCA9IG1lc3NhZ2UudHlwZVVybCk7XG4gICAgICAgIG1lc3NhZ2UudmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai52YWx1ZSA9IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLnZhbHVlICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlLnZhbHVlIDogbmV3IFVpbnQ4QXJyYXkoKSkpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQW55KCk7XG4gICAgICAgIG1lc3NhZ2UudHlwZVVybCA9IChfYSA9IG9iamVjdC50eXBlVXJsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLnZhbHVlID0gKF9iID0gb2JqZWN0LnZhbHVlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBuZXcgVWludDhBcnJheSgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5jb25zdCBhdG9iID0gZ2xvYmFsVGhpcy5hdG9iIHx8XG4gICAgKChiNjQpID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYjY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImJpbmFyeVwiKSk7XG5mdW5jdGlvbiBieXRlc0Zyb21CYXNlNjQoYjY0KSB7XG4gICAgY29uc3QgYmluID0gYXRvYihiNjQpO1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuY29uc3QgYnRvYSA9IGdsb2JhbFRoaXMuYnRvYSB8fFxuICAgICgoYmluKSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGJpbiwgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpO1xuZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGNvbnN0IGJpbiA9IFtdO1xuICAgIGZvciAoY29uc3QgYnl0ZSBvZiBhcnIpIHtcbiAgICAgICAgYmluLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSk7XG4gICAgfVxuICAgIHJldHVybiBidG9hKGJpbi5qb2luKFwiXCIpKTtcbn1cbmlmIChtaW5pbWFsXzEuZGVmYXVsdC51dGlsLkxvbmcgIT09IGxvbmdfMS5kZWZhdWx0KSB7XG4gICAgbWluaW1hbF8xLmRlZmF1bHQudXRpbC5Mb25nID0gbG9uZ18xLmRlZmF1bHQ7XG4gICAgbWluaW1hbF8xLmRlZmF1bHQuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW55LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/duration.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/google/protobuf/duration.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Duration = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"google.protobuf\";\nfunction createBaseDuration() {\n    return { seconds: \"0\", nanos: 0 };\n}\nexports.Duration = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.seconds !== \"0\") {\n            writer.uint32(8).int64(message.seconds);\n        }\n        if (message.nanos !== 0) {\n            writer.uint32(16).int32(message.nanos);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDuration();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.seconds = longToString(reader.int64());\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            seconds: isSet(object.seconds) ? String(object.seconds) : \"0\",\n            nanos: isSet(object.nanos) ? Number(object.nanos) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.seconds !== undefined && (obj.seconds = message.seconds);\n        message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseDuration();\n        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : \"0\";\n        message.nanos = (_b = object.nanos) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=duration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm90by10eXBlcy9nb29nbGUvcHJvdG9idWYvZHVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyx1QkFBdUI7QUFDMUM7QUFDQSwrQkFBK0IsbUJBQU8sQ0FBQyxtREFBTTtBQUM3QyxrQ0FBa0MsbUJBQU8sQ0FBQyxzRUFBb0I7QUFDOUQsdUJBQXVCO0FBQ3ZCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3RvLXR5cGVzXFxnb29nbGVcXHByb3RvYnVmXFxkdXJhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRHVyYXRpb24gPSBleHBvcnRzLnByb3RvYnVmUGFja2FnZSA9IHZvaWQgMDtcbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBsb25nXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvbmdcIikpO1xuY29uc3QgbWluaW1hbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwcm90b2J1ZmpzL21pbmltYWxcIikpO1xuZXhwb3J0cy5wcm90b2J1ZlBhY2thZ2UgPSBcImdvb2dsZS5wcm90b2J1ZlwiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZUR1cmF0aW9uKCkge1xuICAgIHJldHVybiB7IHNlY29uZHM6IFwiMFwiLCBuYW5vczogMCB9O1xufVxuZXhwb3J0cy5EdXJhdGlvbiA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnNlY29uZHMgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLmludDY0KG1lc3NhZ2Uuc2Vjb25kcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubmFub3MgIT09IDApIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2UubmFub3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUR1cmF0aW9uKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWNvbmRzID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5hbm9zID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlY29uZHM6IGlzU2V0KG9iamVjdC5zZWNvbmRzKSA/IFN0cmluZyhvYmplY3Quc2Vjb25kcykgOiBcIjBcIixcbiAgICAgICAgICAgIG5hbm9zOiBpc1NldChvYmplY3QubmFub3MpID8gTnVtYmVyKG9iamVjdC5uYW5vcykgOiAwLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uuc2Vjb25kcyAhPT0gdW5kZWZpbmVkICYmIChvYmouc2Vjb25kcyA9IG1lc3NhZ2Uuc2Vjb25kcyk7XG4gICAgICAgIG1lc3NhZ2UubmFub3MgIT09IHVuZGVmaW5lZCAmJiAob2JqLm5hbm9zID0gTWF0aC5yb3VuZChtZXNzYWdlLm5hbm9zKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VEdXJhdGlvbigpO1xuICAgICAgICBtZXNzYWdlLnNlY29uZHMgPSAoX2EgPSBvYmplY3Quc2Vjb25kcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCIwXCI7XG4gICAgICAgIG1lc3NhZ2UubmFub3MgPSAoX2IgPSBvYmplY3QubmFub3MpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDA7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gbG9uZ1RvU3RyaW5nKGxvbmcpIHtcbiAgICByZXR1cm4gbG9uZy50b1N0cmluZygpO1xufVxuaWYgKG1pbmltYWxfMS5kZWZhdWx0LnV0aWwuTG9uZyAhPT0gbG9uZ18xLmRlZmF1bHQpIHtcbiAgICBtaW5pbWFsXzEuZGVmYXVsdC51dGlsLkxvbmcgPSBsb25nXzEuZGVmYXVsdDtcbiAgICBtaW5pbWFsXzEuZGVmYXVsdC5jb25maWd1cmUoKTtcbn1cbmZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kdXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/duration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/timestamp.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/google/protobuf/timestamp.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Timestamp = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"google.protobuf\";\nfunction createBaseTimestamp() {\n    return { seconds: \"0\", nanos: 0 };\n}\nexports.Timestamp = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.seconds !== \"0\") {\n            writer.uint32(8).int64(message.seconds);\n        }\n        if (message.nanos !== 0) {\n            writer.uint32(16).int32(message.nanos);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimestamp();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.seconds = longToString(reader.int64());\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            seconds: isSet(object.seconds) ? String(object.seconds) : \"0\",\n            nanos: isSet(object.nanos) ? Number(object.nanos) : 0,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.seconds !== undefined && (obj.seconds = message.seconds);\n        message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseTimestamp();\n        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : \"0\";\n        message.nanos = (_b = object.nanos) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    },\n};\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=timestamp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm90by10eXBlcy9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsdUJBQXVCO0FBQzNDO0FBQ0EsK0JBQStCLG1CQUFPLENBQUMsbURBQU07QUFDN0Msa0NBQWtDLG1CQUFPLENBQUMsc0VBQW9CO0FBQzlELHVCQUF1QjtBQUN2QjtBQUNBLGFBQWE7QUFDYjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm90by10eXBlc1xcZ29vZ2xlXFxwcm90b2J1ZlxcdGltZXN0YW1wLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UaW1lc3RhbXAgPSBleHBvcnRzLnByb3RvYnVmUGFja2FnZSA9IHZvaWQgMDtcbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBsb25nXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvbmdcIikpO1xuY29uc3QgbWluaW1hbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwcm90b2J1ZmpzL21pbmltYWxcIikpO1xuZXhwb3J0cy5wcm90b2J1ZlBhY2thZ2UgPSBcImdvb2dsZS5wcm90b2J1ZlwiO1xuZnVuY3Rpb24gY3JlYXRlQmFzZVRpbWVzdGFtcCgpIHtcbiAgICByZXR1cm4geyBzZWNvbmRzOiBcIjBcIiwgbmFub3M6IDAgfTtcbn1cbmV4cG9ydHMuVGltZXN0YW1wID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2Vjb25kcyAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkuaW50NjQobWVzc2FnZS5zZWNvbmRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5uYW5vcyAhPT0gMCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50MzIobWVzc2FnZS5uYW5vcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlVGltZXN0YW1wKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWNvbmRzID0gbG9uZ1RvU3RyaW5nKHJlYWRlci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5hbm9zID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlY29uZHM6IGlzU2V0KG9iamVjdC5zZWNvbmRzKSA/IFN0cmluZyhvYmplY3Quc2Vjb25kcykgOiBcIjBcIixcbiAgICAgICAgICAgIG5hbm9zOiBpc1NldChvYmplY3QubmFub3MpID8gTnVtYmVyKG9iamVjdC5uYW5vcykgOiAwLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2Uuc2Vjb25kcyAhPT0gdW5kZWZpbmVkICYmIChvYmouc2Vjb25kcyA9IG1lc3NhZ2Uuc2Vjb25kcyk7XG4gICAgICAgIG1lc3NhZ2UubmFub3MgIT09IHVuZGVmaW5lZCAmJiAob2JqLm5hbm9zID0gTWF0aC5yb3VuZChtZXNzYWdlLm5hbm9zKSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VUaW1lc3RhbXAoKTtcbiAgICAgICAgbWVzc2FnZS5zZWNvbmRzID0gKF9hID0gb2JqZWN0LnNlY29uZHMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiMFwiO1xuICAgICAgICBtZXNzYWdlLm5hbm9zID0gKF9iID0gb2JqZWN0Lm5hbm9zKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGxvbmdUb1N0cmluZyhsb25nKSB7XG4gICAgcmV0dXJuIGxvbmcudG9TdHJpbmcoKTtcbn1cbmlmIChtaW5pbWFsXzEuZGVmYXVsdC51dGlsLkxvbmcgIT09IGxvbmdfMS5kZWZhdWx0KSB7XG4gICAgbWluaW1hbF8xLmRlZmF1bHQudXRpbC5Mb25nID0gbG9uZ18xLmRlZmF1bHQ7XG4gICAgbWluaW1hbF8xLmRlZmF1bHQuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXN0YW1wLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/timestamp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/ibc/applications/transfer/v1/tx.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/ibc/applications/transfer/v1/tx.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsgTransferResponse = exports.MsgTransfer = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst coin_1 = __webpack_require__(/*! ../../../../cosmos/base/v1beta1/coin */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/base/v1beta1/coin.js\");\nconst client_1 = __webpack_require__(/*! ../../../../ibc/core/client/v1/client */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/ibc/core/client/v1/client.js\");\nexports.protobufPackage = \"ibc.applications.transfer.v1\";\nfunction createBaseMsgTransfer() {\n    return {\n        sourcePort: \"\",\n        sourceChannel: \"\",\n        token: undefined,\n        sender: \"\",\n        receiver: \"\",\n        timeoutHeight: undefined,\n        timeoutTimestamp: \"0\",\n        memo: \"\",\n    };\n}\nexports.MsgTransfer = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.sourcePort !== \"\") {\n            writer.uint32(10).string(message.sourcePort);\n        }\n        if (message.sourceChannel !== \"\") {\n            writer.uint32(18).string(message.sourceChannel);\n        }\n        if (message.token !== undefined) {\n            coin_1.Coin.encode(message.token, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(34).string(message.sender);\n        }\n        if (message.receiver !== \"\") {\n            writer.uint32(42).string(message.receiver);\n        }\n        if (message.timeoutHeight !== undefined) {\n            client_1.Height.encode(message.timeoutHeight, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.timeoutTimestamp !== \"0\") {\n            writer.uint32(56).uint64(message.timeoutTimestamp);\n        }\n        if (message.memo !== \"\") {\n            writer.uint32(66).string(message.memo);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgTransfer();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.sourcePort = reader.string();\n                    break;\n                case 2:\n                    message.sourceChannel = reader.string();\n                    break;\n                case 3:\n                    message.token = coin_1.Coin.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.sender = reader.string();\n                    break;\n                case 5:\n                    message.receiver = reader.string();\n                    break;\n                case 6:\n                    message.timeoutHeight = client_1.Height.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.timeoutTimestamp = longToString(reader.uint64());\n                    break;\n                case 8:\n                    message.memo = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            sourcePort: isSet(object.sourcePort) ? String(object.sourcePort) : \"\",\n            sourceChannel: isSet(object.sourceChannel)\n                ? String(object.sourceChannel)\n                : \"\",\n            token: isSet(object.token) ? coin_1.Coin.fromJSON(object.token) : undefined,\n            sender: isSet(object.sender) ? String(object.sender) : \"\",\n            receiver: isSet(object.receiver) ? String(object.receiver) : \"\",\n            timeoutHeight: isSet(object.timeoutHeight)\n                ? client_1.Height.fromJSON(object.timeoutHeight)\n                : undefined,\n            timeoutTimestamp: isSet(object.timeoutTimestamp)\n                ? String(object.timeoutTimestamp)\n                : \"0\",\n            memo: isSet(object.memo) ? String(object.memo) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.sourcePort !== undefined && (obj.sourcePort = message.sourcePort);\n        message.sourceChannel !== undefined &&\n            (obj.sourceChannel = message.sourceChannel);\n        message.token !== undefined &&\n            (obj.token = message.token ? coin_1.Coin.toJSON(message.token) : undefined);\n        message.sender !== undefined && (obj.sender = message.sender);\n        message.receiver !== undefined && (obj.receiver = message.receiver);\n        message.timeoutHeight !== undefined &&\n            (obj.timeoutHeight = message.timeoutHeight\n                ? client_1.Height.toJSON(message.timeoutHeight)\n                : undefined);\n        message.timeoutTimestamp !== undefined &&\n            (obj.timeoutTimestamp = message.timeoutTimestamp);\n        message.memo !== undefined && (obj.memo = message.memo);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseMsgTransfer();\n        message.sourcePort = (_a = object.sourcePort) !== null && _a !== void 0 ? _a : \"\";\n        message.sourceChannel = (_b = object.sourceChannel) !== null && _b !== void 0 ? _b : \"\";\n        message.token =\n            object.token !== undefined && object.token !== null\n                ? coin_1.Coin.fromPartial(object.token)\n                : undefined;\n        message.sender = (_c = object.sender) !== null && _c !== void 0 ? _c : \"\";\n        message.receiver = (_d = object.receiver) !== null && _d !== void 0 ? _d : \"\";\n        message.timeoutHeight =\n            object.timeoutHeight !== undefined && object.timeoutHeight !== null\n                ? client_1.Height.fromPartial(object.timeoutHeight)\n                : undefined;\n        message.timeoutTimestamp = (_e = object.timeoutTimestamp) !== null && _e !== void 0 ? _e : \"0\";\n        message.memo = (_f = object.memo) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    },\n};\nfunction createBaseMsgTransferResponse() {\n    return {};\n}\nexports.MsgTransferResponse = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgTransferResponse();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        return {};\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = createBaseMsgTransferResponse();\n        return message;\n    },\n};\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=tx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/ibc/applications/transfer/v1/tx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/ibc/core/client/v1/client.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/ibc/core/client/v1/client.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Params = exports.Height = exports.UpgradeProposal = exports.ClientUpdateProposal = exports.ClientConsensusStates = exports.ConsensusStateWithHeight = exports.IdentifiedClientState = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst any_1 = __webpack_require__(/*! ../../../../google/protobuf/any */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/any.js\");\nconst upgrade_1 = __webpack_require__(/*! ../../../../cosmos/upgrade/v1beta1/upgrade */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/cosmos/upgrade/v1beta1/upgrade.js\");\nexports.protobufPackage = \"ibc.core.client.v1\";\nfunction createBaseIdentifiedClientState() {\n    return { clientId: \"\", clientState: undefined };\n}\nexports.IdentifiedClientState = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        if (message.clientState !== undefined) {\n            any_1.Any.encode(message.clientState, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIdentifiedClientState();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.clientState = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            clientId: isSet(object.clientId) ? String(object.clientId) : \"\",\n            clientState: isSet(object.clientState)\n                ? any_1.Any.fromJSON(object.clientState)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.clientId !== undefined && (obj.clientId = message.clientId);\n        message.clientState !== undefined &&\n            (obj.clientState = message.clientState\n                ? any_1.Any.toJSON(message.clientState)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseIdentifiedClientState();\n        message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n        message.clientState =\n            object.clientState !== undefined && object.clientState !== null\n                ? any_1.Any.fromPartial(object.clientState)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseConsensusStateWithHeight() {\n    return { height: undefined, consensusState: undefined };\n}\nexports.ConsensusStateWithHeight = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.height !== undefined) {\n            exports.Height.encode(message.height, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.consensusState !== undefined) {\n            any_1.Any.encode(message.consensusState, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseConsensusStateWithHeight();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = exports.Height.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.consensusState = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            height: isSet(object.height) ? exports.Height.fromJSON(object.height) : undefined,\n            consensusState: isSet(object.consensusState)\n                ? any_1.Any.fromJSON(object.consensusState)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined &&\n            (obj.height = message.height ? exports.Height.toJSON(message.height) : undefined);\n        message.consensusState !== undefined &&\n            (obj.consensusState = message.consensusState\n                ? any_1.Any.toJSON(message.consensusState)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseConsensusStateWithHeight();\n        message.height =\n            object.height !== undefined && object.height !== null\n                ? exports.Height.fromPartial(object.height)\n                : undefined;\n        message.consensusState =\n            object.consensusState !== undefined && object.consensusState !== null\n                ? any_1.Any.fromPartial(object.consensusState)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseClientConsensusStates() {\n    return { clientId: \"\", consensusStates: [] };\n}\nexports.ClientConsensusStates = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        for (const v of message.consensusStates) {\n            exports.ConsensusStateWithHeight.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientConsensusStates();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.consensusStates.push(exports.ConsensusStateWithHeight.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            clientId: isSet(object.clientId) ? String(object.clientId) : \"\",\n            consensusStates: Array.isArray(object === null || object === void 0 ? void 0 : object.consensusStates)\n                ? object.consensusStates.map((e) => exports.ConsensusStateWithHeight.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.clientId !== undefined && (obj.clientId = message.clientId);\n        if (message.consensusStates) {\n            obj.consensusStates = message.consensusStates.map((e) => e ? exports.ConsensusStateWithHeight.toJSON(e) : undefined);\n        }\n        else {\n            obj.consensusStates = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseClientConsensusStates();\n        message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n        message.consensusStates =\n            ((_b = object.consensusStates) === null || _b === void 0 ? void 0 : _b.map((e) => exports.ConsensusStateWithHeight.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseClientUpdateProposal() {\n    return {\n        title: \"\",\n        description: \"\",\n        subjectClientId: \"\",\n        substituteClientId: \"\",\n    };\n}\nexports.ClientUpdateProposal = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.title !== \"\") {\n            writer.uint32(10).string(message.title);\n        }\n        if (message.description !== \"\") {\n            writer.uint32(18).string(message.description);\n        }\n        if (message.subjectClientId !== \"\") {\n            writer.uint32(26).string(message.subjectClientId);\n        }\n        if (message.substituteClientId !== \"\") {\n            writer.uint32(34).string(message.substituteClientId);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientUpdateProposal();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.title = reader.string();\n                    break;\n                case 2:\n                    message.description = reader.string();\n                    break;\n                case 3:\n                    message.subjectClientId = reader.string();\n                    break;\n                case 4:\n                    message.substituteClientId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            title: isSet(object.title) ? String(object.title) : \"\",\n            description: isSet(object.description) ? String(object.description) : \"\",\n            subjectClientId: isSet(object.subjectClientId)\n                ? String(object.subjectClientId)\n                : \"\",\n            substituteClientId: isSet(object.substituteClientId)\n                ? String(object.substituteClientId)\n                : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.title !== undefined && (obj.title = message.title);\n        message.description !== undefined &&\n            (obj.description = message.description);\n        message.subjectClientId !== undefined &&\n            (obj.subjectClientId = message.subjectClientId);\n        message.substituteClientId !== undefined &&\n            (obj.substituteClientId = message.substituteClientId);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseClientUpdateProposal();\n        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : \"\";\n        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : \"\";\n        message.subjectClientId = (_c = object.subjectClientId) !== null && _c !== void 0 ? _c : \"\";\n        message.substituteClientId = (_d = object.substituteClientId) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    },\n};\nfunction createBaseUpgradeProposal() {\n    return {\n        title: \"\",\n        description: \"\",\n        plan: undefined,\n        upgradedClientState: undefined,\n    };\n}\nexports.UpgradeProposal = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.title !== \"\") {\n            writer.uint32(10).string(message.title);\n        }\n        if (message.description !== \"\") {\n            writer.uint32(18).string(message.description);\n        }\n        if (message.plan !== undefined) {\n            upgrade_1.Plan.encode(message.plan, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.upgradedClientState !== undefined) {\n            any_1.Any.encode(message.upgradedClientState, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpgradeProposal();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.title = reader.string();\n                    break;\n                case 2:\n                    message.description = reader.string();\n                    break;\n                case 3:\n                    message.plan = upgrade_1.Plan.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.upgradedClientState = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            title: isSet(object.title) ? String(object.title) : \"\",\n            description: isSet(object.description) ? String(object.description) : \"\",\n            plan: isSet(object.plan) ? upgrade_1.Plan.fromJSON(object.plan) : undefined,\n            upgradedClientState: isSet(object.upgradedClientState)\n                ? any_1.Any.fromJSON(object.upgradedClientState)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.title !== undefined && (obj.title = message.title);\n        message.description !== undefined &&\n            (obj.description = message.description);\n        message.plan !== undefined &&\n            (obj.plan = message.plan ? upgrade_1.Plan.toJSON(message.plan) : undefined);\n        message.upgradedClientState !== undefined &&\n            (obj.upgradedClientState = message.upgradedClientState\n                ? any_1.Any.toJSON(message.upgradedClientState)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseUpgradeProposal();\n        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : \"\";\n        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : \"\";\n        message.plan =\n            object.plan !== undefined && object.plan !== null\n                ? upgrade_1.Plan.fromPartial(object.plan)\n                : undefined;\n        message.upgradedClientState =\n            object.upgradedClientState !== undefined &&\n                object.upgradedClientState !== null\n                ? any_1.Any.fromPartial(object.upgradedClientState)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseHeight() {\n    return { revisionNumber: \"0\", revisionHeight: \"0\" };\n}\nexports.Height = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.revisionNumber !== \"0\") {\n            writer.uint32(8).uint64(message.revisionNumber);\n        }\n        if (message.revisionHeight !== \"0\") {\n            writer.uint32(16).uint64(message.revisionHeight);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseHeight();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.revisionNumber = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.revisionHeight = longToString(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            revisionNumber: isSet(object.revisionNumber)\n                ? String(object.revisionNumber)\n                : \"0\",\n            revisionHeight: isSet(object.revisionHeight)\n                ? String(object.revisionHeight)\n                : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.revisionNumber !== undefined &&\n            (obj.revisionNumber = message.revisionNumber);\n        message.revisionHeight !== undefined &&\n            (obj.revisionHeight = message.revisionHeight);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseHeight();\n        message.revisionNumber = (_a = object.revisionNumber) !== null && _a !== void 0 ? _a : \"0\";\n        message.revisionHeight = (_b = object.revisionHeight) !== null && _b !== void 0 ? _b : \"0\";\n        return message;\n    },\n};\nfunction createBaseParams() {\n    return { allowedClients: [] };\n}\nexports.Params = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.allowedClients) {\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParams();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.allowedClients.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            allowedClients: Array.isArray(object === null || object === void 0 ? void 0 : object.allowedClients)\n                ? object.allowedClients.map((e) => String(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.allowedClients) {\n            obj.allowedClients = message.allowedClients.map((e) => e);\n        }\n        else {\n            obj.allowedClients = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseParams();\n        message.allowedClients = ((_a = object.allowedClients) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm90by10eXBlcy9pYmMvY29yZS9jbGllbnQvdjEvY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYyxHQUFHLGNBQWMsR0FBRyx1QkFBdUIsR0FBRyw0QkFBNEIsR0FBRyw2QkFBNkIsR0FBRyxnQ0FBZ0MsR0FBRyw2QkFBNkIsR0FBRyx1QkFBdUI7QUFDck47QUFDQSwrQkFBK0IsbUJBQU8sQ0FBQyxtREFBTTtBQUM3QyxrQ0FBa0MsbUJBQU8sQ0FBQyxzRUFBb0I7QUFDOUQsY0FBYyxtQkFBTyxDQUFDLDhHQUFpQztBQUN2RCxrQkFBa0IsbUJBQU8sQ0FBQyxvSUFBNEM7QUFDdEUsdUJBQXVCO0FBQ3ZCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3RvLXR5cGVzXFxpYmNcXGNvcmVcXGNsaWVudFxcdjFcXGNsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGFyYW1zID0gZXhwb3J0cy5IZWlnaHQgPSBleHBvcnRzLlVwZ3JhZGVQcm9wb3NhbCA9IGV4cG9ydHMuQ2xpZW50VXBkYXRlUHJvcG9zYWwgPSBleHBvcnRzLkNsaWVudENvbnNlbnN1c1N0YXRlcyA9IGV4cG9ydHMuQ29uc2Vuc3VzU3RhdGVXaXRoSGVpZ2h0ID0gZXhwb3J0cy5JZGVudGlmaWVkQ2xpZW50U3RhdGUgPSBleHBvcnRzLnByb3RvYnVmUGFja2FnZSA9IHZvaWQgMDtcbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBsb25nXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvbmdcIikpO1xuY29uc3QgbWluaW1hbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwcm90b2J1ZmpzL21pbmltYWxcIikpO1xuY29uc3QgYW55XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZ29vZ2xlL3Byb3RvYnVmL2FueVwiKTtcbmNvbnN0IHVwZ3JhZGVfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jb3Ntb3MvdXBncmFkZS92MWJldGExL3VwZ3JhZGVcIik7XG5leHBvcnRzLnByb3RvYnVmUGFja2FnZSA9IFwiaWJjLmNvcmUuY2xpZW50LnYxXCI7XG5mdW5jdGlvbiBjcmVhdGVCYXNlSWRlbnRpZmllZENsaWVudFN0YXRlKCkge1xuICAgIHJldHVybiB7IGNsaWVudElkOiBcIlwiLCBjbGllbnRTdGF0ZTogdW5kZWZpbmVkIH07XG59XG5leHBvcnRzLklkZW50aWZpZWRDbGllbnRTdGF0ZSA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmNsaWVudElkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS5jbGllbnRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY2xpZW50U3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYW55XzEuQW55LmVuY29kZShtZXNzYWdlLmNsaWVudFN0YXRlLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUlkZW50aWZpZWRDbGllbnRTdGF0ZSgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2xpZW50SWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jbGllbnRTdGF0ZSA9IGFueV8xLkFueS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGllbnRJZDogaXNTZXQob2JqZWN0LmNsaWVudElkKSA/IFN0cmluZyhvYmplY3QuY2xpZW50SWQpIDogXCJcIixcbiAgICAgICAgICAgIGNsaWVudFN0YXRlOiBpc1NldChvYmplY3QuY2xpZW50U3RhdGUpXG4gICAgICAgICAgICAgICAgPyBhbnlfMS5BbnkuZnJvbUpTT04ob2JqZWN0LmNsaWVudFN0YXRlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuY2xpZW50SWQgIT09IHVuZGVmaW5lZCAmJiAob2JqLmNsaWVudElkID0gbWVzc2FnZS5jbGllbnRJZCk7XG4gICAgICAgIG1lc3NhZ2UuY2xpZW50U3RhdGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5jbGllbnRTdGF0ZSA9IG1lc3NhZ2UuY2xpZW50U3RhdGVcbiAgICAgICAgICAgICAgICA/IGFueV8xLkFueS50b0pTT04obWVzc2FnZS5jbGllbnRTdGF0ZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUlkZW50aWZpZWRDbGllbnRTdGF0ZSgpO1xuICAgICAgICBtZXNzYWdlLmNsaWVudElkID0gKF9hID0gb2JqZWN0LmNsaWVudElkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLmNsaWVudFN0YXRlID1cbiAgICAgICAgICAgIG9iamVjdC5jbGllbnRTdGF0ZSAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5jbGllbnRTdGF0ZSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gYW55XzEuQW55LmZyb21QYXJ0aWFsKG9iamVjdC5jbGllbnRTdGF0ZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQ29uc2Vuc3VzU3RhdGVXaXRoSGVpZ2h0KCkge1xuICAgIHJldHVybiB7IGhlaWdodDogdW5kZWZpbmVkLCBjb25zZW5zdXNTdGF0ZTogdW5kZWZpbmVkIH07XG59XG5leHBvcnRzLkNvbnNlbnN1c1N0YXRlV2l0aEhlaWdodCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHBvcnRzLkhlaWdodC5lbmNvZGUobWVzc2FnZS5oZWlnaHQsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY29uc2Vuc3VzU3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYW55XzEuQW55LmVuY29kZShtZXNzYWdlLmNvbnNlbnN1c1N0YXRlLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbnNlbnN1c1N0YXRlV2l0aEhlaWdodCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gZXhwb3J0cy5IZWlnaHQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbnNlbnN1c1N0YXRlID0gYW55XzEuQW55LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhlaWdodDogaXNTZXQob2JqZWN0LmhlaWdodCkgPyBleHBvcnRzLkhlaWdodC5mcm9tSlNPTihvYmplY3QuaGVpZ2h0KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbnNlbnN1c1N0YXRlOiBpc1NldChvYmplY3QuY29uc2Vuc3VzU3RhdGUpXG4gICAgICAgICAgICAgICAgPyBhbnlfMS5BbnkuZnJvbUpTT04ob2JqZWN0LmNvbnNlbnN1c1N0YXRlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouaGVpZ2h0ID0gbWVzc2FnZS5oZWlnaHQgPyBleHBvcnRzLkhlaWdodC50b0pTT04obWVzc2FnZS5oZWlnaHQpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgbWVzc2FnZS5jb25zZW5zdXNTdGF0ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmNvbnNlbnN1c1N0YXRlID0gbWVzc2FnZS5jb25zZW5zdXNTdGF0ZVxuICAgICAgICAgICAgICAgID8gYW55XzEuQW55LnRvSlNPTihtZXNzYWdlLmNvbnNlbnN1c1N0YXRlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbnNlbnN1c1N0YXRlV2l0aEhlaWdodCgpO1xuICAgICAgICBtZXNzYWdlLmhlaWdodCA9XG4gICAgICAgICAgICBvYmplY3QuaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmhlaWdodCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgID8gZXhwb3J0cy5IZWlnaHQuZnJvbVBhcnRpYWwob2JqZWN0LmhlaWdodClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbWVzc2FnZS5jb25zZW5zdXNTdGF0ZSA9XG4gICAgICAgICAgICBvYmplY3QuY29uc2Vuc3VzU3RhdGUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuY29uc2Vuc3VzU3RhdGUgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IGFueV8xLkFueS5mcm9tUGFydGlhbChvYmplY3QuY29uc2Vuc3VzU3RhdGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNsaWVudENvbnNlbnN1c1N0YXRlcygpIHtcbiAgICByZXR1cm4geyBjbGllbnRJZDogXCJcIiwgY29uc2Vuc3VzU3RhdGVzOiBbXSB9O1xufVxuZXhwb3J0cy5DbGllbnRDb25zZW5zdXNTdGF0ZXMgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5jbGllbnRJZCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuY2xpZW50SWQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmNvbnNlbnN1c1N0YXRlcykge1xuICAgICAgICAgICAgZXhwb3J0cy5Db25zZW5zdXNTdGF0ZVdpdGhIZWlnaHQuZW5jb2RlKHYsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ2xpZW50Q29uc2Vuc3VzU3RhdGVzKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jbGllbnRJZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbnNlbnN1c1N0YXRlcy5wdXNoKGV4cG9ydHMuQ29uc2Vuc3VzU3RhdGVXaXRoSGVpZ2h0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGllbnRJZDogaXNTZXQob2JqZWN0LmNsaWVudElkKSA/IFN0cmluZyhvYmplY3QuY2xpZW50SWQpIDogXCJcIixcbiAgICAgICAgICAgIGNvbnNlbnN1c1N0YXRlczogQXJyYXkuaXNBcnJheShvYmplY3QgPT09IG51bGwgfHwgb2JqZWN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmplY3QuY29uc2Vuc3VzU3RhdGVzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmNvbnNlbnN1c1N0YXRlcy5tYXAoKGUpID0+IGV4cG9ydHMuQ29uc2Vuc3VzU3RhdGVXaXRoSGVpZ2h0LmZyb21KU09OKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5jbGllbnRJZCAhPT0gdW5kZWZpbmVkICYmIChvYmouY2xpZW50SWQgPSBtZXNzYWdlLmNsaWVudElkKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY29uc2Vuc3VzU3RhdGVzKSB7XG4gICAgICAgICAgICBvYmouY29uc2Vuc3VzU3RhdGVzID0gbWVzc2FnZS5jb25zZW5zdXNTdGF0ZXMubWFwKChlKSA9PiBlID8gZXhwb3J0cy5Db25zZW5zdXNTdGF0ZVdpdGhIZWlnaHQudG9KU09OKGUpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5jb25zZW5zdXNTdGF0ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ2xpZW50Q29uc2Vuc3VzU3RhdGVzKCk7XG4gICAgICAgIG1lc3NhZ2UuY2xpZW50SWQgPSAoX2EgPSBvYmplY3QuY2xpZW50SWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIG1lc3NhZ2UuY29uc2Vuc3VzU3RhdGVzID1cbiAgICAgICAgICAgICgoX2IgPSBvYmplY3QuY29uc2Vuc3VzU3RhdGVzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWFwKChlKSA9PiBleHBvcnRzLkNvbnNlbnN1c1N0YXRlV2l0aEhlaWdodC5mcm9tUGFydGlhbChlKSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VDbGllbnRVcGRhdGVQcm9wb3NhbCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXCJcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgIHN1YmplY3RDbGllbnRJZDogXCJcIixcbiAgICAgICAgc3Vic3RpdHV0ZUNsaWVudElkOiBcIlwiLFxuICAgIH07XG59XG5leHBvcnRzLkNsaWVudFVwZGF0ZVByb3Bvc2FsID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UudGl0bGUgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kZXNjcmlwdGlvbiAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UuZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN1YmplY3RDbGllbnRJZCAhPT0gXCJcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigyNikuc3RyaW5nKG1lc3NhZ2Uuc3ViamVjdENsaWVudElkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zdWJzdGl0dXRlQ2xpZW50SWQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMzQpLnN0cmluZyhtZXNzYWdlLnN1YnN0aXR1dGVDbGllbnRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ2xpZW50VXBkYXRlUHJvcG9zYWwoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpdGxlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVzY3JpcHRpb24gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdWJqZWN0Q2xpZW50SWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdWJzdGl0dXRlQ2xpZW50SWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlOiBpc1NldChvYmplY3QudGl0bGUpID8gU3RyaW5nKG9iamVjdC50aXRsZSkgOiBcIlwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGlzU2V0KG9iamVjdC5kZXNjcmlwdGlvbikgPyBTdHJpbmcob2JqZWN0LmRlc2NyaXB0aW9uKSA6IFwiXCIsXG4gICAgICAgICAgICBzdWJqZWN0Q2xpZW50SWQ6IGlzU2V0KG9iamVjdC5zdWJqZWN0Q2xpZW50SWQpXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcob2JqZWN0LnN1YmplY3RDbGllbnRJZClcbiAgICAgICAgICAgICAgICA6IFwiXCIsXG4gICAgICAgICAgICBzdWJzdGl0dXRlQ2xpZW50SWQ6IGlzU2V0KG9iamVjdC5zdWJzdGl0dXRlQ2xpZW50SWQpXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcob2JqZWN0LnN1YnN0aXR1dGVDbGllbnRJZClcbiAgICAgICAgICAgICAgICA6IFwiXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS50aXRsZSAhPT0gdW5kZWZpbmVkICYmIChvYmoudGl0bGUgPSBtZXNzYWdlLnRpdGxlKTtcbiAgICAgICAgbWVzc2FnZS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmRlc2NyaXB0aW9uID0gbWVzc2FnZS5kZXNjcmlwdGlvbik7XG4gICAgICAgIG1lc3NhZ2Uuc3ViamVjdENsaWVudElkICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmouc3ViamVjdENsaWVudElkID0gbWVzc2FnZS5zdWJqZWN0Q2xpZW50SWQpO1xuICAgICAgICBtZXNzYWdlLnN1YnN0aXR1dGVDbGllbnRJZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnN1YnN0aXR1dGVDbGllbnRJZCA9IG1lc3NhZ2Uuc3Vic3RpdHV0ZUNsaWVudElkKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ2xpZW50VXBkYXRlUHJvcG9zYWwoKTtcbiAgICAgICAgbWVzc2FnZS50aXRsZSA9IChfYSA9IG9iamVjdC50aXRsZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5kZXNjcmlwdGlvbiA9IChfYiA9IG9iamVjdC5kZXNjcmlwdGlvbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5zdWJqZWN0Q2xpZW50SWQgPSAoX2MgPSBvYmplY3Quc3ViamVjdENsaWVudElkKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBcIlwiO1xuICAgICAgICBtZXNzYWdlLnN1YnN0aXR1dGVDbGllbnRJZCA9IChfZCA9IG9iamVjdC5zdWJzdGl0dXRlQ2xpZW50SWQpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IFwiXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVVwZ3JhZGVQcm9wb3NhbCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXCJcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgIHBsYW46IHVuZGVmaW5lZCxcbiAgICAgICAgdXBncmFkZWRDbGllbnRTdGF0ZTogdW5kZWZpbmVkLFxuICAgIH07XG59XG5leHBvcnRzLlVwZ3JhZGVQcm9wb3NhbCA9IHtcbiAgICBlbmNvZGUobWVzc2FnZSwgd3JpdGVyID0gbWluaW1hbF8xLmRlZmF1bHQuV3JpdGVyLmNyZWF0ZSgpKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnRpdGxlICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS50aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZGVzY3JpcHRpb24gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wbGFuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHVwZ3JhZGVfMS5QbGFuLmVuY29kZShtZXNzYWdlLnBsYW4sIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UudXBncmFkZWRDbGllbnRTdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhbnlfMS5BbnkuZW5jb2RlKG1lc3NhZ2UudXBncmFkZWRDbGllbnRTdGF0ZSwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVcGdyYWRlUHJvcG9zYWwoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRpdGxlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVzY3JpcHRpb24gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wbGFuID0gdXBncmFkZV8xLlBsYW4uZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnVwZ3JhZGVkQ2xpZW50U3RhdGUgPSBhbnlfMS5BbnkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGU6IGlzU2V0KG9iamVjdC50aXRsZSkgPyBTdHJpbmcob2JqZWN0LnRpdGxlKSA6IFwiXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogaXNTZXQob2JqZWN0LmRlc2NyaXB0aW9uKSA/IFN0cmluZyhvYmplY3QuZGVzY3JpcHRpb24pIDogXCJcIixcbiAgICAgICAgICAgIHBsYW46IGlzU2V0KG9iamVjdC5wbGFuKSA/IHVwZ3JhZGVfMS5QbGFuLmZyb21KU09OKG9iamVjdC5wbGFuKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVwZ3JhZGVkQ2xpZW50U3RhdGU6IGlzU2V0KG9iamVjdC51cGdyYWRlZENsaWVudFN0YXRlKVxuICAgICAgICAgICAgICAgID8gYW55XzEuQW55LmZyb21KU09OKG9iamVjdC51cGdyYWRlZENsaWVudFN0YXRlKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UudGl0bGUgIT09IHVuZGVmaW5lZCAmJiAob2JqLnRpdGxlID0gbWVzc2FnZS50aXRsZSk7XG4gICAgICAgIG1lc3NhZ2UuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5kZXNjcmlwdGlvbiA9IG1lc3NhZ2UuZGVzY3JpcHRpb24pO1xuICAgICAgICBtZXNzYWdlLnBsYW4gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5wbGFuID0gbWVzc2FnZS5wbGFuID8gdXBncmFkZV8xLlBsYW4udG9KU09OKG1lc3NhZ2UucGxhbikgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnVwZ3JhZGVkQ2xpZW50U3RhdGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai51cGdyYWRlZENsaWVudFN0YXRlID0gbWVzc2FnZS51cGdyYWRlZENsaWVudFN0YXRlXG4gICAgICAgICAgICAgICAgPyBhbnlfMS5BbnkudG9KU09OKG1lc3NhZ2UudXBncmFkZWRDbGllbnRTdGF0ZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VVcGdyYWRlUHJvcG9zYWwoKTtcbiAgICAgICAgbWVzc2FnZS50aXRsZSA9IChfYSA9IG9iamVjdC50aXRsZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5kZXNjcmlwdGlvbiA9IChfYiA9IG9iamVjdC5kZXNjcmlwdGlvbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbiAgICAgICAgbWVzc2FnZS5wbGFuID1cbiAgICAgICAgICAgIG9iamVjdC5wbGFuICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LnBsYW4gIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IHVwZ3JhZGVfMS5QbGFuLmZyb21QYXJ0aWFsKG9iamVjdC5wbGFuKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlLnVwZ3JhZGVkQ2xpZW50U3RhdGUgPVxuICAgICAgICAgICAgb2JqZWN0LnVwZ3JhZGVkQ2xpZW50U3RhdGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIG9iamVjdC51cGdyYWRlZENsaWVudFN0YXRlICE9PSBudWxsXG4gICAgICAgICAgICAgICAgPyBhbnlfMS5BbnkuZnJvbVBhcnRpYWwob2JqZWN0LnVwZ3JhZGVkQ2xpZW50U3RhdGUpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUhlaWdodCgpIHtcbiAgICByZXR1cm4geyByZXZpc2lvbk51bWJlcjogXCIwXCIsIHJldmlzaW9uSGVpZ2h0OiBcIjBcIiB9O1xufVxuZXhwb3J0cy5IZWlnaHQgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5yZXZpc2lvbk51bWJlciAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkudWludDY0KG1lc3NhZ2UucmV2aXNpb25OdW1iZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnJldmlzaW9uSGVpZ2h0ICE9PSBcIjBcIikge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigxNikudWludDY0KG1lc3NhZ2UucmV2aXNpb25IZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUhlaWdodCgpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmV2aXNpb25OdW1iZXIgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJldmlzaW9uSGVpZ2h0ID0gbG9uZ1RvU3RyaW5nKHJlYWRlci51aW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJldmlzaW9uTnVtYmVyOiBpc1NldChvYmplY3QucmV2aXNpb25OdW1iZXIpXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcob2JqZWN0LnJldmlzaW9uTnVtYmVyKVxuICAgICAgICAgICAgICAgIDogXCIwXCIsXG4gICAgICAgICAgICByZXZpc2lvbkhlaWdodDogaXNTZXQob2JqZWN0LnJldmlzaW9uSGVpZ2h0KVxuICAgICAgICAgICAgICAgID8gU3RyaW5nKG9iamVjdC5yZXZpc2lvbkhlaWdodClcbiAgICAgICAgICAgICAgICA6IFwiMFwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UucmV2aXNpb25OdW1iZXIgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKG9iai5yZXZpc2lvbk51bWJlciA9IG1lc3NhZ2UucmV2aXNpb25OdW1iZXIpO1xuICAgICAgICBtZXNzYWdlLnJldmlzaW9uSGVpZ2h0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIChvYmoucmV2aXNpb25IZWlnaHQgPSBtZXNzYWdlLnJldmlzaW9uSGVpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUhlaWdodCgpO1xuICAgICAgICBtZXNzYWdlLnJldmlzaW9uTnVtYmVyID0gKF9hID0gb2JqZWN0LnJldmlzaW9uTnVtYmVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5yZXZpc2lvbkhlaWdodCA9IChfYiA9IG9iamVjdC5yZXZpc2lvbkhlaWdodCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCIwXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZVBhcmFtcygpIHtcbiAgICByZXR1cm4geyBhbGxvd2VkQ2xpZW50czogW10gfTtcbn1cbmV4cG9ydHMuUGFyYW1zID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UuYWxsb3dlZENsaWVudHMpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQYXJhbXMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFsbG93ZWRDbGllbnRzLnB1c2gocmVhZGVyLnN0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxuICAgIGZyb21KU09OKG9iamVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWxsb3dlZENsaWVudHM6IEFycmF5LmlzQXJyYXkob2JqZWN0ID09PSBudWxsIHx8IG9iamVjdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqZWN0LmFsbG93ZWRDbGllbnRzKVxuICAgICAgICAgICAgICAgID8gb2JqZWN0LmFsbG93ZWRDbGllbnRzLm1hcCgoZSkgPT4gU3RyaW5nKGUpKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYWxsb3dlZENsaWVudHMpIHtcbiAgICAgICAgICAgIG9iai5hbGxvd2VkQ2xpZW50cyA9IG1lc3NhZ2UuYWxsb3dlZENsaWVudHMubWFwKChlKSA9PiBlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9iai5hbGxvd2VkQ2xpZW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBhcmFtcygpO1xuICAgICAgICBtZXNzYWdlLmFsbG93ZWRDbGllbnRzID0gKChfYSA9IG9iamVjdC5hbGxvd2VkQ2xpZW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1hcCgoZSkgPT4gZSkpIHx8IFtdO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGxvbmdUb1N0cmluZyhsb25nKSB7XG4gICAgcmV0dXJuIGxvbmcudG9TdHJpbmcoKTtcbn1cbmlmIChtaW5pbWFsXzEuZGVmYXVsdC51dGlsLkxvbmcgIT09IGxvbmdfMS5kZWZhdWx0KSB7XG4gICAgbWluaW1hbF8xLmRlZmF1bHQudXRpbC5Mb25nID0gbG9uZ18xLmRlZmF1bHQ7XG4gICAgbWluaW1hbF8xLmRlZmF1bHQuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/ibc/core/client/v1/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/crypto/keys.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/tendermint/crypto/keys.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PublicKey = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"tendermint.crypto\";\nfunction createBasePublicKey() {\n    return { ed25519: undefined, secp256k1: undefined };\n}\nexports.PublicKey = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.ed25519 !== undefined) {\n            writer.uint32(10).bytes(message.ed25519);\n        }\n        if (message.secp256k1 !== undefined) {\n            writer.uint32(18).bytes(message.secp256k1);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePublicKey();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ed25519 = reader.bytes();\n                    break;\n                case 2:\n                    message.secp256k1 = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            ed25519: isSet(object.ed25519)\n                ? bytesFromBase64(object.ed25519)\n                : undefined,\n            secp256k1: isSet(object.secp256k1)\n                ? bytesFromBase64(object.secp256k1)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.ed25519 !== undefined &&\n            (obj.ed25519 =\n                message.ed25519 !== undefined\n                    ? base64FromBytes(message.ed25519)\n                    : undefined);\n        message.secp256k1 !== undefined &&\n            (obj.secp256k1 =\n                message.secp256k1 !== undefined\n                    ? base64FromBytes(message.secp256k1)\n                    : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBasePublicKey();\n        message.ed25519 = (_a = object.ed25519) !== null && _a !== void 0 ? _a : undefined;\n        message.secp256k1 = (_b = object.secp256k1) !== null && _b !== void 0 ? _b : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=keys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm90by10eXBlcy90ZW5kZXJtaW50L2NyeXB0by9rZXlzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsdUJBQXVCO0FBQzNDO0FBQ0EsK0JBQStCLG1CQUFPLENBQUMsbURBQU07QUFDN0Msa0NBQWtDLG1CQUFPLENBQUMsc0VBQW9CO0FBQzlELHVCQUF1QjtBQUN2QjtBQUNBLGFBQWE7QUFDYjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3RvLXR5cGVzXFx0ZW5kZXJtaW50XFxjcnlwdG9cXGtleXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlB1YmxpY0tleSA9IGV4cG9ydHMucHJvdG9idWZQYWNrYWdlID0gdm9pZCAwO1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IGxvbmdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibG9uZ1wiKSk7XG5jb25zdCBtaW5pbWFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInByb3RvYnVmanMvbWluaW1hbFwiKSk7XG5leHBvcnRzLnByb3RvYnVmUGFja2FnZSA9IFwidGVuZGVybWludC5jcnlwdG9cIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQdWJsaWNLZXkoKSB7XG4gICAgcmV0dXJuIHsgZWQyNTUxOTogdW5kZWZpbmVkLCBzZWNwMjU2azE6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0cy5QdWJsaWNLZXkgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5lZDI1NTE5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2UuZWQyNTUxOSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2VjcDI1NmsxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2Uuc2VjcDI1NmsxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0LCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBtaW5pbWFsXzEuZGVmYXVsdC5SZWFkZXIoaW5wdXQpO1xuICAgICAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQdWJsaWNLZXkoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVkMjU1MTkgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlY3AyNTZrMSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlZDI1NTE5OiBpc1NldChvYmplY3QuZWQyNTUxOSlcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3QuZWQyNTUxOSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNlY3AyNTZrMTogaXNTZXQob2JqZWN0LnNlY3AyNTZrMSlcbiAgICAgICAgICAgICAgICA/IGJ5dGVzRnJvbUJhc2U2NChvYmplY3Quc2VjcDI1NmsxKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UuZWQyNTUxOSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLmVkMjU1MTkgPVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZWQyNTUxOSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gYmFzZTY0RnJvbUJ5dGVzKG1lc3NhZ2UuZWQyNTUxOSlcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICBtZXNzYWdlLnNlY3AyNTZrMSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAob2JqLnNlY3AyNTZrMSA9XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5zZWNwMjU2azEgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/IGJhc2U2NEZyb21CeXRlcyhtZXNzYWdlLnNlY3AyNTZrMSlcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZnJvbVBhcnRpYWwob2JqZWN0KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUHVibGljS2V5KCk7XG4gICAgICAgIG1lc3NhZ2UuZWQyNTUxOSA9IChfYSA9IG9iamVjdC5lZDI1NTE5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQ7XG4gICAgICAgIG1lc3NhZ2Uuc2VjcDI1NmsxID0gKF9iID0gb2JqZWN0LnNlY3AyNTZrMSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9LFxufTtcbnZhciBnbG9iYWxUaGlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgdGhyb3cgXCJVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3RcIjtcbn0pKCk7XG5jb25zdCBhdG9iID0gZ2xvYmFsVGhpcy5hdG9iIHx8XG4gICAgKChiNjQpID0+IGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYjY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImJpbmFyeVwiKSk7XG5mdW5jdGlvbiBieXRlc0Zyb21CYXNlNjQoYjY0KSB7XG4gICAgY29uc3QgYmluID0gYXRvYihiNjQpO1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJpbi5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFycltpXSA9IGJpbi5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuY29uc3QgYnRvYSA9IGdsb2JhbFRoaXMuYnRvYSB8fFxuICAgICgoYmluKSA9PiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGJpbiwgXCJiaW5hcnlcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpO1xuZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGNvbnN0IGJpbiA9IFtdO1xuICAgIGZvciAoY29uc3QgYnl0ZSBvZiBhcnIpIHtcbiAgICAgICAgYmluLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSk7XG4gICAgfVxuICAgIHJldHVybiBidG9hKGJpbi5qb2luKFwiXCIpKTtcbn1cbmlmIChtaW5pbWFsXzEuZGVmYXVsdC51dGlsLkxvbmcgIT09IGxvbmdfMS5kZWZhdWx0KSB7XG4gICAgbWluaW1hbF8xLmRlZmF1bHQudXRpbC5Mb25nID0gbG9uZ18xLmRlZmF1bHQ7XG4gICAgbWluaW1hbF8xLmRlZmF1bHQuY29uZmlndXJlKCk7XG59XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/crypto/keys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/crypto/proof.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/tendermint/crypto/proof.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProofOps = exports.ProofOp = exports.DominoOp = exports.ValueOp = exports.Proof = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"tendermint.crypto\";\nfunction createBaseProof() {\n    return { total: \"0\", index: \"0\", leafHash: new Uint8Array(), aunts: [] };\n}\nexports.Proof = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.total !== \"0\") {\n            writer.uint32(8).int64(message.total);\n        }\n        if (message.index !== \"0\") {\n            writer.uint32(16).int64(message.index);\n        }\n        if (message.leafHash.length !== 0) {\n            writer.uint32(26).bytes(message.leafHash);\n        }\n        for (const v of message.aunts) {\n            writer.uint32(34).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseProof();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.total = longToString(reader.int64());\n                    break;\n                case 2:\n                    message.index = longToString(reader.int64());\n                    break;\n                case 3:\n                    message.leafHash = reader.bytes();\n                    break;\n                case 4:\n                    message.aunts.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            total: isSet(object.total) ? String(object.total) : \"0\",\n            index: isSet(object.index) ? String(object.index) : \"0\",\n            leafHash: isSet(object.leafHash)\n                ? bytesFromBase64(object.leafHash)\n                : new Uint8Array(),\n            aunts: Array.isArray(object === null || object === void 0 ? void 0 : object.aunts)\n                ? object.aunts.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.total !== undefined && (obj.total = message.total);\n        message.index !== undefined && (obj.index = message.index);\n        message.leafHash !== undefined &&\n            (obj.leafHash = base64FromBytes(message.leafHash !== undefined ? message.leafHash : new Uint8Array()));\n        if (message.aunts) {\n            obj.aunts = message.aunts.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.aunts = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseProof();\n        message.total = (_a = object.total) !== null && _a !== void 0 ? _a : \"0\";\n        message.index = (_b = object.index) !== null && _b !== void 0 ? _b : \"0\";\n        message.leafHash = (_c = object.leafHash) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.aunts = ((_d = object.aunts) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseValueOp() {\n    return { key: new Uint8Array(), proof: undefined };\n}\nexports.ValueOp = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.proof !== undefined) {\n            exports.Proof.encode(message.proof, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValueOp();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.proof = exports.Proof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n            proof: isSet(object.proof) ? exports.Proof.fromJSON(object.proof) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.proof !== undefined &&\n            (obj.proof = message.proof ? exports.Proof.toJSON(message.proof) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseValueOp();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.proof =\n            object.proof !== undefined && object.proof !== null\n                ? exports.Proof.fromPartial(object.proof)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseDominoOp() {\n    return { key: \"\", input: \"\", output: \"\" };\n}\nexports.DominoOp = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.input !== \"\") {\n            writer.uint32(18).string(message.input);\n        }\n        if (message.output !== \"\") {\n            writer.uint32(26).string(message.output);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDominoOp();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.input = reader.string();\n                    break;\n                case 3:\n                    message.output = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            input: isSet(object.input) ? String(object.input) : \"\",\n            output: isSet(object.output) ? String(object.output) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.input !== undefined && (obj.input = message.input);\n        message.output !== undefined && (obj.output = message.output);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseDominoOp();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.input = (_b = object.input) !== null && _b !== void 0 ? _b : \"\";\n        message.output = (_c = object.output) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    },\n};\nfunction createBaseProofOp() {\n    return { type: \"\", key: new Uint8Array(), data: new Uint8Array() };\n}\nexports.ProofOp = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.type !== \"\") {\n            writer.uint32(10).string(message.type);\n        }\n        if (message.key.length !== 0) {\n            writer.uint32(18).bytes(message.key);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(26).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseProofOp();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.string();\n                    break;\n                case 2:\n                    message.key = reader.bytes();\n                    break;\n                case 3:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            type: isSet(object.type) ? String(object.type) : \"\",\n            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(),\n            data: isSet(object.data)\n                ? bytesFromBase64(object.data)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined && (obj.type = message.type);\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseProofOp();\n        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : \"\";\n        message.key = (_b = object.key) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.data = (_c = object.data) !== null && _c !== void 0 ? _c : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseProofOps() {\n    return { ops: [] };\n}\nexports.ProofOps = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.ops) {\n            exports.ProofOp.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseProofOps();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.ops.push(exports.ProofOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            ops: Array.isArray(object === null || object === void 0 ? void 0 : object.ops)\n                ? object.ops.map((e) => exports.ProofOp.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.ops) {\n            obj.ops = message.ops.map((e) => (e ? exports.ProofOp.toJSON(e) : undefined));\n        }\n        else {\n            obj.ops = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseProofOps();\n        message.ops = ((_a = object.ops) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ProofOp.fromPartial(e))) || [];\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=proof.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/crypto/proof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/types/types.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/tendermint/types/types.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TxProof = exports.BlockMeta = exports.LightBlock = exports.SignedHeader = exports.Proposal = exports.CommitSig = exports.Commit = exports.Vote = exports.Data = exports.Header = exports.BlockID = exports.Part = exports.PartSetHeader = exports.signedMsgTypeToJSON = exports.signedMsgTypeFromJSON = exports.SignedMsgType = exports.blockIDFlagToJSON = exports.blockIDFlagFromJSON = exports.BlockIDFlag = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst timestamp_1 = __webpack_require__(/*! ../../google/protobuf/timestamp */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/google/protobuf/timestamp.js\");\nconst proof_1 = __webpack_require__(/*! ../../tendermint/crypto/proof */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/crypto/proof.js\");\nconst types_1 = __webpack_require__(/*! ../../tendermint/version/types */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/version/types.js\");\nconst validator_1 = __webpack_require__(/*! ../../tendermint/types/validator */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/types/validator.js\");\nexports.protobufPackage = \"tendermint.types\";\n/** BlockIdFlag indicates which BlcokID the signature is for */\nvar BlockIDFlag;\n(function (BlockIDFlag) {\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_UNKNOWN\"] = 0] = \"BLOCK_ID_FLAG_UNKNOWN\";\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_ABSENT\"] = 1] = \"BLOCK_ID_FLAG_ABSENT\";\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_COMMIT\"] = 2] = \"BLOCK_ID_FLAG_COMMIT\";\n    BlockIDFlag[BlockIDFlag[\"BLOCK_ID_FLAG_NIL\"] = 3] = \"BLOCK_ID_FLAG_NIL\";\n    BlockIDFlag[BlockIDFlag[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(BlockIDFlag = exports.BlockIDFlag || (exports.BlockIDFlag = {}));\nfunction blockIDFlagFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"BLOCK_ID_FLAG_UNKNOWN\":\n            return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;\n        case 1:\n        case \"BLOCK_ID_FLAG_ABSENT\":\n            return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;\n        case 2:\n        case \"BLOCK_ID_FLAG_COMMIT\":\n            return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;\n        case 3:\n        case \"BLOCK_ID_FLAG_NIL\":\n            return BlockIDFlag.BLOCK_ID_FLAG_NIL;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return BlockIDFlag.UNRECOGNIZED;\n    }\n}\nexports.blockIDFlagFromJSON = blockIDFlagFromJSON;\nfunction blockIDFlagToJSON(object) {\n    switch (object) {\n        case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:\n            return \"BLOCK_ID_FLAG_UNKNOWN\";\n        case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:\n            return \"BLOCK_ID_FLAG_ABSENT\";\n        case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:\n            return \"BLOCK_ID_FLAG_COMMIT\";\n        case BlockIDFlag.BLOCK_ID_FLAG_NIL:\n            return \"BLOCK_ID_FLAG_NIL\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.blockIDFlagToJSON = blockIDFlagToJSON;\n/** SignedMsgType is a type of signed message in the consensus. */\nvar SignedMsgType;\n(function (SignedMsgType) {\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_UNKNOWN\"] = 0] = \"SIGNED_MSG_TYPE_UNKNOWN\";\n    /** SIGNED_MSG_TYPE_PREVOTE - Votes */\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PREVOTE\"] = 1] = \"SIGNED_MSG_TYPE_PREVOTE\";\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PRECOMMIT\"] = 2] = \"SIGNED_MSG_TYPE_PRECOMMIT\";\n    /** SIGNED_MSG_TYPE_PROPOSAL - Proposals */\n    SignedMsgType[SignedMsgType[\"SIGNED_MSG_TYPE_PROPOSAL\"] = 32] = \"SIGNED_MSG_TYPE_PROPOSAL\";\n    SignedMsgType[SignedMsgType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SignedMsgType = exports.SignedMsgType || (exports.SignedMsgType = {}));\nfunction signedMsgTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"SIGNED_MSG_TYPE_UNKNOWN\":\n            return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;\n        case 1:\n        case \"SIGNED_MSG_TYPE_PREVOTE\":\n            return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;\n        case 2:\n        case \"SIGNED_MSG_TYPE_PRECOMMIT\":\n            return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;\n        case 32:\n        case \"SIGNED_MSG_TYPE_PROPOSAL\":\n            return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SignedMsgType.UNRECOGNIZED;\n    }\n}\nexports.signedMsgTypeFromJSON = signedMsgTypeFromJSON;\nfunction signedMsgTypeToJSON(object) {\n    switch (object) {\n        case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:\n            return \"SIGNED_MSG_TYPE_UNKNOWN\";\n        case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:\n            return \"SIGNED_MSG_TYPE_PREVOTE\";\n        case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:\n            return \"SIGNED_MSG_TYPE_PRECOMMIT\";\n        case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:\n            return \"SIGNED_MSG_TYPE_PROPOSAL\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.signedMsgTypeToJSON = signedMsgTypeToJSON;\nfunction createBasePartSetHeader() {\n    return { total: 0, hash: new Uint8Array() };\n}\nexports.PartSetHeader = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.total !== 0) {\n            writer.uint32(8).uint32(message.total);\n        }\n        if (message.hash.length !== 0) {\n            writer.uint32(18).bytes(message.hash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePartSetHeader();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.total = reader.uint32();\n                    break;\n                case 2:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            total: isSet(object.total) ? Number(object.total) : 0,\n            hash: isSet(object.hash)\n                ? bytesFromBase64(object.hash)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.total !== undefined && (obj.total = Math.round(message.total));\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBasePartSetHeader();\n        message.total = (_a = object.total) !== null && _a !== void 0 ? _a : 0;\n        message.hash = (_b = object.hash) !== null && _b !== void 0 ? _b : new Uint8Array();\n        return message;\n    },\n};\nfunction createBasePart() {\n    return { index: 0, bytes: new Uint8Array(), proof: undefined };\n}\nexports.Part = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.index !== 0) {\n            writer.uint32(8).uint32(message.index);\n        }\n        if (message.bytes.length !== 0) {\n            writer.uint32(18).bytes(message.bytes);\n        }\n        if (message.proof !== undefined) {\n            proof_1.Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePart();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.index = reader.uint32();\n                    break;\n                case 2:\n                    message.bytes = reader.bytes();\n                    break;\n                case 3:\n                    message.proof = proof_1.Proof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            index: isSet(object.index) ? Number(object.index) : 0,\n            bytes: isSet(object.bytes)\n                ? bytesFromBase64(object.bytes)\n                : new Uint8Array(),\n            proof: isSet(object.proof) ? proof_1.Proof.fromJSON(object.proof) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.index !== undefined && (obj.index = Math.round(message.index));\n        message.bytes !== undefined &&\n            (obj.bytes = base64FromBytes(message.bytes !== undefined ? message.bytes : new Uint8Array()));\n        message.proof !== undefined &&\n            (obj.proof = message.proof ? proof_1.Proof.toJSON(message.proof) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBasePart();\n        message.index = (_a = object.index) !== null && _a !== void 0 ? _a : 0;\n        message.bytes = (_b = object.bytes) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proof =\n            object.proof !== undefined && object.proof !== null\n                ? proof_1.Proof.fromPartial(object.proof)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseBlockID() {\n    return { hash: new Uint8Array(), partSetHeader: undefined };\n}\nexports.BlockID = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.hash.length !== 0) {\n            writer.uint32(10).bytes(message.hash);\n        }\n        if (message.partSetHeader !== undefined) {\n            exports.PartSetHeader.encode(message.partSetHeader, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseBlockID();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.bytes();\n                    break;\n                case 2:\n                    message.partSetHeader = exports.PartSetHeader.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            hash: isSet(object.hash)\n                ? bytesFromBase64(object.hash)\n                : new Uint8Array(),\n            partSetHeader: isSet(object.partSetHeader)\n                ? exports.PartSetHeader.fromJSON(object.partSetHeader)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        message.partSetHeader !== undefined &&\n            (obj.partSetHeader = message.partSetHeader\n                ? exports.PartSetHeader.toJSON(message.partSetHeader)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseBlockID();\n        message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.partSetHeader =\n            object.partSetHeader !== undefined && object.partSetHeader !== null\n                ? exports.PartSetHeader.fromPartial(object.partSetHeader)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseHeader() {\n    return {\n        version: undefined,\n        chainId: \"\",\n        height: \"0\",\n        time: undefined,\n        lastBlockId: undefined,\n        lastCommitHash: new Uint8Array(),\n        dataHash: new Uint8Array(),\n        validatorsHash: new Uint8Array(),\n        nextValidatorsHash: new Uint8Array(),\n        consensusHash: new Uint8Array(),\n        appHash: new Uint8Array(),\n        lastResultsHash: new Uint8Array(),\n        evidenceHash: new Uint8Array(),\n        proposerAddress: new Uint8Array(),\n    };\n}\nexports.Header = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.version !== undefined) {\n            types_1.Consensus.encode(message.version, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.chainId !== \"\") {\n            writer.uint32(18).string(message.chainId);\n        }\n        if (message.height !== \"0\") {\n            writer.uint32(24).int64(message.height);\n        }\n        if (message.time !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).ldelim();\n        }\n        if (message.lastBlockId !== undefined) {\n            exports.BlockID.encode(message.lastBlockId, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.lastCommitHash.length !== 0) {\n            writer.uint32(50).bytes(message.lastCommitHash);\n        }\n        if (message.dataHash.length !== 0) {\n            writer.uint32(58).bytes(message.dataHash);\n        }\n        if (message.validatorsHash.length !== 0) {\n            writer.uint32(66).bytes(message.validatorsHash);\n        }\n        if (message.nextValidatorsHash.length !== 0) {\n            writer.uint32(74).bytes(message.nextValidatorsHash);\n        }\n        if (message.consensusHash.length !== 0) {\n            writer.uint32(82).bytes(message.consensusHash);\n        }\n        if (message.appHash.length !== 0) {\n            writer.uint32(90).bytes(message.appHash);\n        }\n        if (message.lastResultsHash.length !== 0) {\n            writer.uint32(98).bytes(message.lastResultsHash);\n        }\n        if (message.evidenceHash.length !== 0) {\n            writer.uint32(106).bytes(message.evidenceHash);\n        }\n        if (message.proposerAddress.length !== 0) {\n            writer.uint32(114).bytes(message.proposerAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseHeader();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.version = types_1.Consensus.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.chainId = reader.string();\n                    break;\n                case 3:\n                    message.height = longToString(reader.int64());\n                    break;\n                case 4:\n                    message.time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.lastBlockId = exports.BlockID.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.lastCommitHash = reader.bytes();\n                    break;\n                case 7:\n                    message.dataHash = reader.bytes();\n                    break;\n                case 8:\n                    message.validatorsHash = reader.bytes();\n                    break;\n                case 9:\n                    message.nextValidatorsHash = reader.bytes();\n                    break;\n                case 10:\n                    message.consensusHash = reader.bytes();\n                    break;\n                case 11:\n                    message.appHash = reader.bytes();\n                    break;\n                case 12:\n                    message.lastResultsHash = reader.bytes();\n                    break;\n                case 13:\n                    message.evidenceHash = reader.bytes();\n                    break;\n                case 14:\n                    message.proposerAddress = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            version: isSet(object.version)\n                ? types_1.Consensus.fromJSON(object.version)\n                : undefined,\n            chainId: isSet(object.chainId) ? String(object.chainId) : \"\",\n            height: isSet(object.height) ? String(object.height) : \"0\",\n            time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,\n            lastBlockId: isSet(object.lastBlockId)\n                ? exports.BlockID.fromJSON(object.lastBlockId)\n                : undefined,\n            lastCommitHash: isSet(object.lastCommitHash)\n                ? bytesFromBase64(object.lastCommitHash)\n                : new Uint8Array(),\n            dataHash: isSet(object.dataHash)\n                ? bytesFromBase64(object.dataHash)\n                : new Uint8Array(),\n            validatorsHash: isSet(object.validatorsHash)\n                ? bytesFromBase64(object.validatorsHash)\n                : new Uint8Array(),\n            nextValidatorsHash: isSet(object.nextValidatorsHash)\n                ? bytesFromBase64(object.nextValidatorsHash)\n                : new Uint8Array(),\n            consensusHash: isSet(object.consensusHash)\n                ? bytesFromBase64(object.consensusHash)\n                : new Uint8Array(),\n            appHash: isSet(object.appHash)\n                ? bytesFromBase64(object.appHash)\n                : new Uint8Array(),\n            lastResultsHash: isSet(object.lastResultsHash)\n                ? bytesFromBase64(object.lastResultsHash)\n                : new Uint8Array(),\n            evidenceHash: isSet(object.evidenceHash)\n                ? bytesFromBase64(object.evidenceHash)\n                : new Uint8Array(),\n            proposerAddress: isSet(object.proposerAddress)\n                ? bytesFromBase64(object.proposerAddress)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.version !== undefined &&\n            (obj.version = message.version\n                ? types_1.Consensus.toJSON(message.version)\n                : undefined);\n        message.chainId !== undefined && (obj.chainId = message.chainId);\n        message.height !== undefined && (obj.height = message.height);\n        message.time !== undefined && (obj.time = message.time.toISOString());\n        message.lastBlockId !== undefined &&\n            (obj.lastBlockId = message.lastBlockId\n                ? exports.BlockID.toJSON(message.lastBlockId)\n                : undefined);\n        message.lastCommitHash !== undefined &&\n            (obj.lastCommitHash = base64FromBytes(message.lastCommitHash !== undefined\n                ? message.lastCommitHash\n                : new Uint8Array()));\n        message.dataHash !== undefined &&\n            (obj.dataHash = base64FromBytes(message.dataHash !== undefined ? message.dataHash : new Uint8Array()));\n        message.validatorsHash !== undefined &&\n            (obj.validatorsHash = base64FromBytes(message.validatorsHash !== undefined\n                ? message.validatorsHash\n                : new Uint8Array()));\n        message.nextValidatorsHash !== undefined &&\n            (obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash !== undefined\n                ? message.nextValidatorsHash\n                : new Uint8Array()));\n        message.consensusHash !== undefined &&\n            (obj.consensusHash = base64FromBytes(message.consensusHash !== undefined\n                ? message.consensusHash\n                : new Uint8Array()));\n        message.appHash !== undefined &&\n            (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n        message.lastResultsHash !== undefined &&\n            (obj.lastResultsHash = base64FromBytes(message.lastResultsHash !== undefined\n                ? message.lastResultsHash\n                : new Uint8Array()));\n        message.evidenceHash !== undefined &&\n            (obj.evidenceHash = base64FromBytes(message.evidenceHash !== undefined\n                ? message.evidenceHash\n                : new Uint8Array()));\n        message.proposerAddress !== undefined &&\n            (obj.proposerAddress = base64FromBytes(message.proposerAddress !== undefined\n                ? message.proposerAddress\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const message = createBaseHeader();\n        message.version =\n            object.version !== undefined && object.version !== null\n                ? types_1.Consensus.fromPartial(object.version)\n                : undefined;\n        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : \"\";\n        message.height = (_b = object.height) !== null && _b !== void 0 ? _b : \"0\";\n        message.time = (_c = object.time) !== null && _c !== void 0 ? _c : undefined;\n        message.lastBlockId =\n            object.lastBlockId !== undefined && object.lastBlockId !== null\n                ? exports.BlockID.fromPartial(object.lastBlockId)\n                : undefined;\n        message.lastCommitHash = (_d = object.lastCommitHash) !== null && _d !== void 0 ? _d : new Uint8Array();\n        message.dataHash = (_e = object.dataHash) !== null && _e !== void 0 ? _e : new Uint8Array();\n        message.validatorsHash = (_f = object.validatorsHash) !== null && _f !== void 0 ? _f : new Uint8Array();\n        message.nextValidatorsHash = (_g = object.nextValidatorsHash) !== null && _g !== void 0 ? _g : new Uint8Array();\n        message.consensusHash = (_h = object.consensusHash) !== null && _h !== void 0 ? _h : new Uint8Array();\n        message.appHash = (_j = object.appHash) !== null && _j !== void 0 ? _j : new Uint8Array();\n        message.lastResultsHash = (_k = object.lastResultsHash) !== null && _k !== void 0 ? _k : new Uint8Array();\n        message.evidenceHash = (_l = object.evidenceHash) !== null && _l !== void 0 ? _l : new Uint8Array();\n        message.proposerAddress = (_m = object.proposerAddress) !== null && _m !== void 0 ? _m : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseData() {\n    return { txs: [] };\n}\nexports.Data = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.txs) {\n            writer.uint32(10).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseData();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.txs.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            txs: Array.isArray(object === null || object === void 0 ? void 0 : object.txs)\n                ? object.txs.map((e) => bytesFromBase64(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.txs) {\n            obj.txs = message.txs.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.txs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseData();\n        message.txs = ((_a = object.txs) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];\n        return message;\n    },\n};\nfunction createBaseVote() {\n    return {\n        type: 0,\n        height: \"0\",\n        round: 0,\n        blockId: undefined,\n        timestamp: undefined,\n        validatorAddress: new Uint8Array(),\n        validatorIndex: 0,\n        signature: new Uint8Array(),\n    };\n}\nexports.Vote = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.type !== 0) {\n            writer.uint32(8).int32(message.type);\n        }\n        if (message.height !== \"0\") {\n            writer.uint32(16).int64(message.height);\n        }\n        if (message.round !== 0) {\n            writer.uint32(24).int32(message.round);\n        }\n        if (message.blockId !== undefined) {\n            exports.BlockID.encode(message.blockId, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.timestamp !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(42).fork()).ldelim();\n        }\n        if (message.validatorAddress.length !== 0) {\n            writer.uint32(50).bytes(message.validatorAddress);\n        }\n        if (message.validatorIndex !== 0) {\n            writer.uint32(56).int32(message.validatorIndex);\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(66).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVote();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.height = longToString(reader.int64());\n                    break;\n                case 3:\n                    message.round = reader.int32();\n                    break;\n                case 4:\n                    message.blockId = exports.BlockID.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.validatorAddress = reader.bytes();\n                    break;\n                case 7:\n                    message.validatorIndex = reader.int32();\n                    break;\n                case 8:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            type: isSet(object.type) ? signedMsgTypeFromJSON(object.type) : 0,\n            height: isSet(object.height) ? String(object.height) : \"0\",\n            round: isSet(object.round) ? Number(object.round) : 0,\n            blockId: isSet(object.blockId)\n                ? exports.BlockID.fromJSON(object.blockId)\n                : undefined,\n            timestamp: isSet(object.timestamp)\n                ? fromJsonTimestamp(object.timestamp)\n                : undefined,\n            validatorAddress: isSet(object.validatorAddress)\n                ? bytesFromBase64(object.validatorAddress)\n                : new Uint8Array(),\n            validatorIndex: isSet(object.validatorIndex)\n                ? Number(object.validatorIndex)\n                : 0,\n            signature: isSet(object.signature)\n                ? bytesFromBase64(object.signature)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined &&\n            (obj.type = signedMsgTypeToJSON(message.type));\n        message.height !== undefined && (obj.height = message.height);\n        message.round !== undefined && (obj.round = Math.round(message.round));\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId\n                ? exports.BlockID.toJSON(message.blockId)\n                : undefined);\n        message.timestamp !== undefined &&\n            (obj.timestamp = message.timestamp.toISOString());\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined\n                ? message.validatorAddress\n                : new Uint8Array()));\n        message.validatorIndex !== undefined &&\n            (obj.validatorIndex = Math.round(message.validatorIndex));\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseVote();\n        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;\n        message.height = (_b = object.height) !== null && _b !== void 0 ? _b : \"0\";\n        message.round = (_c = object.round) !== null && _c !== void 0 ? _c : 0;\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null\n                ? exports.BlockID.fromPartial(object.blockId)\n                : undefined;\n        message.timestamp = (_d = object.timestamp) !== null && _d !== void 0 ? _d : undefined;\n        message.validatorAddress = (_e = object.validatorAddress) !== null && _e !== void 0 ? _e : new Uint8Array();\n        message.validatorIndex = (_f = object.validatorIndex) !== null && _f !== void 0 ? _f : 0;\n        message.signature = (_g = object.signature) !== null && _g !== void 0 ? _g : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseCommit() {\n    return { height: \"0\", round: 0, blockId: undefined, signatures: [] };\n}\nexports.Commit = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.height !== \"0\") {\n            writer.uint32(8).int64(message.height);\n        }\n        if (message.round !== 0) {\n            writer.uint32(16).int32(message.round);\n        }\n        if (message.blockId !== undefined) {\n            exports.BlockID.encode(message.blockId, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.signatures) {\n            exports.CommitSig.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCommit();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = longToString(reader.int64());\n                    break;\n                case 2:\n                    message.round = reader.int32();\n                    break;\n                case 3:\n                    message.blockId = exports.BlockID.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.signatures.push(exports.CommitSig.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            height: isSet(object.height) ? String(object.height) : \"0\",\n            round: isSet(object.round) ? Number(object.round) : 0,\n            blockId: isSet(object.blockId)\n                ? exports.BlockID.fromJSON(object.blockId)\n                : undefined,\n            signatures: Array.isArray(object === null || object === void 0 ? void 0 : object.signatures)\n                ? object.signatures.map((e) => exports.CommitSig.fromJSON(e))\n                : [],\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = message.height);\n        message.round !== undefined && (obj.round = Math.round(message.round));\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId\n                ? exports.BlockID.toJSON(message.blockId)\n                : undefined);\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => e ? exports.CommitSig.toJSON(e) : undefined);\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseCommit();\n        message.height = (_a = object.height) !== null && _a !== void 0 ? _a : \"0\";\n        message.round = (_b = object.round) !== null && _b !== void 0 ? _b : 0;\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null\n                ? exports.BlockID.fromPartial(object.blockId)\n                : undefined;\n        message.signatures =\n            ((_c = object.signatures) === null || _c === void 0 ? void 0 : _c.map((e) => exports.CommitSig.fromPartial(e))) || [];\n        return message;\n    },\n};\nfunction createBaseCommitSig() {\n    return {\n        blockIdFlag: 0,\n        validatorAddress: new Uint8Array(),\n        timestamp: undefined,\n        signature: new Uint8Array(),\n    };\n}\nexports.CommitSig = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.blockIdFlag !== 0) {\n            writer.uint32(8).int32(message.blockIdFlag);\n        }\n        if (message.validatorAddress.length !== 0) {\n            writer.uint32(18).bytes(message.validatorAddress);\n        }\n        if (message.timestamp !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).ldelim();\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(34).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCommitSig();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.blockIdFlag = reader.int32();\n                    break;\n                case 2:\n                    message.validatorAddress = reader.bytes();\n                    break;\n                case 3:\n                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            blockIdFlag: isSet(object.blockIdFlag)\n                ? blockIDFlagFromJSON(object.blockIdFlag)\n                : 0,\n            validatorAddress: isSet(object.validatorAddress)\n                ? bytesFromBase64(object.validatorAddress)\n                : new Uint8Array(),\n            timestamp: isSet(object.timestamp)\n                ? fromJsonTimestamp(object.timestamp)\n                : undefined,\n            signature: isSet(object.signature)\n                ? bytesFromBase64(object.signature)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.blockIdFlag !== undefined &&\n            (obj.blockIdFlag = blockIDFlagToJSON(message.blockIdFlag));\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = base64FromBytes(message.validatorAddress !== undefined\n                ? message.validatorAddress\n                : new Uint8Array()));\n        message.timestamp !== undefined &&\n            (obj.timestamp = message.timestamp.toISOString());\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d;\n        const message = createBaseCommitSig();\n        message.blockIdFlag = (_a = object.blockIdFlag) !== null && _a !== void 0 ? _a : 0;\n        message.validatorAddress = (_b = object.validatorAddress) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : undefined;\n        message.signature = (_d = object.signature) !== null && _d !== void 0 ? _d : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseProposal() {\n    return {\n        type: 0,\n        height: \"0\",\n        round: 0,\n        polRound: 0,\n        blockId: undefined,\n        timestamp: undefined,\n        signature: new Uint8Array(),\n    };\n}\nexports.Proposal = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.type !== 0) {\n            writer.uint32(8).int32(message.type);\n        }\n        if (message.height !== \"0\") {\n            writer.uint32(16).int64(message.height);\n        }\n        if (message.round !== 0) {\n            writer.uint32(24).int32(message.round);\n        }\n        if (message.polRound !== 0) {\n            writer.uint32(32).int32(message.polRound);\n        }\n        if (message.blockId !== undefined) {\n            exports.BlockID.encode(message.blockId, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.timestamp !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(50).fork()).ldelim();\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(58).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseProposal();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.height = longToString(reader.int64());\n                    break;\n                case 3:\n                    message.round = reader.int32();\n                    break;\n                case 4:\n                    message.polRound = reader.int32();\n                    break;\n                case 5:\n                    message.blockId = exports.BlockID.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            type: isSet(object.type) ? signedMsgTypeFromJSON(object.type) : 0,\n            height: isSet(object.height) ? String(object.height) : \"0\",\n            round: isSet(object.round) ? Number(object.round) : 0,\n            polRound: isSet(object.polRound) ? Number(object.polRound) : 0,\n            blockId: isSet(object.blockId)\n                ? exports.BlockID.fromJSON(object.blockId)\n                : undefined,\n            timestamp: isSet(object.timestamp)\n                ? fromJsonTimestamp(object.timestamp)\n                : undefined,\n            signature: isSet(object.signature)\n                ? bytesFromBase64(object.signature)\n                : new Uint8Array(),\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined &&\n            (obj.type = signedMsgTypeToJSON(message.type));\n        message.height !== undefined && (obj.height = message.height);\n        message.round !== undefined && (obj.round = Math.round(message.round));\n        message.polRound !== undefined &&\n            (obj.polRound = Math.round(message.polRound));\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId\n                ? exports.BlockID.toJSON(message.blockId)\n                : undefined);\n        message.timestamp !== undefined &&\n            (obj.timestamp = message.timestamp.toISOString());\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseProposal();\n        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;\n        message.height = (_b = object.height) !== null && _b !== void 0 ? _b : \"0\";\n        message.round = (_c = object.round) !== null && _c !== void 0 ? _c : 0;\n        message.polRound = (_d = object.polRound) !== null && _d !== void 0 ? _d : 0;\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null\n                ? exports.BlockID.fromPartial(object.blockId)\n                : undefined;\n        message.timestamp = (_e = object.timestamp) !== null && _e !== void 0 ? _e : undefined;\n        message.signature = (_f = object.signature) !== null && _f !== void 0 ? _f : new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSignedHeader() {\n    return { header: undefined, commit: undefined };\n}\nexports.SignedHeader = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.header !== undefined) {\n            exports.Header.encode(message.header, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.commit !== undefined) {\n            exports.Commit.encode(message.commit, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignedHeader();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.header = exports.Header.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.commit = exports.Commit.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            header: isSet(object.header) ? exports.Header.fromJSON(object.header) : undefined,\n            commit: isSet(object.commit) ? exports.Commit.fromJSON(object.commit) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.header !== undefined &&\n            (obj.header = message.header ? exports.Header.toJSON(message.header) : undefined);\n        message.commit !== undefined &&\n            (obj.commit = message.commit ? exports.Commit.toJSON(message.commit) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignedHeader();\n        message.header =\n            object.header !== undefined && object.header !== null\n                ? exports.Header.fromPartial(object.header)\n                : undefined;\n        message.commit =\n            object.commit !== undefined && object.commit !== null\n                ? exports.Commit.fromPartial(object.commit)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseLightBlock() {\n    return { signedHeader: undefined, validatorSet: undefined };\n}\nexports.LightBlock = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.signedHeader !== undefined) {\n            exports.SignedHeader.encode(message.signedHeader, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.validatorSet !== undefined) {\n            validator_1.ValidatorSet.encode(message.validatorSet, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseLightBlock();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signedHeader = exports.SignedHeader.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.validatorSet = validator_1.ValidatorSet.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            signedHeader: isSet(object.signedHeader)\n                ? exports.SignedHeader.fromJSON(object.signedHeader)\n                : undefined,\n            validatorSet: isSet(object.validatorSet)\n                ? validator_1.ValidatorSet.fromJSON(object.validatorSet)\n                : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.signedHeader !== undefined &&\n            (obj.signedHeader = message.signedHeader\n                ? exports.SignedHeader.toJSON(message.signedHeader)\n                : undefined);\n        message.validatorSet !== undefined &&\n            (obj.validatorSet = message.validatorSet\n                ? validator_1.ValidatorSet.toJSON(message.validatorSet)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseLightBlock();\n        message.signedHeader =\n            object.signedHeader !== undefined && object.signedHeader !== null\n                ? exports.SignedHeader.fromPartial(object.signedHeader)\n                : undefined;\n        message.validatorSet =\n            object.validatorSet !== undefined && object.validatorSet !== null\n                ? validator_1.ValidatorSet.fromPartial(object.validatorSet)\n                : undefined;\n        return message;\n    },\n};\nfunction createBaseBlockMeta() {\n    return { blockId: undefined, blockSize: \"0\", header: undefined, numTxs: \"0\" };\n}\nexports.BlockMeta = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.blockId !== undefined) {\n            exports.BlockID.encode(message.blockId, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.blockSize !== \"0\") {\n            writer.uint32(16).int64(message.blockSize);\n        }\n        if (message.header !== undefined) {\n            exports.Header.encode(message.header, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.numTxs !== \"0\") {\n            writer.uint32(32).int64(message.numTxs);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseBlockMeta();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.blockId = exports.BlockID.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.blockSize = longToString(reader.int64());\n                    break;\n                case 3:\n                    message.header = exports.Header.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.numTxs = longToString(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            blockId: isSet(object.blockId)\n                ? exports.BlockID.fromJSON(object.blockId)\n                : undefined,\n            blockSize: isSet(object.blockSize) ? String(object.blockSize) : \"0\",\n            header: isSet(object.header) ? exports.Header.fromJSON(object.header) : undefined,\n            numTxs: isSet(object.numTxs) ? String(object.numTxs) : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.blockId !== undefined &&\n            (obj.blockId = message.blockId\n                ? exports.BlockID.toJSON(message.blockId)\n                : undefined);\n        message.blockSize !== undefined && (obj.blockSize = message.blockSize);\n        message.header !== undefined &&\n            (obj.header = message.header ? exports.Header.toJSON(message.header) : undefined);\n        message.numTxs !== undefined && (obj.numTxs = message.numTxs);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseBlockMeta();\n        message.blockId =\n            object.blockId !== undefined && object.blockId !== null\n                ? exports.BlockID.fromPartial(object.blockId)\n                : undefined;\n        message.blockSize = (_a = object.blockSize) !== null && _a !== void 0 ? _a : \"0\";\n        message.header =\n            object.header !== undefined && object.header !== null\n                ? exports.Header.fromPartial(object.header)\n                : undefined;\n        message.numTxs = (_b = object.numTxs) !== null && _b !== void 0 ? _b : \"0\";\n        return message;\n    },\n};\nfunction createBaseTxProof() {\n    return {\n        rootHash: new Uint8Array(),\n        data: new Uint8Array(),\n        proof: undefined,\n    };\n}\nexports.TxProof = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.rootHash.length !== 0) {\n            writer.uint32(10).bytes(message.rootHash);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.proof !== undefined) {\n            proof_1.Proof.encode(message.proof, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTxProof();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.rootHash = reader.bytes();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.proof = proof_1.Proof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            rootHash: isSet(object.rootHash)\n                ? bytesFromBase64(object.rootHash)\n                : new Uint8Array(),\n            data: isSet(object.data)\n                ? bytesFromBase64(object.data)\n                : new Uint8Array(),\n            proof: isSet(object.proof) ? proof_1.Proof.fromJSON(object.proof) : undefined,\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.rootHash !== undefined &&\n            (obj.rootHash = base64FromBytes(message.rootHash !== undefined ? message.rootHash : new Uint8Array()));\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.proof !== undefined &&\n            (obj.proof = message.proof ? proof_1.Proof.toJSON(message.proof) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseTxProof();\n        message.rootHash = (_a = object.rootHash) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.proof =\n            object.proof !== undefined && object.proof !== null\n                ? proof_1.Proof.fromPartial(object.proof)\n                : undefined;\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction toTimestamp(date) {\n    const seconds = Math.trunc(date.getTime() / 1000).toString();\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = Number(t.seconds) * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/types/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/types/validator.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/tendermint/types/validator.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SimpleValidator = exports.Validator = exports.ValidatorSet = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst keys_1 = __webpack_require__(/*! ../../tendermint/crypto/keys */ \"(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/crypto/keys.js\");\nexports.protobufPackage = \"tendermint.types\";\nfunction createBaseValidatorSet() {\n    return { validators: [], proposer: undefined, totalVotingPower: \"0\" };\n}\nexports.ValidatorSet = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.validators) {\n            exports.Validator.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proposer !== undefined) {\n            exports.Validator.encode(message.proposer, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.totalVotingPower !== \"0\") {\n            writer.uint32(24).int64(message.totalVotingPower);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidatorSet();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validators.push(exports.Validator.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.proposer = exports.Validator.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.totalVotingPower = longToString(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            validators: Array.isArray(object === null || object === void 0 ? void 0 : object.validators)\n                ? object.validators.map((e) => exports.Validator.fromJSON(e))\n                : [],\n            proposer: isSet(object.proposer)\n                ? exports.Validator.fromJSON(object.proposer)\n                : undefined,\n            totalVotingPower: isSet(object.totalVotingPower)\n                ? String(object.totalVotingPower)\n                : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.validators) {\n            obj.validators = message.validators.map((e) => e ? exports.Validator.toJSON(e) : undefined);\n        }\n        else {\n            obj.validators = [];\n        }\n        message.proposer !== undefined &&\n            (obj.proposer = message.proposer\n                ? exports.Validator.toJSON(message.proposer)\n                : undefined);\n        message.totalVotingPower !== undefined &&\n            (obj.totalVotingPower = message.totalVotingPower);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseValidatorSet();\n        message.validators =\n            ((_a = object.validators) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Validator.fromPartial(e))) || [];\n        message.proposer =\n            object.proposer !== undefined && object.proposer !== null\n                ? exports.Validator.fromPartial(object.proposer)\n                : undefined;\n        message.totalVotingPower = (_b = object.totalVotingPower) !== null && _b !== void 0 ? _b : \"0\";\n        return message;\n    },\n};\nfunction createBaseValidator() {\n    return {\n        address: new Uint8Array(),\n        pubKey: undefined,\n        votingPower: \"0\",\n        proposerPriority: \"0\",\n    };\n}\nexports.Validator = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.address.length !== 0) {\n            writer.uint32(10).bytes(message.address);\n        }\n        if (message.pubKey !== undefined) {\n            keys_1.PublicKey.encode(message.pubKey, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.votingPower !== \"0\") {\n            writer.uint32(24).int64(message.votingPower);\n        }\n        if (message.proposerPriority !== \"0\") {\n            writer.uint32(32).int64(message.proposerPriority);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseValidator();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.bytes();\n                    break;\n                case 2:\n                    message.pubKey = keys_1.PublicKey.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.votingPower = longToString(reader.int64());\n                    break;\n                case 4:\n                    message.proposerPriority = longToString(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            address: isSet(object.address)\n                ? bytesFromBase64(object.address)\n                : new Uint8Array(),\n            pubKey: isSet(object.pubKey)\n                ? keys_1.PublicKey.fromJSON(object.pubKey)\n                : undefined,\n            votingPower: isSet(object.votingPower) ? String(object.votingPower) : \"0\",\n            proposerPriority: isSet(object.proposerPriority)\n                ? String(object.proposerPriority)\n                : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined &&\n            (obj.address = base64FromBytes(message.address !== undefined ? message.address : new Uint8Array()));\n        message.pubKey !== undefined &&\n            (obj.pubKey = message.pubKey\n                ? keys_1.PublicKey.toJSON(message.pubKey)\n                : undefined);\n        message.votingPower !== undefined &&\n            (obj.votingPower = message.votingPower);\n        message.proposerPriority !== undefined &&\n            (obj.proposerPriority = message.proposerPriority);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b, _c;\n        const message = createBaseValidator();\n        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : new Uint8Array();\n        message.pubKey =\n            object.pubKey !== undefined && object.pubKey !== null\n                ? keys_1.PublicKey.fromPartial(object.pubKey)\n                : undefined;\n        message.votingPower = (_b = object.votingPower) !== null && _b !== void 0 ? _b : \"0\";\n        message.proposerPriority = (_c = object.proposerPriority) !== null && _c !== void 0 ? _c : \"0\";\n        return message;\n    },\n};\nfunction createBaseSimpleValidator() {\n    return { pubKey: undefined, votingPower: \"0\" };\n}\nexports.SimpleValidator = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.pubKey !== undefined) {\n            keys_1.PublicKey.encode(message.pubKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.votingPower !== \"0\") {\n            writer.uint32(16).int64(message.votingPower);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSimpleValidator();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.pubKey = keys_1.PublicKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.votingPower = longToString(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            pubKey: isSet(object.pubKey)\n                ? keys_1.PublicKey.fromJSON(object.pubKey)\n                : undefined,\n            votingPower: isSet(object.votingPower) ? String(object.votingPower) : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.pubKey !== undefined &&\n            (obj.pubKey = message.pubKey\n                ? keys_1.PublicKey.toJSON(message.pubKey)\n                : undefined);\n        message.votingPower !== undefined &&\n            (obj.votingPower = message.votingPower);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a;\n        const message = createBaseSimpleValidator();\n        message.pubKey =\n            object.pubKey !== undefined && object.pubKey !== null\n                ? keys_1.PublicKey.fromPartial(object.pubKey)\n                : undefined;\n        message.votingPower = (_a = object.votingPower) !== null && _a !== void 0 ? _a : \"0\";\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (const byte of arr) {\n        bin.push(String.fromCharCode(byte));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=validator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/types/validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/version/types.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/proto-types/tendermint/version/types.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Consensus = exports.App = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"tendermint.version\";\nfunction createBaseApp() {\n    return { protocol: \"0\", software: \"\" };\n}\nexports.App = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.protocol !== \"0\") {\n            writer.uint32(8).uint64(message.protocol);\n        }\n        if (message.software !== \"\") {\n            writer.uint32(18).string(message.software);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseApp();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.protocol = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.software = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            protocol: isSet(object.protocol) ? String(object.protocol) : \"0\",\n            software: isSet(object.software) ? String(object.software) : \"\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.protocol !== undefined && (obj.protocol = message.protocol);\n        message.software !== undefined && (obj.software = message.software);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseApp();\n        message.protocol = (_a = object.protocol) !== null && _a !== void 0 ? _a : \"0\";\n        message.software = (_b = object.software) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    },\n};\nfunction createBaseConsensus() {\n    return { block: \"0\", app: \"0\" };\n}\nexports.Consensus = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.block !== \"0\") {\n            writer.uint32(8).uint64(message.block);\n        }\n        if (message.app !== \"0\") {\n            writer.uint32(16).uint64(message.app);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseConsensus();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.block = longToString(reader.uint64());\n                    break;\n                case 2:\n                    message.app = longToString(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        return {\n            block: isSet(object.block) ? String(object.block) : \"0\",\n            app: isSet(object.app) ? String(object.app) : \"0\",\n        };\n    },\n    toJSON(message) {\n        const obj = {};\n        message.block !== undefined && (obj.block = message.block);\n        message.app !== undefined && (obj.app = message.app);\n        return obj;\n    },\n    fromPartial(object) {\n        var _a, _b;\n        const message = createBaseConsensus();\n        message.block = (_a = object.block) !== null && _a !== void 0 ? _a : \"0\";\n        message.app = (_b = object.app) !== null && _b !== void 0 ? _b : \"0\";\n        return message;\n    },\n};\nfunction longToString(long) {\n    return long.toString();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm90by10eXBlcy90ZW5kZXJtaW50L3ZlcnNpb24vdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyxXQUFXLEdBQUcsdUJBQXVCO0FBQ3pEO0FBQ0EsK0JBQStCLG1CQUFPLENBQUMsbURBQU07QUFDN0Msa0NBQWtDLG1CQUFPLENBQUMsc0VBQW9CO0FBQzlELHVCQUF1QjtBQUN2QjtBQUNBLGFBQWE7QUFDYjtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm90by10eXBlc1xcdGVuZGVybWludFxcdmVyc2lvblxcdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbnNlbnN1cyA9IGV4cG9ydHMuQXBwID0gZXhwb3J0cy5wcm90b2J1ZlBhY2thZ2UgPSB2b2lkIDA7XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgbG9uZ18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb25nXCIpKTtcbmNvbnN0IG1pbmltYWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicHJvdG9idWZqcy9taW5pbWFsXCIpKTtcbmV4cG9ydHMucHJvdG9idWZQYWNrYWdlID0gXCJ0ZW5kZXJtaW50LnZlcnNpb25cIjtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VBcHAoKSB7XG4gICAgcmV0dXJuIHsgcHJvdG9jb2w6IFwiMFwiLCBzb2Z0d2FyZTogXCJcIiB9O1xufVxuZXhwb3J0cy5BcHAgPSB7XG4gICAgZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciA9IG1pbmltYWxfMS5kZWZhdWx0LldyaXRlci5jcmVhdGUoKSkge1xuICAgICAgICBpZiAobWVzc2FnZS5wcm90b2NvbCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoOCkudWludDY0KG1lc3NhZ2UucHJvdG9jb2wpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnNvZnR3YXJlICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5zb2Z0d2FyZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9LFxuICAgIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyID8gaW5wdXQgOiBuZXcgbWluaW1hbF8xLmRlZmF1bHQuUmVhZGVyKGlucHV0KTtcbiAgICAgICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQXBwKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wcm90b2NvbCA9IGxvbmdUb1N0cmluZyhyZWFkZXIudWludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc29mdHdhcmUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbiAgICBmcm9tSlNPTihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb3RvY29sOiBpc1NldChvYmplY3QucHJvdG9jb2wpID8gU3RyaW5nKG9iamVjdC5wcm90b2NvbCkgOiBcIjBcIixcbiAgICAgICAgICAgIHNvZnR3YXJlOiBpc1NldChvYmplY3Quc29mdHdhcmUpID8gU3RyaW5nKG9iamVjdC5zb2Z0d2FyZSkgOiBcIlwiLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgdG9KU09OKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIG1lc3NhZ2UucHJvdG9jb2wgIT09IHVuZGVmaW5lZCAmJiAob2JqLnByb3RvY29sID0gbWVzc2FnZS5wcm90b2NvbCk7XG4gICAgICAgIG1lc3NhZ2Uuc29mdHdhcmUgIT09IHVuZGVmaW5lZCAmJiAob2JqLnNvZnR3YXJlID0gbWVzc2FnZS5zb2Z0d2FyZSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBmcm9tUGFydGlhbChvYmplY3QpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VBcHAoKTtcbiAgICAgICAgbWVzc2FnZS5wcm90b2NvbCA9IChfYSA9IG9iamVjdC5wcm90b2NvbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCIwXCI7XG4gICAgICAgIG1lc3NhZ2Uuc29mdHdhcmUgPSAoX2IgPSBvYmplY3Quc29mdHdhcmUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFwiXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNvbnNlbnN1cygpIHtcbiAgICByZXR1cm4geyBibG9jazogXCIwXCIsIGFwcDogXCIwXCIgfTtcbn1cbmV4cG9ydHMuQ29uc2Vuc3VzID0ge1xuICAgIGVuY29kZShtZXNzYWdlLCB3cml0ZXIgPSBtaW5pbWFsXzEuZGVmYXVsdC5Xcml0ZXIuY3JlYXRlKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuYmxvY2sgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDgpLnVpbnQ2NChtZXNzYWdlLmJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5hcHAgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKDE2KS51aW50NjQobWVzc2FnZS5hcHApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQsIGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlciA/IGlucHV0IDogbmV3IG1pbmltYWxfMS5kZWZhdWx0LlJlYWRlcihpbnB1dCk7XG4gICAgICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbnNlbnN1cygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYmxvY2sgPSBsb25nVG9TdHJpbmcocmVhZGVyLnVpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmFwcCA9IGxvbmdUb1N0cmluZyhyZWFkZXIudWludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgZnJvbUpTT04ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBibG9jazogaXNTZXQob2JqZWN0LmJsb2NrKSA/IFN0cmluZyhvYmplY3QuYmxvY2spIDogXCIwXCIsXG4gICAgICAgICAgICBhcHA6IGlzU2V0KG9iamVjdC5hcHApID8gU3RyaW5nKG9iamVjdC5hcHApIDogXCIwXCIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICB0b0pTT04obWVzc2FnZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgbWVzc2FnZS5ibG9jayAhPT0gdW5kZWZpbmVkICYmIChvYmouYmxvY2sgPSBtZXNzYWdlLmJsb2NrKTtcbiAgICAgICAgbWVzc2FnZS5hcHAgIT09IHVuZGVmaW5lZCAmJiAob2JqLmFwcCA9IG1lc3NhZ2UuYXBwKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIGZyb21QYXJ0aWFsKG9iamVjdCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbnNlbnN1cygpO1xuICAgICAgICBtZXNzYWdlLmJsb2NrID0gKF9hID0gb2JqZWN0LmJsb2NrKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIjBcIjtcbiAgICAgICAgbWVzc2FnZS5hcHAgPSAoX2IgPSBvYmplY3QuYXBwKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcIjBcIjtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBsb25nVG9TdHJpbmcobG9uZykge1xuICAgIHJldHVybiBsb25nLnRvU3RyaW5nKCk7XG59XG5pZiAobWluaW1hbF8xLmRlZmF1bHQudXRpbC5Mb25nICE9PSBsb25nXzEuZGVmYXVsdCkge1xuICAgIG1pbmltYWxfMS5kZWZhdWx0LnV0aWwuTG9uZyA9IGxvbmdfMS5kZWZhdWx0O1xuICAgIG1pbmltYWxfMS5kZWZhdWx0LmNvbmZpZ3VyZSgpO1xufVxuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/proto-types/tendermint/version/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/build/constants.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/build/constants.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.metaId = exports.KeplrLogoBase64 = void 0;\nexports.KeplrLogoBase64 = \"\";\nexports.metaId = \"d_2hxd99brRo\";\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/build/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/build/cosmjs.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/build/cosmjs.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CosmJSOfflineSigner = exports.CosmJSOfflineSignerOnlyAmino = void 0;\nclass CosmJSOfflineSignerOnlyAmino {\n    constructor(chainId, keplr, signOptions) {\n        this.chainId = chainId;\n        this.keplr = keplr;\n        this.signOptions = signOptions;\n    }\n    getAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = yield this.keplr.getKey(this.chainId);\n            return [\n                {\n                    address: key.bech32Address,\n                    // Currently, only secp256k1 is supported.\n                    algo: \"secp256k1\",\n                    pubkey: key.pubKey,\n                },\n            ];\n        });\n    }\n    signAmino(signerAddress, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.chainId !== signDoc.chain_id) {\n                throw new Error(\"Unmatched chain id with the offline signer\");\n            }\n            const key = yield this.keplr.getKey(signDoc.chain_id);\n            if (key.bech32Address !== signerAddress) {\n                throw new Error(\"Unknown signer address\");\n            }\n            return yield this.keplr.signAmino(this.chainId, signerAddress, signDoc, this.signOptions);\n        });\n    }\n    // Fallback function for the legacy cosmjs implementation before the stargate.\n    sign(signerAddress, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.signAmino(signerAddress, signDoc);\n        });\n    }\n}\nexports.CosmJSOfflineSignerOnlyAmino = CosmJSOfflineSignerOnlyAmino;\nclass CosmJSOfflineSigner extends CosmJSOfflineSignerOnlyAmino {\n    constructor(chainId, keplr, signOptions) {\n        super(chainId, keplr, signOptions);\n    }\n    signDirect(signerAddress, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.chainId !== signDoc.chainId) {\n                throw new Error(\"Unmatched chain id with the offline signer\");\n            }\n            const key = yield this.keplr.getKey(signDoc.chainId);\n            if (key.bech32Address !== signerAddress) {\n                throw new Error(\"Unknown signer address\");\n            }\n            return yield this.keplr.signDirect(this.chainId, signerAddress, signDoc, this.signOptions);\n        });\n    }\n}\nexports.CosmJSOfflineSigner = CosmJSOfflineSigner;\n//# sourceMappingURL=cosmjs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vYnVpbGQvY29zbWpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRyxvQ0FBb0M7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXItZXh0ZW5zaW9uXFxidWlsZFxcY29zbWpzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvc21KU09mZmxpbmVTaWduZXIgPSBleHBvcnRzLkNvc21KU09mZmxpbmVTaWduZXJPbmx5QW1pbm8gPSB2b2lkIDA7XG5jbGFzcyBDb3NtSlNPZmZsaW5lU2lnbmVyT25seUFtaW5vIHtcbiAgICBjb25zdHJ1Y3RvcihjaGFpbklkLCBrZXBsciwgc2lnbk9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jaGFpbklkID0gY2hhaW5JZDtcbiAgICAgICAgdGhpcy5rZXBsciA9IGtlcGxyO1xuICAgICAgICB0aGlzLnNpZ25PcHRpb25zID0gc2lnbk9wdGlvbnM7XG4gICAgfVxuICAgIGdldEFjY291bnRzKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0geWllbGQgdGhpcy5rZXBsci5nZXRLZXkodGhpcy5jaGFpbklkKTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBrZXkuYmVjaDMyQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3VycmVudGx5LCBvbmx5IHNlY3AyNTZrMSBpcyBzdXBwb3J0ZWQuXG4gICAgICAgICAgICAgICAgICAgIGFsZ286IFwic2VjcDI1NmsxXCIsXG4gICAgICAgICAgICAgICAgICAgIHB1YmtleToga2V5LnB1YktleSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNpZ25BbWlubyhzaWduZXJBZGRyZXNzLCBzaWduRG9jKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFpbklkICE9PSBzaWduRG9jLmNoYWluX2lkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5tYXRjaGVkIGNoYWluIGlkIHdpdGggdGhlIG9mZmxpbmUgc2lnbmVyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qga2V5ID0geWllbGQgdGhpcy5rZXBsci5nZXRLZXkoc2lnbkRvYy5jaGFpbl9pZCk7XG4gICAgICAgICAgICBpZiAoa2V5LmJlY2gzMkFkZHJlc3MgIT09IHNpZ25lckFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHNpZ25lciBhZGRyZXNzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMua2VwbHIuc2lnbkFtaW5vKHRoaXMuY2hhaW5JZCwgc2lnbmVyQWRkcmVzcywgc2lnbkRvYywgdGhpcy5zaWduT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBGYWxsYmFjayBmdW5jdGlvbiBmb3IgdGhlIGxlZ2FjeSBjb3NtanMgaW1wbGVtZW50YXRpb24gYmVmb3JlIHRoZSBzdGFyZ2F0ZS5cbiAgICBzaWduKHNpZ25lckFkZHJlc3MsIHNpZ25Eb2MpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnNpZ25BbWlubyhzaWduZXJBZGRyZXNzLCBzaWduRG9jKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Db3NtSlNPZmZsaW5lU2lnbmVyT25seUFtaW5vID0gQ29zbUpTT2ZmbGluZVNpZ25lck9ubHlBbWlubztcbmNsYXNzIENvc21KU09mZmxpbmVTaWduZXIgZXh0ZW5kcyBDb3NtSlNPZmZsaW5lU2lnbmVyT25seUFtaW5vIHtcbiAgICBjb25zdHJ1Y3RvcihjaGFpbklkLCBrZXBsciwgc2lnbk9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY2hhaW5JZCwga2VwbHIsIHNpZ25PcHRpb25zKTtcbiAgICB9XG4gICAgc2lnbkRpcmVjdChzaWduZXJBZGRyZXNzLCBzaWduRG9jKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFpbklkICE9PSBzaWduRG9jLmNoYWluSWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbm1hdGNoZWQgY2hhaW4gaWQgd2l0aCB0aGUgb2ZmbGluZSBzaWduZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB5aWVsZCB0aGlzLmtlcGxyLmdldEtleShzaWduRG9jLmNoYWluSWQpO1xuICAgICAgICAgICAgaWYgKGtleS5iZWNoMzJBZGRyZXNzICE9PSBzaWduZXJBZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBzaWduZXIgYWRkcmVzc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmtlcGxyLnNpZ25EaXJlY3QodGhpcy5jaGFpbklkLCBzaWduZXJBZGRyZXNzLCBzaWduRG9jLCB0aGlzLnNpZ25PcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Db3NtSlNPZmZsaW5lU2lnbmVyID0gQ29zbUpTT2ZmbGluZVNpZ25lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvc21qcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/build/cosmjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/build/enigma.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/build/enigma.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KeplrEnigmaUtils = void 0;\n/**\n * KeplrEnigmaUtils duplicates the public methods that are supported on secretjs's EnigmaUtils class.\n */\nclass KeplrEnigmaUtils {\n    constructor(chainId, keplr) {\n        this.chainId = chainId;\n        this.keplr = keplr;\n    }\n    getPubkey() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.keplr.getEnigmaPubKey(this.chainId);\n        });\n    }\n    getTxEncryptionKey(nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.keplr.getEnigmaTxEncryptionKey(this.chainId, nonce);\n        });\n    }\n    encrypt(contractCodeHash, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.keplr.enigmaEncrypt(this.chainId, contractCodeHash, msg);\n        });\n    }\n    decrypt(ciphertext, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.keplr.enigmaDecrypt(this.chainId, ciphertext, nonce);\n        });\n    }\n}\nexports.KeplrEnigmaUtils = KeplrEnigmaUtils;\n//# sourceMappingURL=enigma.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vYnVpbGQvZW5pZ21hLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXItZXh0ZW5zaW9uXFxidWlsZFxcZW5pZ21hLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktlcGxyRW5pZ21hVXRpbHMgPSB2b2lkIDA7XG4vKipcbiAqIEtlcGxyRW5pZ21hVXRpbHMgZHVwbGljYXRlcyB0aGUgcHVibGljIG1ldGhvZHMgdGhhdCBhcmUgc3VwcG9ydGVkIG9uIHNlY3JldGpzJ3MgRW5pZ21hVXRpbHMgY2xhc3MuXG4gKi9cbmNsYXNzIEtlcGxyRW5pZ21hVXRpbHMge1xuICAgIGNvbnN0cnVjdG9yKGNoYWluSWQsIGtlcGxyKSB7XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgIHRoaXMua2VwbHIgPSBrZXBscjtcbiAgICB9XG4gICAgZ2V0UHVia2V5KCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMua2VwbHIuZ2V0RW5pZ21hUHViS2V5KHRoaXMuY2hhaW5JZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRUeEVuY3J5cHRpb25LZXkobm9uY2UpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmtlcGxyLmdldEVuaWdtYVR4RW5jcnlwdGlvbktleSh0aGlzLmNoYWluSWQsIG5vbmNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVuY3J5cHQoY29udHJhY3RDb2RlSGFzaCwgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgICBtc2cpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmtlcGxyLmVuaWdtYUVuY3J5cHQodGhpcy5jaGFpbklkLCBjb250cmFjdENvZGVIYXNoLCBtc2cpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGVjcnlwdChjaXBoZXJ0ZXh0LCBub25jZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMua2VwbHIuZW5pZ21hRGVjcnlwdCh0aGlzLmNoYWluSWQsIGNpcGhlcnRleHQsIG5vbmNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5LZXBsckVuaWdtYVV0aWxzID0gS2VwbHJFbmlnbWFVdGlscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuaWdtYS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/build/enigma.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/build/hex.js":
/*!********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/build/hex.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n  Belows are from @cosmjs/encoding library.\n  To reduce the bundle size of provider, put them directly here.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromHex = exports.toHex = void 0;\nfunction toHex(data) {\n    let out = \"\";\n    for (const byte of data) {\n        out += (\"0\" + byte.toString(16)).slice(-2);\n    }\n    return out;\n}\nexports.toHex = toHex;\nfunction fromHex(hexstring) {\n    if (hexstring.length % 2 !== 0) {\n        throw new Error(\"hex string length must be a multiple of 2\");\n    }\n    const listOfInts = [];\n    for (let i = 0; i < hexstring.length; i += 2) {\n        const hexByteAsString = hexstring.substr(i, 2);\n        if (!hexByteAsString.match(/[0-9a-f]{2}/i)) {\n            throw new Error(\"hex string contains invalid characters\");\n        }\n        listOfInts.push(parseInt(hexByteAsString, 16));\n    }\n    return new Uint8Array(listOfInts);\n}\nexports.fromHex = fromHex;\n//# sourceMappingURL=hex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vYnVpbGQvaGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLGFBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQSw2Q0FBNkMsRUFBRTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyLWV4dGVuc2lvblxcYnVpbGRcXGhleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gIEJlbG93cyBhcmUgZnJvbSBAY29zbWpzL2VuY29kaW5nIGxpYnJhcnkuXG4gIFRvIHJlZHVjZSB0aGUgYnVuZGxlIHNpemUgb2YgcHJvdmlkZXIsIHB1dCB0aGVtIGRpcmVjdGx5IGhlcmUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbUhleCA9IGV4cG9ydHMudG9IZXggPSB2b2lkIDA7XG5mdW5jdGlvbiB0b0hleChkYXRhKSB7XG4gICAgbGV0IG91dCA9IFwiXCI7XG4gICAgZm9yIChjb25zdCBieXRlIG9mIGRhdGEpIHtcbiAgICAgICAgb3V0ICs9IChcIjBcIiArIGJ5dGUudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLnRvSGV4ID0gdG9IZXg7XG5mdW5jdGlvbiBmcm9tSGV4KGhleHN0cmluZykge1xuICAgIGlmIChoZXhzdHJpbmcubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJoZXggc3RyaW5nIGxlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMlwiKTtcbiAgICB9XG4gICAgY29uc3QgbGlzdE9mSW50cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGV4c3RyaW5nLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGNvbnN0IGhleEJ5dGVBc1N0cmluZyA9IGhleHN0cmluZy5zdWJzdHIoaSwgMik7XG4gICAgICAgIGlmICghaGV4Qnl0ZUFzU3RyaW5nLm1hdGNoKC9bMC05YS1mXXsyfS9pKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaGV4IHN0cmluZyBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnNcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdE9mSW50cy5wdXNoKHBhcnNlSW50KGhleEJ5dGVBc1N0cmluZywgMTYpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGxpc3RPZkludHMpO1xufVxuZXhwb3J0cy5mcm9tSGV4ID0gZnJvbUhleDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/build/hex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/build/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/build/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./keplr */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/build/keplr.js\"), exports);\n__exportStar(__webpack_require__(/*! ./keplr-fallback */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/build/keplr-fallback.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHFGQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyx1R0FBa0I7QUFDdkMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyLWV4dGVuc2lvblxcYnVpbGRcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4va2VwbHJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2tlcGxyLWZhbGxiYWNrXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/build/keplr-fallback.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/build/keplr-fallback.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KeplrFallback = void 0;\nconst keplr_1 = __webpack_require__(/*! ./keplr */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/build/keplr.js\");\nclass KeplrFallback extends keplr_1.Keplr {\n    constructor(onKeplrNotDetected) {\n        super();\n        this.onKeplrNotDetected = onKeplrNotDetected;\n        this.isKeplrDetected = null;\n        if (this.onKeplrNotDetected) {\n            keplr_1.Keplr.getKeplr(500).then((keplr) => {\n                var _a;\n                if (!keplr) {\n                    (_a = this.onKeplrNotDetected) === null || _a === void 0 ? void 0 : _a.call(this);\n                }\n            });\n        }\n    }\n    requestMethod(method, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.isKeplrDetected == null) {\n                const keplr = yield keplr_1.Keplr.getKeplr(500);\n                if (keplr) {\n                    this.isKeplrDetected = true;\n                }\n                else {\n                    this.isKeplrDetected = false;\n                }\n            }\n            if (this.isKeplrDetected) {\n                return keplr_1.Keplr.staticRequestMethod(method, args);\n            }\n            else {\n                const fallback = window.keplr;\n                if (fallback) {\n                    return fallback[method](...args);\n                }\n                else {\n                    throw new Error(\"Can't detect keplr fallback\");\n                }\n            }\n        });\n    }\n}\nexports.KeplrFallback = KeplrFallback;\n//# sourceMappingURL=keplr-fallback.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vYnVpbGQva2VwbHItZmFsbGJhY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQixnQkFBZ0IsbUJBQU8sQ0FBQyxxRkFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyLWV4dGVuc2lvblxcYnVpbGRcXGtlcGxyLWZhbGxiYWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktlcGxyRmFsbGJhY2sgPSB2b2lkIDA7XG5jb25zdCBrZXBscl8xID0gcmVxdWlyZShcIi4va2VwbHJcIik7XG5jbGFzcyBLZXBsckZhbGxiYWNrIGV4dGVuZHMga2VwbHJfMS5LZXBsciB7XG4gICAgY29uc3RydWN0b3Iob25LZXBsck5vdERldGVjdGVkKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub25LZXBsck5vdERldGVjdGVkID0gb25LZXBsck5vdERldGVjdGVkO1xuICAgICAgICB0aGlzLmlzS2VwbHJEZXRlY3RlZCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLm9uS2VwbHJOb3REZXRlY3RlZCkge1xuICAgICAgICAgICAga2VwbHJfMS5LZXBsci5nZXRLZXBscig1MDApLnRoZW4oKGtlcGxyKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGlmICgha2VwbHIpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gdGhpcy5vbktlcGxyTm90RGV0ZWN0ZWQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcXVlc3RNZXRob2QobWV0aG9kLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0tlcGxyRGV0ZWN0ZWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtlcGxyID0geWllbGQga2VwbHJfMS5LZXBsci5nZXRLZXBscig1MDApO1xuICAgICAgICAgICAgICAgIGlmIChrZXBscikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzS2VwbHJEZXRlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzS2VwbHJEZXRlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmlzS2VwbHJEZXRlY3RlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXBscl8xLktlcGxyLnN0YXRpY1JlcXVlc3RNZXRob2QobWV0aG9kLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZhbGxiYWNrID0gd2luZG93LmtlcGxyO1xuICAgICAgICAgICAgICAgIGlmIChmYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2tbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGRldGVjdCBrZXBsciBmYWxsYmFja1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuS2VwbHJGYWxsYmFjayA9IEtlcGxyRmFsbGJhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXBsci1mYWxsYmFjay5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/build/keplr-fallback.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/build/keplr.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/build/keplr.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Keplr = exports.EthereumProviderRpcError = void 0;\nconst types_1 = __webpack_require__(/*! @keplr-wallet/types */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/index.js\");\nconst uint8_array_1 = __webpack_require__(/*! ./uint8-array */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/build/uint8-array.js\");\nconst deepmerge_1 = __importDefault(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst cosmjs_1 = __webpack_require__(/*! ./cosmjs */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/build/cosmjs.js\");\nconst enigma_1 = __webpack_require__(/*! ./enigma */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/build/enigma.js\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/build/version.js\");\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"events\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/build/constants.js\");\nclass EthereumProviderRpcError extends Error {\n    constructor(code, message, data) {\n        super(message);\n        this.code = code;\n        this.data = data;\n        Object.setPrototypeOf(this, EthereumProviderRpcError.prototype);\n    }\n}\nexports.EthereumProviderRpcError = EthereumProviderRpcError;\nclass Keplr {\n    constructor() {\n        this.enigmaUtils = new Map();\n        this.version = version_1.BUILD_VERSION;\n        this.mode = \"extension\";\n        this.defaultOptions = {};\n        this.ethereum = new EthereumProvider(this);\n        // TODO: 이거 마지막에 꼭 구현해야한다.\n        //       일단은 다른게 더 급해서 일단 any로 처리\n        this.starknet = undefined;\n    }\n    static staticRequestMethod(method, args) {\n        const isMobile = \"ReactNativeWebView\" in window;\n        const postMessage = isMobile\n            ? (message) => {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                window.ReactNativeWebView.postMessage(JSON.stringify(message));\n            }\n            : (message) => {\n                window.postMessage(message, window.location.origin);\n            };\n        const parseMessage = isMobile\n            ? (message) => {\n                if (message && typeof message === \"string\") {\n                    try {\n                        return JSON.parse(message);\n                    }\n                    catch (_a) {\n                        // noop\n                    }\n                }\n                return message;\n            }\n            : (message) => {\n                return message;\n            };\n        const bytes = new Uint8Array(8);\n        const id = Array.from(crypto.getRandomValues(bytes))\n            .map((value) => {\n            return value.toString(16);\n        })\n            .join(\"\");\n        const proxyRequestType = !window.keplrRequestMetaIdSupport\n            ? \"proxy-request\"\n            : `proxy-request${constants_1.metaId ? `-${constants_1.metaId}` : \"\"}`;\n        const proxyMessage = {\n            type: proxyRequestType,\n            id,\n            method,\n            args: uint8_array_1.JSONUint8Array.wrap(args),\n        };\n        return new Promise((resolve, reject) => {\n            const receiveResponse = (e) => {\n                const proxyResponse = parseMessage(e.data);\n                if (!proxyResponse || proxyResponse.type !== \"proxy-request-response\") {\n                    return;\n                }\n                if (proxyResponse.id !== id) {\n                    return;\n                }\n                window.removeEventListener(\"message\", receiveResponse);\n                const result = uint8_array_1.JSONUint8Array.unwrap(proxyResponse.result);\n                if (!result) {\n                    reject(new Error(\"Result is null\"));\n                    return;\n                }\n                if (result.error) {\n                    reject(new Error(result.error));\n                    return;\n                }\n                resolve(result.return);\n            };\n            window.addEventListener(\"message\", receiveResponse);\n            postMessage(proxyMessage);\n        });\n    }\n    requestMethod(method, args) {\n        return Keplr.staticRequestMethod(method, args);\n    }\n    static getKeplr(pingTimeout = 1500) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield waitDocumentReady();\n            return new Promise((resolve, reject) => {\n                const timeout = setTimeout(() => {\n                    resolve(undefined);\n                }, pingTimeout);\n                Keplr.staticRequestMethod(\"ping\", [])\n                    .then(() => {\n                    clearTimeout(timeout);\n                    resolve(new Keplr());\n                })\n                    .catch((e) => {\n                    var _a;\n                    // if legacy version.\n                    if ((_a = e === null || e === void 0 ? void 0 : e.message) === null || _a === void 0 ? void 0 : _a.includes(\"Invalid method: ping\")) {\n                        clearTimeout(timeout);\n                        resolve(new Keplr());\n                    }\n                    else {\n                        reject(e);\n                    }\n                });\n            });\n        });\n    }\n    ping() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.requestMethod(\"ping\", []);\n        });\n    }\n    enable(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.requestMethod(\"enable\", [chainIds]);\n        });\n    }\n    disable(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.requestMethod(\"disable\", [chainIds]);\n        });\n    }\n    experimentalSuggestChain(chainInfo) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (chainInfo.hideInUI) {\n                throw new Error(\"hideInUI is not allowed\");\n            }\n            if (((_a = chainInfo.features) === null || _a === void 0 ? void 0 : _a.includes(\"stargate\")) ||\n                ((_b = chainInfo.features) === null || _b === void 0 ? void 0 : _b.includes(\"no-legacy-stdTx\"))) {\n                console.warn(\"“stargate”, “no-legacy-stdTx” feature has been deprecated. The launchpad is no longer supported, thus works without the two features. We would keep the aforementioned two feature for a while, but the upcoming update would potentially cause errors. Remove the two feature.\");\n            }\n            yield this.requestMethod(\"experimentalSuggestChain\", [chainInfo]);\n        });\n    }\n    getKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getKey\", [chainId]);\n        });\n    }\n    getKeysSettled(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getKeysSettled\", [chainIds]);\n        });\n    }\n    sendTx(chainId, tx, mode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(\"length\" in tx)) {\n                console.warn(\"Do not send legacy std tx via `sendTx` API. We now only support protobuf tx. The usage of legeacy std tx would throw an error in the near future.\");\n            }\n            return yield this.requestMethod(\"sendTx\", [chainId, tx, mode]);\n        });\n    }\n    signAmino(chainId, signer, signDoc, signOptions = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"signAmino\", [\n                chainId,\n                signer,\n                signDoc,\n                (0, deepmerge_1.default)((_a = this.defaultOptions.sign) !== null && _a !== void 0 ? _a : {}, signOptions),\n            ]);\n        });\n    }\n    signDirect(chainId, signer, signDoc, signOptions = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.requestMethod(\"signDirect\", [\n                chainId,\n                signer,\n                // We can't send the `Long` with remaing the type.\n                // Receiver should change the `string` to `Long`.\n                {\n                    bodyBytes: signDoc.bodyBytes,\n                    authInfoBytes: signDoc.authInfoBytes,\n                    chainId: signDoc.chainId,\n                    accountNumber: signDoc.accountNumber\n                        ? signDoc.accountNumber.toString()\n                        : null,\n                },\n                (0, deepmerge_1.default)((_a = this.defaultOptions.sign) !== null && _a !== void 0 ? _a : {}, signOptions),\n            ]);\n            const signed = result.signed;\n            return {\n                signed: {\n                    bodyBytes: signed.bodyBytes,\n                    authInfoBytes: signed.authInfoBytes,\n                    chainId: signed.chainId,\n                    // We can't send the `Long` with remaing the type.\n                    // Sender should change the `Long` to `string`.\n                    accountNumber: long_1.default.fromString(signed.accountNumber),\n                },\n                signature: result.signature,\n            };\n        });\n    }\n    signDirectAux(chainId, signer, signDoc, signOptions = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.requestMethod(\"signDirectAux\", [\n                chainId,\n                signer,\n                // We can't send the `Long` with remaing the type.\n                // Receiver should change the `string` to `Long`.\n                {\n                    bodyBytes: signDoc.bodyBytes,\n                    publicKey: signDoc.publicKey,\n                    chainId: signDoc.chainId,\n                    accountNumber: signDoc.accountNumber\n                        ? signDoc.accountNumber.toString()\n                        : null,\n                    sequence: signDoc.sequence ? signDoc.sequence.toString() : null,\n                },\n                (0, deepmerge_1.default)({\n                    preferNoSetMemo: (_a = this.defaultOptions.sign) === null || _a === void 0 ? void 0 : _a.preferNoSetMemo,\n                }, signOptions),\n            ]);\n            const signed = result.signed;\n            return {\n                signed: {\n                    bodyBytes: signed.bodyBytes,\n                    publicKey: signed.publicKey || undefined,\n                    chainId: signed.chainId,\n                    // We can't send the `Long` with remaing the type.\n                    // Sender should change the `Long` to `string`.\n                    accountNumber: long_1.default.fromString(signed.accountNumber),\n                    sequence: long_1.default.fromString(signed.sequence),\n                },\n                signature: result.signature,\n            };\n        });\n    }\n    signArbitrary(chainId, signer, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"signArbitrary\", [chainId, signer, data]);\n        });\n    }\n    signICNSAdr36(chainId, contractAddress, owner, username, addressChainIds) {\n        return this.requestMethod(\"signICNSAdr36\", [\n            chainId,\n            contractAddress,\n            owner,\n            username,\n            addressChainIds,\n        ]);\n    }\n    verifyArbitrary(chainId, signer, data, signature) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"verifyArbitrary\", [\n                chainId,\n                signer,\n                data,\n                signature,\n            ]);\n        });\n    }\n    signEthereum(chainId, signer, data, type) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"signEthereum\", [\n                chainId,\n                signer,\n                data,\n                type,\n            ]);\n        });\n    }\n    getOfflineSigner(chainId, signOptions) {\n        return new cosmjs_1.CosmJSOfflineSigner(chainId, this, signOptions);\n    }\n    getOfflineSignerOnlyAmino(chainId, signOptions) {\n        return new cosmjs_1.CosmJSOfflineSignerOnlyAmino(chainId, this, signOptions);\n    }\n    getOfflineSignerAuto(chainId, signOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = yield this.getKey(chainId);\n            if (key.isNanoLedger) {\n                return new cosmjs_1.CosmJSOfflineSignerOnlyAmino(chainId, this, signOptions);\n            }\n            return new cosmjs_1.CosmJSOfflineSigner(chainId, this, signOptions);\n        });\n    }\n    suggestToken(chainId, contractAddress, viewingKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"suggestToken\", [\n                chainId,\n                contractAddress,\n                viewingKey,\n            ]);\n        });\n    }\n    getSecret20ViewingKey(chainId, contractAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getSecret20ViewingKey\", [\n                chainId,\n                contractAddress,\n            ]);\n        });\n    }\n    getEnigmaPubKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getEnigmaPubKey\", [chainId]);\n        });\n    }\n    getEnigmaTxEncryptionKey(chainId, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getEnigmaTxEncryptionKey\", [\n                chainId,\n                nonce,\n            ]);\n        });\n    }\n    enigmaEncrypt(chainId, contractCodeHash, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"enigmaEncrypt\", [\n                chainId,\n                contractCodeHash,\n                msg,\n            ]);\n        });\n    }\n    enigmaDecrypt(chainId, ciphertext, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"enigmaDecrypt\", [\n                chainId,\n                ciphertext,\n                nonce,\n            ]);\n        });\n    }\n    getEnigmaUtils(chainId) {\n        if (this.enigmaUtils.has(chainId)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return this.enigmaUtils.get(chainId);\n        }\n        const enigmaUtils = new enigma_1.KeplrEnigmaUtils(chainId, this);\n        this.enigmaUtils.set(chainId, enigmaUtils);\n        return enigmaUtils;\n    }\n    experimentalSignEIP712CosmosTx_v0(chainId, signer, eip712, signDoc, signOptions = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"experimentalSignEIP712CosmosTx_v0\", [\n                chainId,\n                signer,\n                eip712,\n                signDoc,\n                (0, deepmerge_1.default)((_a = this.defaultOptions.sign) !== null && _a !== void 0 ? _a : {}, signOptions),\n            ]);\n        });\n    }\n    getChainInfosWithoutEndpoints() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getChainInfosWithoutEndpoints\", []);\n        });\n    }\n    changeKeyRingName({ defaultName, editable = true, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"changeKeyRingName\", [\n                { defaultName, editable },\n            ]);\n        });\n    }\n    sendEthereumTx(chainId, tx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"sendEthereumTx\", [chainId, tx]);\n        });\n    }\n    suggestERC20(chainId, contractAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"suggestERC20\", [chainId, contractAddress]);\n        });\n    }\n    getChainInfoWithoutEndpoints(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getChainInfoWithoutEndpoints\", [chainId]);\n        });\n    }\n    getStarknetKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getStarknetKey\", [chainId]);\n        });\n    }\n    getStarknetKeysSettled(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getStarknetKeysSettled\", [chainIds]);\n        });\n    }\n    signStarknetTx(chainId, transactions, details) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"signStarknetTx\", [\n                chainId,\n                transactions,\n                details,\n            ]);\n        });\n    }\n    signStarknetDeployAccountTransaction(chainId, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"signStarknetDeployAccountTransaction\", [\n                chainId,\n                transaction,\n            ]);\n        });\n    }\n}\nexports.Keplr = Keplr;\nconst waitDocumentReady = () => {\n    if (document.readyState === \"complete\") {\n        return Promise.resolve();\n    }\n    return new Promise((resolve) => {\n        const documentStateChange = (event) => {\n            if (event.target &&\n                event.target.readyState === \"complete\") {\n                resolve();\n                document.removeEventListener(\"readystatechange\", documentStateChange);\n            }\n        };\n        document.addEventListener(\"readystatechange\", documentStateChange);\n    });\n};\nclass EthereumProvider extends events_1.default {\n    constructor(keplr) {\n        super();\n        this.keplr = keplr;\n        this.eip6963ProviderInfo = {\n            uuid: crypto.randomUUID(),\n            name: \"Keplr\",\n            rdns: \"app.keplr\",\n            icon: `data:image/png;base64,${constants_1.KeplrLogoBase64}`,\n        };\n        // It must be in the hexadecimal format used in EVM-based chains, not the format used in Tendermint nodes.\n        this.chainId = null;\n        // It must be in the decimal format of chainId.\n        this.networkVersion = null;\n        this.selectedAddress = null;\n        this.isKeplr = true;\n        this.isMetaMask = true;\n        this._isConnected = false;\n        this._currentChainId = null;\n        window.addEventListener(\"keplr_keystorechange\", () => __awaiter(this, void 0, void 0, function* () {\n            if (this._currentChainId) {\n                const chainInfo = yield keplr.getChainInfoWithoutEndpoints(this._currentChainId);\n                if (chainInfo) {\n                    const selectedAddress = (yield keplr.getKey(this._currentChainId))\n                        .ethereumHexAddress;\n                    this.handleAccountsChanged(selectedAddress);\n                }\n            }\n        }));\n        window.addEventListener(\"keplr_chainChanged\", (event) => {\n            const origin = event.detail.origin;\n            if (origin === window.location.origin) {\n                const evmChainId = event.detail.evmChainId;\n                this.handleChainChanged(evmChainId);\n            }\n        });\n        window.addEventListener(\"keplr_ethSubscription\", (event) => {\n            var _a;\n            const origin = event.detail.origin;\n            const providerId = event.detail.providerId;\n            if (origin === window.location.origin &&\n                providerId === ((_a = this.eip6963ProviderInfo) === null || _a === void 0 ? void 0 : _a.uuid)) {\n                const data = event.detail.data;\n                this.emit(\"message\", {\n                    type: \"eth_subscription\",\n                    data,\n                });\n            }\n        });\n        if (this.eip6963ProviderInfo) {\n            const announceEvent = new CustomEvent(types_1.EIP6963EventNames.Announce, {\n                detail: Object.freeze({\n                    info: this.eip6963ProviderInfo,\n                    provider: this,\n                }),\n            });\n            window.addEventListener(types_1.EIP6963EventNames.Request, () => window.dispatchEvent(announceEvent));\n            window.dispatchEvent(announceEvent);\n        }\n    }\n    static requestMethod(method, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const isMobile = \"ReactNativeWebView\" in window;\n            const postMessage = isMobile\n                ? (message) => {\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    window.ReactNativeWebView.postMessage(JSON.stringify(message));\n                }\n                : (message) => {\n                    window.postMessage(message, window.location.origin);\n                };\n            const parseMessage = isMobile\n                ? (message) => {\n                    if (message && typeof message === \"string\") {\n                        try {\n                            return JSON.parse(message);\n                        }\n                        catch (_a) {\n                            // noop\n                        }\n                    }\n                    return message;\n                }\n                : (message) => {\n                    return message;\n                };\n            const bytes = new Uint8Array(8);\n            const id = Array.from(crypto.getRandomValues(bytes))\n                .map((value) => {\n                return value.toString(16);\n            })\n                .join(\"\");\n            const proxyRequestType = !window.keplrRequestMetaIdSupport\n                ? \"proxy-request\"\n                : `proxy-request${constants_1.metaId ? `-${constants_1.metaId}` : \"\"}`;\n            const proxyMessage = {\n                type: proxyRequestType,\n                id,\n                method: \"ethereum\",\n                args: uint8_array_1.JSONUint8Array.wrap(args),\n                ethereumProviderMethod: method,\n            };\n            return new Promise((resolve, reject) => {\n                const receiveResponse = (e) => {\n                    const proxyResponse = parseMessage(e.data);\n                    if (!proxyResponse || proxyResponse.type !== \"proxy-request-response\") {\n                        return;\n                    }\n                    if (proxyResponse.id !== id) {\n                        return;\n                    }\n                    window.removeEventListener(\"message\", receiveResponse);\n                    const result = uint8_array_1.JSONUint8Array.unwrap(proxyResponse.result);\n                    if (!result) {\n                        reject(new Error(\"Result is null\"));\n                        return;\n                    }\n                    if (result.error) {\n                        const error = result.error;\n                        reject(error.code && !error.module\n                            ? new EthereumProviderRpcError(error.code, error.message, error.data)\n                            : new Error(error));\n                        return;\n                    }\n                    resolve(result.return);\n                };\n                window.addEventListener(\"message\", receiveResponse);\n                postMessage(proxyMessage);\n            });\n        });\n    }\n    handleConnect(evmChainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._isConnected) {\n                const { currentEvmChainId, currentChainId, selectedAddress } = yield EthereumProvider.requestMethod(\"request\", Object.assign({ method: \"keplr_connect\" }, (evmChainId && { params: [evmChainId] })));\n                this._isConnected = true;\n                this._currentChainId = currentChainId;\n                this.chainId = `0x${currentEvmChainId.toString(16)}`;\n                this.networkVersion = currentEvmChainId.toString(10);\n                this.selectedAddress = selectedAddress;\n                this.emit(\"connect\", { chainId: this.chainId });\n            }\n        });\n    }\n    handleDisconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._isConnected) {\n                yield EthereumProvider.requestMethod(\"request\", {\n                    method: \"keplr_disconnect\",\n                });\n                this._isConnected = false;\n                this.chainId = null;\n                this.selectedAddress = null;\n                this.networkVersion = null;\n                this.emit(\"disconnect\");\n            }\n        });\n    }\n    handleChainChanged(evmChainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.handleConnect(evmChainId);\n            const evmChainIdHex = `0x${evmChainId.toString(16)}`;\n            this.emit(\"chainChanged\", evmChainIdHex);\n        });\n    }\n    handleAccountsChanged(selectedAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._isConnected) {\n                this.selectedAddress = selectedAddress;\n                this.emit(\"accountsChanged\", [selectedAddress]);\n            }\n        });\n    }\n    isConnected() {\n        return this._isConnected;\n    }\n    request({ method, params, chainId, }) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._isConnected) {\n                if (method === \"eth_accounts\") {\n                    return [];\n                }\n                yield this.handleConnect();\n            }\n            return yield EthereumProvider.requestMethod(\"request\", {\n                method,\n                params,\n                providerId: (_a = this.eip6963ProviderInfo) === null || _a === void 0 ? void 0 : _a.uuid,\n                chainId,\n            });\n        });\n    }\n    enable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield EthereumProvider.requestMethod(\"request\", {\n                method: \"eth_requestAccounts\",\n            });\n        });\n    }\n    net_version() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield EthereumProvider.requestMethod(\"request\", {\n                method: \"net_version\",\n            });\n        });\n    }\n}\n//# sourceMappingURL=keplr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/build/keplr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/build/uint8-array.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/build/uint8-array.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JSONUint8Array = void 0;\n// The JSON encoder that supports the `Uint8Array`.\nconst hex_1 = __webpack_require__(/*! ./hex */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/build/hex.js\");\nclass JSONUint8Array {\n    static parse(text) {\n        return JSON.parse(text, (key, value) => {\n            // Prevent potential prototype poisoning.\n            if (key === \"__proto__\") {\n                throw new Error(\"__proto__ is disallowed\");\n            }\n            if (value &&\n                typeof value === \"string\" &&\n                value.startsWith(\"__uint8array__\")) {\n                return (0, hex_1.fromHex)(value.replace(\"__uint8array__\", \"\"));\n            }\n            if (typeof BigInt !== \"undefined\" &&\n                value &&\n                typeof value === \"string\" &&\n                value.startsWith(\"__bigint__\")) {\n                return BigInt(value.replace(\"__bigint__\", \"\"));\n            }\n            return value;\n        });\n    }\n    static stringify(obj) {\n        return JSON.stringify(obj, (key, value) => {\n            // Prevent potential prototype poisoning.\n            if (key === \"__proto__\") {\n                throw new Error(\"__proto__ is disallowed\");\n            }\n            if (value &&\n                (value instanceof Uint8Array ||\n                    (typeof value === \"object\" &&\n                        \"type\" in value &&\n                        \"data\" in value &&\n                        value.type === \"Buffer\" &&\n                        Array.isArray(value.data)))) {\n                const array = value instanceof Uint8Array ? value : new Uint8Array(value.data);\n                return `__uint8array__${(0, hex_1.toHex)(array)}`;\n            }\n            if (typeof value === \"bigint\") {\n                return `__bigint__${value.toString()}`;\n            }\n            return value;\n        });\n    }\n    static wrap(obj) {\n        if (obj === undefined)\n            return undefined;\n        return JSON.parse(JSONUint8Array.stringify(obj));\n    }\n    static unwrap(obj) {\n        if (obj === undefined)\n            return undefined;\n        return JSONUint8Array.parse(JSONUint8Array.stringify(obj));\n    }\n}\nexports.JSONUint8Array = JSONUint8Array;\n//# sourceMappingURL=uint8-array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vYnVpbGQvdWludDgtYXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLGlGQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyx3QkFBd0I7QUFDaEU7QUFDQTtBQUNBLG9DQUFvQyxpQkFBaUI7QUFDckQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyLWV4dGVuc2lvblxcYnVpbGRcXHVpbnQ4LWFycmF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5KU09OVWludDhBcnJheSA9IHZvaWQgMDtcbi8vIFRoZSBKU09OIGVuY29kZXIgdGhhdCBzdXBwb3J0cyB0aGUgYFVpbnQ4QXJyYXlgLlxuY29uc3QgaGV4XzEgPSByZXF1aXJlKFwiLi9oZXhcIik7XG5jbGFzcyBKU09OVWludDhBcnJheSB7XG4gICAgc3RhdGljIHBhcnNlKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIC8vIFByZXZlbnQgcG90ZW50aWFsIHByb3RvdHlwZSBwb2lzb25pbmcuXG4gICAgICAgICAgICBpZiAoa2V5ID09PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiX19wcm90b19fIGlzIGRpc2FsbG93ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydHNXaXRoKFwiX191aW50OGFycmF5X19cIikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGhleF8xLmZyb21IZXgpKHZhbHVlLnJlcGxhY2UoXCJfX3VpbnQ4YXJyYXlfX1wiLCBcIlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIEJpZ0ludCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgICAgIHZhbHVlICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgdmFsdWUuc3RhcnRzV2l0aChcIl9fYmlnaW50X19cIikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmlnSW50KHZhbHVlLnJlcGxhY2UoXCJfX2JpZ2ludF9fXCIsIFwiXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBzdHJpbmdpZnkob2JqKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IHBvdGVudGlhbCBwcm90b3R5cGUgcG9pc29uaW5nLlxuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJfX3Byb3RvX19cIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIl9fcHJvdG9fXyBpcyBkaXNhbGxvd2VkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICAgICAgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSB8fFxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIiBpbiB2YWx1ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhXCIgaW4gdmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnR5cGUgPT09IFwiQnVmZmVyXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUuZGF0YSkpKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gdmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gdmFsdWUgOiBuZXcgVWludDhBcnJheSh2YWx1ZS5kYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYF9fdWludDhhcnJheV9fJHsoMCwgaGV4XzEudG9IZXgpKGFycmF5KX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBgX19iaWdpbnRfXyR7dmFsdWUudG9TdHJpbmcoKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIHdyYXAob2JqKSB7XG4gICAgICAgIGlmIChvYmogPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT05VaW50OEFycmF5LnN0cmluZ2lmeShvYmopKTtcbiAgICB9XG4gICAgc3RhdGljIHVud3JhcChvYmopIHtcbiAgICAgICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIEpTT05VaW50OEFycmF5LnBhcnNlKEpTT05VaW50OEFycmF5LnN0cmluZ2lmeShvYmopKTtcbiAgICB9XG59XG5leHBvcnRzLkpTT05VaW50OEFycmF5ID0gSlNPTlVpbnQ4QXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11aW50OC1hcnJheS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/build/uint8-array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/build/version.js":
/*!************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/build/version.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BUILD_VERSION = void 0;\nexports.BUILD_VERSION = \"0.12.202\";\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vYnVpbGQvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlci1leHRlbnNpb25cXGJ1aWxkXFx2ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CVUlMRF9WRVJTSU9OID0gdm9pZCAwO1xuZXhwb3J0cy5CVUlMRF9WRVJTSU9OID0gXCIwLjEyLjIwMlwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/build/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/bech32.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/bech32.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=bech32.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvYmVjaDMyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlci1leHRlbnNpb25cXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFxiZWNoMzIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZWNoMzIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/bech32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/bip44.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/bip44.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=bip44.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvYmlwNDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyLWV4dGVuc2lvblxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFx0eXBlc1xcYnVpbGRcXGJpcDQ0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmlwNDQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/bip44.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/chain-info.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/chain-info.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=chain-info.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvY2hhaW4taW5mby5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXItZXh0ZW5zaW9uXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcY2hhaW4taW5mby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYWluLWluZm8uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/chain-info.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/cosmjs-alt.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/cosmjs-alt.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=cosmjs-alt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvY29zbWpzLWFsdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXItZXh0ZW5zaW9uXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcY29zbWpzLWFsdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvc21qcy1hbHQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/cosmjs-alt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/cosmjs.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/cosmjs.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=cosmjs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvY29zbWpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlci1leHRlbnNpb25cXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFxjb3NtanMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3NtanMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/cosmjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/currency.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/currency.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=currency.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvY3VycmVuY3kuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyLWV4dGVuc2lvblxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFx0eXBlc1xcYnVpbGRcXGN1cnJlbmN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VycmVuY3kuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/currency.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/ethereum.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/ethereum.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EthTxStatus = exports.EthSignType = void 0;\nvar EthSignType;\n(function (EthSignType) {\n    EthSignType[\"MESSAGE\"] = \"message\";\n    EthSignType[\"TRANSACTION\"] = \"transaction\";\n    EthSignType[\"EIP712\"] = \"eip-712\";\n})(EthSignType = exports.EthSignType || (exports.EthSignType = {}));\nvar EthTxStatus;\n(function (EthTxStatus) {\n    EthTxStatus[\"Success\"] = \"0x1\";\n    EthTxStatus[\"Failure\"] = \"0x0\";\n})(EthTxStatus = exports.EthTxStatus || (exports.EthTxStatus = {}));\n//# sourceMappingURL=ethereum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvZXRoZXJldW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcsbUJBQW1CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QyxtQkFBbUIsS0FBSztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDLG1CQUFtQixLQUFLO0FBQ2pFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlci1leHRlbnNpb25cXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFxldGhlcmV1bS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXRoVHhTdGF0dXMgPSBleHBvcnRzLkV0aFNpZ25UeXBlID0gdm9pZCAwO1xudmFyIEV0aFNpZ25UeXBlO1xuKGZ1bmN0aW9uIChFdGhTaWduVHlwZSkge1xuICAgIEV0aFNpZ25UeXBlW1wiTUVTU0FHRVwiXSA9IFwibWVzc2FnZVwiO1xuICAgIEV0aFNpZ25UeXBlW1wiVFJBTlNBQ1RJT05cIl0gPSBcInRyYW5zYWN0aW9uXCI7XG4gICAgRXRoU2lnblR5cGVbXCJFSVA3MTJcIl0gPSBcImVpcC03MTJcIjtcbn0pKEV0aFNpZ25UeXBlID0gZXhwb3J0cy5FdGhTaWduVHlwZSB8fCAoZXhwb3J0cy5FdGhTaWduVHlwZSA9IHt9KSk7XG52YXIgRXRoVHhTdGF0dXM7XG4oZnVuY3Rpb24gKEV0aFR4U3RhdHVzKSB7XG4gICAgRXRoVHhTdGF0dXNbXCJTdWNjZXNzXCJdID0gXCIweDFcIjtcbiAgICBFdGhUeFN0YXR1c1tcIkZhaWx1cmVcIl0gPSBcIjB4MFwiO1xufSkoRXRoVHhTdGF0dXMgPSBleHBvcnRzLkV0aFR4U3RhdHVzIHx8IChleHBvcnRzLkV0aFR4U3RhdHVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV0aGVyZXVtLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/ethereum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/index.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/index.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./currency */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/currency.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bech32 */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/bech32.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bip44 */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/bip44.js\"), exports);\n__exportStar(__webpack_require__(/*! ./chain-info */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/chain-info.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./window */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/window.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ethereum */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/ethereum.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cosmjs */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/cosmjs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cosmjs-alt */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/cosmjs-alt.js\"), exports);\n__exportStar(__webpack_require__(/*! ./secretjs */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/secretjs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./settled */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/settled.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDRIQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyx3SEFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsc0hBQVM7QUFDOUIsYUFBYSxtQkFBTyxDQUFDLGdJQUFjO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyw4SEFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsd0hBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLDRIQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyx3SEFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsZ0lBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLDRIQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQywwSEFBVztBQUNoQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXItZXh0ZW5zaW9uXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jdXJyZW5jeVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYmVjaDMyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9iaXA0NFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2hhaW4taW5mb1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2FsbGV0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi93aW5kb3dcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2V0aGVyZXVtXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb3NtanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Nvc21qcy1hbHRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NlY3JldGpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zZXR0bGVkXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/secretjs.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/secretjs.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=secretjs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvc2VjcmV0anMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyLWV4dGVuc2lvblxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFx0eXBlc1xcYnVpbGRcXHNlY3JldGpzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VjcmV0anMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/secretjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/settled.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/settled.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=settled.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvc2V0dGxlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXItZXh0ZW5zaW9uXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcc2V0dGxlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldHRsZWQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/settled.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/eip6963.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/eip6963.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EIP6963EventNames = void 0;\nvar EIP6963EventNames;\n(function (EIP6963EventNames) {\n    EIP6963EventNames[\"Announce\"] = \"eip6963:announceProvider\";\n    EIP6963EventNames[\"Request\"] = \"eip6963:requestProvider\";\n})(EIP6963EventNames = exports.EIP6963EventNames || (exports.EIP6963EventNames = {}));\n//# sourceMappingURL=eip6963.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvd2FsbGV0L2VpcDY5NjMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0QseUJBQXlCLEtBQUs7QUFDbkYiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyLWV4dGVuc2lvblxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFx0eXBlc1xcYnVpbGRcXHdhbGxldFxcZWlwNjk2My5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRUlQNjk2M0V2ZW50TmFtZXMgPSB2b2lkIDA7XG52YXIgRUlQNjk2M0V2ZW50TmFtZXM7XG4oZnVuY3Rpb24gKEVJUDY5NjNFdmVudE5hbWVzKSB7XG4gICAgRUlQNjk2M0V2ZW50TmFtZXNbXCJBbm5vdW5jZVwiXSA9IFwiZWlwNjk2Mzphbm5vdW5jZVByb3ZpZGVyXCI7XG4gICAgRUlQNjk2M0V2ZW50TmFtZXNbXCJSZXF1ZXN0XCJdID0gXCJlaXA2OTYzOnJlcXVlc3RQcm92aWRlclwiO1xufSkoRUlQNjk2M0V2ZW50TmFtZXMgPSBleHBvcnRzLkVJUDY5NjNFdmVudE5hbWVzIHx8IChleHBvcnRzLkVJUDY5NjNFdmVudE5hbWVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVpcDY5NjMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/eip6963.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/ethereum.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/ethereum.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=ethereum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvd2FsbGV0L2V0aGVyZXVtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlci1leHRlbnNpb25cXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFx3YWxsZXRcXGV0aGVyZXVtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXRoZXJldW0uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/ethereum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/index.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/index.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./keplr */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/keplr.js\"), exports);\n__exportStar(__webpack_require__(/*! ./eip6963 */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/eip6963.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ethereum */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/ethereum.js\"), exports);\n__exportStar(__webpack_require__(/*! ./starknet */ \"(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/starknet.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvd2FsbGV0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw2SEFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsaUlBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLG1JQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxtSUFBWTtBQUNqQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXItZXh0ZW5zaW9uXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcd2FsbGV0XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2tlcGxyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9laXA2OTYzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ldGhlcmV1bVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3RhcmtuZXRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/keplr.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/keplr.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=keplr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvd2FsbGV0L2tlcGxyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlci1leHRlbnNpb25cXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFx3YWxsZXRcXGtlcGxyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VwbHIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/keplr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/starknet.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/starknet.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=starknet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvd2FsbGV0L3N0YXJrbmV0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlci1leHRlbnNpb25cXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFx3YWxsZXRcXHN0YXJrbmV0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhcmtuZXQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/wallet/starknet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/window.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/window.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=window.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci1leHRlbnNpb24vbm9kZV9tb2R1bGVzL0BrZXBsci13YWxsZXQvdHlwZXMvYnVpbGQvd2luZG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlci1leHRlbnNpb25cXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFx3aW5kb3cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3cuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider-extension/node_modules/@keplr-wallet/types/build/window.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/build/core.js":
/*!***********************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/build/core.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Keplr = void 0;\nconst router_1 = __webpack_require__(/*! @keplr-wallet/router */ \"(ssr)/./node_modules/@keplr-wallet/router/build/index.js\");\nconst enigma_1 = __webpack_require__(/*! ./enigma */ \"(ssr)/./node_modules/@keplr-wallet/provider/build/enigma.js\");\nconst cosmjs_1 = __webpack_require__(/*! ./cosmjs */ \"(ssr)/./node_modules/@keplr-wallet/provider/build/cosmjs.js\");\nconst deepmerge_1 = __importDefault(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"events\"));\nclass Keplr {\n    constructor(version, mode, requester) {\n        this.version = version;\n        this.mode = mode;\n        this.requester = requester;\n        this.enigmaUtils = new Map();\n        this.defaultOptions = {};\n        this.ethereum = new EthereumProvider(this, this.requester);\n        this.starknet = new StarknetProvider(this, this.requester);\n    }\n    ping() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"chains\", \"keplr-ping\", {});\n        });\n    }\n    enable(chainIds) {\n        if (typeof chainIds === \"string\") {\n            chainIds = [chainIds];\n        }\n        return new Promise((resolve, reject) => {\n            let f = false;\n            (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"permission-interactive\", \"enable-access\", {\n                chainIds,\n            })\n                .then(resolve)\n                .catch(reject)\n                .finally(() => (f = true));\n            setTimeout(() => {\n                if (!f) {\n                    this.protectedTryOpenSidePanelIfEnabled();\n                }\n            }, 100);\n        });\n    }\n    // TODO: 웹페이지에서도 필요할수도 있을 것 같으니 나중에 keplr의 API로 추가해준다.\n    isEnabled(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof chainIds === \"string\") {\n                chainIds = [chainIds];\n            }\n            return yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"permission-interactive\", \"is-enabled-access\", {\n                chainIds,\n            });\n        });\n    }\n    disable(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof chainIds === \"string\") {\n                chainIds = [chainIds];\n            }\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"permission-interactive\", \"disable-access\", {\n                    chainIds: chainIds !== null && chainIds !== void 0 ? chainIds : [],\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    experimentalSuggestChain(chainInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (chainInfo.hideInUI) {\n                throw new Error(\"hideInUI is not allowed\");\n            }\n            if (chainInfo.gasPriceStep) {\n                // Gas price step in ChainInfo is legacy format.\n                // Try to change the recent format for backward-compatibility.\n                const gasPriceStep = Object.assign({}, chainInfo.gasPriceStep);\n                for (const feeCurrency of chainInfo.feeCurrencies) {\n                    if (!feeCurrency.gasPriceStep) {\n                        feeCurrency.gasPriceStep = gasPriceStep;\n                    }\n                }\n                delete chainInfo.gasPriceStep;\n                console.warn(\"The `gasPriceStep` field of the `ChainInfo` has been moved under `feeCurrencies`. This is automatically handled as of right now, but the upcoming update would potentially cause errors.\");\n            }\n            if (chainInfo.coinType) {\n                console.warn(\"The `coinType` field of the `ChainInfo` is removed. This is automatically handled as of right now, but the upcoming update would potentially cause errors.\");\n                delete chainInfo.coinType;\n            }\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"chains\", \"need-suggest-chain-info-interaction\", {\n                    chainInfo,\n                }).then((needInteraction) => {\n                    if (!needInteraction) {\n                        f = true;\n                    }\n                    (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"chains\", \"suggest-chain-info\", {\n                        chainInfo,\n                    })\n                        .then(resolve)\n                        .catch(reject)\n                        .finally(() => (f = true));\n                    setTimeout(() => {\n                        if (!f) {\n                            this.protectedTryOpenSidePanelIfEnabled();\n                        }\n                    }, 100);\n                });\n            });\n        });\n    }\n    getKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"get-cosmos-key\", {\n                    chainId,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    getKeysSettled(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"get-cosmos-keys-settled\", {\n                    chainIds,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    getChainInfosWithoutEndpoints() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"chains\", \"get-chain-infos-without-endpoints\", {})\n                    .then((r) => resolve(r.chainInfos))\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    getChainInfoWithoutEndpoints(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"chains\", \"get-chain-info-without-endpoints\", {\n                    chainId,\n                })\n                    .then((r) => resolve(r.chainInfo))\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    sendTx(chainId, tx, mode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // XXX: 원래 enable을 미리하지 않아도 백그라운드에서 알아서 처리해주는 시스템이였는데...\n            //      side panel에서는 불가능하기 때문에 이젠 provider에서 permission도 관리해줘야한다...\n            //      sendTx의 경우는 일종의 쿼리이기 때문에 언제 결과가 올지 알 수 없다. 그러므로 미리 권한 처리를 해야한다.\n            yield this.enable(chainId);\n            return yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"background-tx\", \"send-tx-to-background\", {\n                chainId,\n                tx,\n                mode,\n            });\n        });\n    }\n    signAmino(chainId, signer, signDoc, signOptions = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                var _a;\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"request-cosmos-sign-amino\", {\n                    chainId,\n                    signer,\n                    signDoc,\n                    signOptions: (0, deepmerge_1.default)((_a = this.defaultOptions.sign) !== null && _a !== void 0 ? _a : {}, signOptions),\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    signDirect(chainId, signer, signDoc, signOptions = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                var _a;\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"request-cosmos-sign-direct\", {\n                    chainId,\n                    signer,\n                    signDoc: {\n                        bodyBytes: signDoc.bodyBytes,\n                        authInfoBytes: signDoc.authInfoBytes,\n                        chainId: signDoc.chainId,\n                        accountNumber: signDoc.accountNumber\n                            ? signDoc.accountNumber.toString()\n                            : null,\n                    },\n                    signOptions: (0, deepmerge_1.default)((_a = this.defaultOptions.sign) !== null && _a !== void 0 ? _a : {}, signOptions),\n                })\n                    .then((r) => resolve({\n                    signed: {\n                        bodyBytes: r.signed.bodyBytes,\n                        authInfoBytes: r.signed.authInfoBytes,\n                        chainId: r.signed.chainId,\n                        accountNumber: long_1.default.fromString(r.signed.accountNumber),\n                    },\n                    signature: r.signature,\n                }))\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    signDirectAux(chainId, signer, signDoc, signOptions = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                var _a;\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"request-cosmos-sign-direct-aux\", {\n                    chainId,\n                    signer,\n                    signDoc: {\n                        bodyBytes: signDoc.bodyBytes,\n                        publicKey: signDoc.publicKey,\n                        chainId: signDoc.chainId,\n                        accountNumber: signDoc.accountNumber\n                            ? signDoc.accountNumber.toString()\n                            : null,\n                        sequence: signDoc.sequence ? signDoc.sequence.toString() : null,\n                    },\n                    signOptions: (0, deepmerge_1.default)({\n                        preferNoSetMemo: (_a = this.defaultOptions.sign) === null || _a === void 0 ? void 0 : _a.preferNoSetMemo,\n                    }, signOptions),\n                })\n                    .then((r) => resolve({\n                    signed: {\n                        bodyBytes: r.signed.bodyBytes,\n                        publicKey: r.signed.publicKey,\n                        chainId: r.signed.chainId,\n                        accountNumber: long_1.default.fromString(r.signed.accountNumber),\n                        sequence: long_1.default.fromString(r.signed.sequence),\n                    },\n                    signature: r.signature,\n                }))\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    signArbitrary(chainId, signer, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"request-cosmos-sign-amino-adr-36\", {\n                    chainId,\n                    signer,\n                    data: typeof data === \"string\" ? buffer_1.Buffer.from(data) : data,\n                    signOptions: {\n                        isADR36WithString: typeof data === \"string\",\n                    },\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    verifyArbitrary(chainId, signer, data, signature) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof data === \"string\") {\n                data = buffer_1.Buffer.from(data);\n            }\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"verify-cosmos-sign-amino-adr-36\", {\n                    chainId,\n                    signer,\n                    data,\n                    signature,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    signEthereum(chainId, signer, message, signType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-ethereum\", \"request-sign-ethereum\", {\n                    chainId,\n                    signer,\n                    message: typeof message === \"string\" ? buffer_1.Buffer.from(message) : message,\n                    signType,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    signICNSAdr36(chainId, contractAddress, owner, username, addressChainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"request-icns-adr-36-signatures-v2\", {\n                    chainId,\n                    contractAddress,\n                    owner,\n                    username,\n                    addressChainIds,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    getOfflineSigner(chainId, signOptions) {\n        return new cosmjs_1.CosmJSOfflineSigner(chainId, this, signOptions);\n    }\n    getOfflineSignerOnlyAmino(chainId, signOptions) {\n        return new cosmjs_1.CosmJSOfflineSignerOnlyAmino(chainId, this, signOptions);\n    }\n    getOfflineSignerAuto(chainId, signOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = yield this.getKey(chainId);\n            if (key.isNanoLedger) {\n                return new cosmjs_1.CosmJSOfflineSignerOnlyAmino(chainId, this, signOptions);\n            }\n            return new cosmjs_1.CosmJSOfflineSigner(chainId, this, signOptions);\n        });\n    }\n    suggestToken(chainId, contractAddress, viewingKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"token-cw20\", \"SuggestTokenMsg\", {\n                    chainId,\n                    contractAddress,\n                    viewingKey,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    getSecret20ViewingKey(chainId, contractAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"token-cw20\", \"get-secret20-viewing-key\", {\n                    chainId,\n                    contractAddress,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    getEnigmaPubKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"secret-wasm\", \"get-pubkey-msg\", {\n                    chainId,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    getEnigmaTxEncryptionKey(chainId, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"secret-wasm\", \"get-tx-encryption-key-msg\", {\n                    chainId,\n                    nonce,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    enigmaEncrypt(chainId, contractCodeHash, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"secret-wasm\", \"request-encrypt-msg\", {\n                    chainId,\n                    contractCodeHash,\n                    msg,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    enigmaDecrypt(chainId, cipherText, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!cipherText || cipherText.length === 0) {\n                return new Uint8Array();\n            }\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"secret-wasm\", \"request-decrypt-msg\", {\n                    chainId,\n                    cipherText,\n                    nonce,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    getEnigmaUtils(chainId) {\n        if (this.enigmaUtils.has(chainId)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return this.enigmaUtils.get(chainId);\n        }\n        const enigmaUtils = new enigma_1.KeplrEnigmaUtils(chainId, this);\n        this.enigmaUtils.set(chainId, enigmaUtils);\n        return enigmaUtils;\n    }\n    experimentalSignEIP712CosmosTx_v0(chainId, signer, eip712, signDoc, signOptions = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                var _a;\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"request-sign-eip-712-cosmos-tx-v0\", {\n                    chainId,\n                    signer,\n                    eip712,\n                    signDoc,\n                    signOptions: (0, deepmerge_1.default)((_a = this.defaultOptions.sign) !== null && _a !== void 0 ? _a : {}, signOptions),\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    __core__getAnalyticsId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"analytics\", \"get-analytics-id\", {});\n        });\n    }\n    changeKeyRingName({ defaultName, editable = true, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-v2\", \"change-keyring-name-interactive\", {\n                    defaultName,\n                    editable,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    __core__privilageSignAminoWithdrawRewards(chainId, signer, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"PrivilegeCosmosSignAminoWithdrawRewards\", {\n                chainId,\n                signer,\n                signDoc,\n            });\n        });\n    }\n    __core__privilageSignAminoDelegate(chainId, signer, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-cosmos\", \"PrivilegeCosmosSignAminoDelegate\", {\n                chainId,\n                signer,\n                signDoc,\n            });\n        });\n    }\n    sendEthereumTx(chainId, tx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // XXX: 원래 enable을 미리하지 않아도 백그라운드에서 알아서 처리해주는 시스템이였는데...\n            //      side panel에서는 불가능하기 때문에 이젠 provider에서 permission도 관리해줘야한다...\n            //      sendTx의 경우는 일종의 쿼리이기 때문에 언제 결과가 올지 알 수 없다. 그러므로 미리 권한 처리를 해야한다.\n            yield this.enable(chainId);\n            return yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"background-tx-ethereum\", \"send-ethereum-tx-to-background\", {\n                chainId,\n                tx,\n            });\n        });\n    }\n    suggestERC20(chainId, contractAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"token-erc20\", \"SuggestERC20TokenMsg\", {\n                    chainId,\n                    contractAddress,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    __core__webpageClosed() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"interaction\", \"injected-webpage-closed\", {});\n        });\n    }\n    getStarknetKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-starknet\", \"get-starknet-key\", {\n                    chainId,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    getStarknetKeysSettled(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-starknet\", \"get-starknet-keys-settled\", {\n                    chainIds,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    signStarknetTx(chainId, transactions, details) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-starknet\", \"request-sign-starknet-tx\", {\n                    chainId,\n                    transactions,\n                    details,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    signStarknetDeployAccountTransaction(chainId, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-starknet\", \"request-sign-starknet-deploy-account-tx\", {\n                    chainId,\n                    transaction,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.protectedTryOpenSidePanelIfEnabled();\n                    }\n                });\n            });\n        });\n    }\n    // IMPORTANT: protected로 시작하는 method는 InjectedKeplr.startProxy()에서 injected 쪽에서 event system으로도 호출할 수 없도록 막혀있다.\n    //            protected로 시작하지 않는 method는 injected keplr에 없어도 event system을 통하면 호출 할 수 있다.\n    //            이를 막기 위해서 method 이름을 protected로 시작하게 한다.\n    protectedTryOpenSidePanelIfEnabled(ignoreGestureFailure = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let isInContentScript = false;\n            // 이 provider가 content script 위에서 동작하고 있는지 아닌지 구분해야한다.\n            // content script일때만 side panel을 열도록 시도해볼 가치가 있다.\n            // 근데 js 자체적으로 api등을 통해서는 이를 알아낼 방법이 없다.\n            // extension 상에서 content script에서 keplr provider proxy를 시작하기 전에 window에 밑의 field를 알아서 주입하는 방식으로 처리한다.\n            if (typeof window !== \"undefined\" &&\n                window.__keplr_content_script === true) {\n                isInContentScript = true;\n            }\n            if (isInContentScript) {\n                const isEnabled = yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"side-panel\", \"GetSidePanelEnabledMsg\", {});\n                if (isEnabled.enabled) {\n                    try {\n                        // IMPORTANT: \"tryOpenSidePanelIfEnabled\"는 다른 msg system과 아예 분리되어있고 다르게 동작한다.\n                        //            router-extension package의 src/router/extension.ts에 있는 주석을 참고할 것.\n                        return yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"router-extension/src/router/extension.ts\", \"tryOpenSidePanelIfEnabled\", {});\n                    }\n                    catch (e) {\n                        console.log(e);\n                        if (!ignoreGestureFailure &&\n                            e.message &&\n                            e.message.includes(\"in response to a user gesture\")) {\n                            if (!document.getElementById(\"__open_keplr_side_panel__\")) {\n                                const sidePanelPing = yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"interaction\", \"ping-content-script-tab-has-opened-side-panel\", {});\n                                // 유저가 직접 side panel을 이미 열어논 상태일 수 있다.\n                                // 이 경우는 무시하도록 한다.\n                                if (sidePanelPing) {\n                                    return;\n                                }\n                                const isKeplrLocked = yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring\", \"GetIsLockedMsg\", {});\n                                const keplrThemeOption = yield (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"settings\", \"GetThemeOptionMsg\", {});\n                                // extension에서 `web_accessible_resources`에 추가된 파일은 이렇게 접근이 가능함\n                                const fontUrl = chrome.runtime.getURL(\"/assets/Inter-SemiBold.ttf\");\n                                const fontFaceAndKeyFrames = `\n                @font-face {\n                  font-family: 'Inter-SemiBold-Keplr';\n                  src: url('${fontUrl}') format('truetype');\n                  font-weight: 600;\n                  font-style: normal;\n                }\n\n                @keyframes slide-left {\n                  0% {\n                    transform: translateY(0%) translateX(100%);\n                  }\n                  100% {\n                    transform: translateY(0%) translateX(0);\n                  }\n                }\n                    \n                @keyframes tada {\n                  0% {\n                    transform: scale3d(1, 1, 1);\n                  }\n                  10%, 20% {\n                    transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);\n                  }\n                  30%, 50%, 70%, 90% {\n                    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);\n                  }\n                  40%, 60%, 80% {\n                    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);\n                  }\n                  100% {\n                    transform: scale3d(1, 1, 1);\n                  }\n                }\n                  \n            `;\n                                const isLightMode = keplrThemeOption === \"auto\"\n                                    ? !window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n                                    : keplrThemeOption === \"light\";\n                                // 폰트와 애니메이션을 위한 스타일 요소를 head에 추가\n                                const styleElement = document.createElement(\"style\");\n                                styleElement.appendChild(document.createTextNode(fontFaceAndKeyFrames));\n                                document.head.appendChild(styleElement);\n                                const button = document.createElement(\"div\");\n                                button.id = \"__open_keplr_side_panel__\";\n                                button.style.boxSizing = \"border-box\";\n                                button.style.animation = \"slide-left 0.5s forwards\";\n                                button.style.position = \"fixed\";\n                                button.style.right = \"1.5rem\";\n                                button.style.top = \"1.5rem\";\n                                button.style.padding = \"1rem 1.75rem 1rem 0.75rem\";\n                                button.style.zIndex = \"2147483647\"; // 페이지 상의 다른 요소보다 버튼이 위에 오도록 함\n                                button.style.borderRadius = \"1rem\";\n                                button.style.display = \"flex\";\n                                button.style.alignItems = \"center\";\n                                button.style.fontFamily = \"Inter-SemiBold-Keplr\";\n                                button.style.fontWeight = \"600\";\n                                // button.style.cursor = \"pointer\";\n                                button.style.background = isLightMode ? \"#FEFEFE\" : \"#1D1D1F\";\n                                // if (isLightMode) {\n                                //   button.style.boxShadow =\n                                //     \"0px 0px 15.5px 0px rgba(0, 0, 0, 0.20)\";\n                                // }\n                                // button.addEventListener(\"mouseover\", () => {\n                                //   button.style.background = isLightMode ? \"#F2F2F6\" : \"#242428\";\n                                // });\n                                // button.addEventListener(\"mouseout\", () => {\n                                //   button.style.background = isLightMode ? \"#FEFEFE\" : \"#1D1D1F\";\n                                // });\n                                // const megaphoneWrapper = document.createElement(\"div\");\n                                // megaphoneWrapper.style.boxSizing = \"border-box\";\n                                // megaphoneWrapper.style.display = \"flex\";\n                                // megaphoneWrapper.style.position = \"absolute\";\n                                // megaphoneWrapper.style.left = \"-10px\";\n                                // megaphoneWrapper.style.top = \"-10px\";\n                                // megaphoneWrapper.style.padding = \"6.5px 6px 5.5px\";\n                                // megaphoneWrapper.style.borderRadius = \"255px\";\n                                // megaphoneWrapper.style.background = \"#FC8441\";\n                                //\n                                // const megaphone = document.createElement(\"img\");\n                                // const megaphoneUrl = chrome.runtime.getURL(\n                                //   \"/assets/megaphone.svg\"\n                                // );\n                                // megaphone.src = megaphoneUrl;\n                                // megaphone.style.width = \"1.25rem\";\n                                // megaphone.style.height = \"1.25rem\";\n                                // megaphone.style.animation = \"tada 1s infinite\";\n                                // megaphoneWrapper.appendChild(megaphone);\n                                const arrowTop = document.createElement(\"div\");\n                                arrowTop.style.boxSizing = \"border-box\";\n                                arrowTop.style.transform = \"translateY(-0.65rem)\";\n                                arrowTop.style.marginRight = \"0.35rem\";\n                                arrowTop.innerHTML = `\n                <svg width=\"31\" height=\"31\" viewBox=\"0 0 31 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M30 29.7522C25.1484 31.0691 16.7109 27.1184 18.6093 18.3391C20.5078 9.55979 25.5703 11.5351 26.414 12.852C27.2578 14.1689 28.3125 22.2898 15.8672 19.2171C5.9109 16.7589 7.15625 6.04811 8 1M8 1L14 8M8 1L1 7.5\" stroke=\"${isLightMode ? \"#2C4BE2\" : \"#72747B\"}\"/>\n                </svg>\n              `;\n                                const keplrLogoWrap = document.createElement(\"div\");\n                                keplrLogoWrap.style.boxSizing = \"border-box\";\n                                keplrLogoWrap.style.position = \"relative\";\n                                keplrLogoWrap.style.marginRight = \"1rem\";\n                                const keplrLogo = document.createElement(\"img\");\n                                const keplrLogoUrl = chrome.runtime.getURL(`/assets/${isKeplrLocked ? \"locked-keplr-logo\" : \"icon\"}-128.png`);\n                                keplrLogo.src = keplrLogoUrl;\n                                keplrLogo.style.boxSizing = \"border-box\";\n                                keplrLogo.style.width = \"3rem\";\n                                keplrLogo.style.height = \"3rem\";\n                                keplrLogoWrap.appendChild(keplrLogo);\n                                const logoClickCursor = document.createElement(\"img\");\n                                const logoClickCursorUrl = chrome.runtime.getURL(\"assets/icon-click-cursor.png\");\n                                logoClickCursor.src = logoClickCursorUrl;\n                                logoClickCursor.style.boxSizing = \"border-box\";\n                                logoClickCursor.style.position = \"absolute\";\n                                logoClickCursor.style.right = \"-0.2rem\";\n                                logoClickCursor.style.bottom = \"-0.2rem\";\n                                logoClickCursor.style.aspectRatio = \"78/98\";\n                                logoClickCursor.style.height = \"1.375rem\";\n                                keplrLogoWrap.appendChild(logoClickCursor);\n                                const mainText = document.createElement(\"span\");\n                                mainText.style.boxSizing = \"border-box\";\n                                // mainText.style.maxWidth = \"9.125rem\";\n                                mainText.style.fontSize = \"1rem\";\n                                mainText.style.color = isLightMode ? \"#020202\" : \"#FEFEFE\";\n                                mainText.textContent = isKeplrLocked\n                                    ? \"Unlock Keplr to proceed\"\n                                    : \"Open Keplr to approve request(s)\";\n                                // const arrowLeftOpenWrapper = document.createElement(\"div\");\n                                // arrowLeftOpenWrapper.style.boxSizing = \"border-box\";\n                                // arrowLeftOpenWrapper.style.display = \"flex\";\n                                // arrowLeftOpenWrapper.style.alignItems = \"center\";\n                                // arrowLeftOpenWrapper.style.padding = \"0.5rem 0.75rem\";\n                                //\n                                // arrowLeftOpenWrapper.innerHTML = `\n                                // <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                //   <path d=\"M13 5L6.25 11.75L13 18.5\" stroke=${\n                                //     isLightMode ? \"#1633C0\" : \"#566FEC\"\n                                //   } stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                                //   <path d=\"M19.3333 5L12.5833 11.75L19.3333 18.5\" stroke=${\n                                //     isLightMode ? \"#1633C0\" : \"#566FEC\"\n                                //   }  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                                // </svg>`;\n                                //\n                                // const openText = document.createElement(\"span\");\n                                // openText.style.boxSizing = \"border-box\";\n                                // openText.style.fontSize = \"1rem\";\n                                // openText.style.color = isLightMode ? \"#1633C0\" : \"#566FEC\";\n                                // openText.textContent = \"OPEN\";\n                                //\n                                // arrowLeftOpenWrapper.appendChild(openText);\n                                // button.appendChild(megaphoneWrapper);\n                                button.appendChild(arrowTop);\n                                button.appendChild(keplrLogoWrap);\n                                button.appendChild(mainText);\n                                // button.appendChild(arrowLeftOpenWrapper);\n                                // 버튼을 추가하기 전에 한 번 더 이미 추가된 버튼이 있는지 확인\n                                const hasAlready = document.getElementById(\"__open_keplr_side_panel__\");\n                                if (!hasAlready) {\n                                    let removed = false;\n                                    // 유저가 이 button이 아니라 다른 방식(직접 작업줄의 아이콘을 눌러서 등등)으로 side panel을 열수도 있다.\n                                    // 이 경우를 감지해서 side panel이 열렸으면 자동으로 이 버튼이 삭제되도록 한다.\n                                    const intervalId = setInterval(() => {\n                                        (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"interaction\", \"ping-content-script-tab-has-opened-side-panel\", {}).then((sidePanelPing) => {\n                                            if (sidePanelPing) {\n                                                clearInterval(intervalId);\n                                                if (!removed) {\n                                                    button.remove();\n                                                    removed = true;\n                                                }\n                                            }\n                                        });\n                                    }, 300);\n                                    // 버튼을 body에 추가\n                                    document.body.appendChild(button);\n                                    // XXX: 현재 크롬의 버그로 인해서 밑의 코드가 동작할 수 없기 때문에 일단 주석처리한다.\n                                    // 버튼 클릭 이벤트 추가 (필요한 동작을 정의)\n                                    // button.addEventListener(\"click\", () => {\n                                    //   this.protectedTryOpenSidePanelIfEnabled(true);\n                                    //\n                                    //   clearInterval(intervalId);\n                                    //   if (!removed) {\n                                    //     button.remove();\n                                    //     removed = true;\n                                    //   }\n                                    // });\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n}\nexports.Keplr = Keplr;\n// IMPORTANT: 사이드 패널을 열어야하는 JSON-RPC 메소드들이 생길 때마다 여기에 추가해야한다.\nconst sidePanelOpenNeededJSONRPCMethods = [\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"wallet_addEthereumChain\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_watchAsset\",\n];\nclass EthereumProvider extends events_1.default {\n    constructor(keplr, requester) {\n        super();\n        this.keplr = keplr;\n        this.requester = requester;\n        this.chainId = null;\n        this.selectedAddress = null;\n        this.networkVersion = null;\n        this.isKeplr = true;\n        this.isMetaMask = true;\n    }\n    protectedEnableAccess() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"permission-interactive\", \"enable-access-for-evm\", {})\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.keplr.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    isConnected() {\n        return true;\n    }\n    request({ method, params, providerId, chainId, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof method !== \"string\") {\n                throw new Error(\"Invalid paramater: `method` must be a string\");\n            }\n            // XXX: 원래 enable을 미리하지 않아도 백그라운드에서 알아서 처리해주는 시스템이였는데...\n            //      side panel에서는 불가능하기 때문에 이젠 provider에서 permission도 관리해줘야한다...\n            //      request의 경우는 일종의 쿼리이기 때문에 언제 결과가 올지 알 수 없다. 그러므로 미리 권한 처리를 해야한다.\n            if (method !== \"keplr_initProviderState\") {\n                yield this.protectedEnableAccess();\n            }\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-ethereum\", \"request-json-rpc-to-evm\", {\n                    method,\n                    params,\n                    providerId,\n                    chainId,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f && sidePanelOpenNeededJSONRPCMethods.includes(method)) {\n                        this.keplr.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    /**\n     * Legacy methods\n     */\n    enable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.request({ method: \"eth_requestAccounts\" });\n        });\n    }\n    net_version() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.request({ method: \"net_version\" });\n        });\n    }\n}\n// IMPORTANT: 사이드 패널을 열어야하는 JSON-RPC 메소드들이 생길 때마다 여기에 추가해야한다.\nconst sidePanelOpenNeededStarknetJSONRPCMethods = [\n    \"wallet_watchAsset\",\n    \"wallet_switchStarknetChain\",\n    \"wallet_addInvokeTransaction\",\n    \"wallet_addDeclareTransaction\",\n    \"wallet_signTypedData\",\n];\nclass StarknetProvider {\n    constructor(keplr, requester) {\n        this.keplr = keplr;\n        this.requester = requester;\n        this.id = \"\";\n        this.name = \"\";\n        this.version = \"\";\n        this.icon = \"\";\n        this.isConnected = false;\n    }\n    protectedEnableAccess() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"permission-interactive\", \"enable-access-for-starknet\", {})\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f) {\n                        this.keplr.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    request({ type, params, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof type !== \"string\") {\n                throw new Error(\"Invalid parameter: `type` must be a string\");\n            }\n            // XXX: 원래 enable을 미리하지 않아도 백그라운드에서 알아서 처리해주는 시스템이였는데...\n            //      side panel에서는 불가능하기 때문에 이젠 provider에서 permission도 관리해줘야한다...\n            //      request의 경우는 일종의 쿼리이기 때문에 언제 결과가 올지 알 수 없다. 그러므로 미리 권한 처리를 해야한다.\n            let skipEnable = false;\n            if (type === \"keplr_initStarknetProviderState\") {\n                skipEnable = true;\n            }\n            if (type === \"wallet_getPermissions\") {\n                skipEnable = true;\n            }\n            if (type === \"wallet_requestAccounts\") {\n                if (!Array.isArray(params) && (params === null || params === void 0 ? void 0 : params[\"silent_mode\"])) {\n                    skipEnable = true;\n                }\n            }\n            if (!skipEnable) {\n                yield this.protectedEnableAccess();\n            }\n            return new Promise((resolve, reject) => {\n                let f = false;\n                (0, router_1.sendSimpleMessage)(this.requester, router_1.BACKGROUND_PORT, \"keyring-starknet\", \"request-json-rpc-to-starknet\", {\n                    // 메시지에서 type이라는 변수가 쓰이기 때문에 method로 변경한다.\n                    method: type,\n                    params,\n                })\n                    .then(resolve)\n                    .catch(reject)\n                    .finally(() => (f = true));\n                setTimeout(() => {\n                    if (!f && sidePanelOpenNeededStarknetJSONRPCMethods.includes(type)) {\n                        this.keplr.protectedTryOpenSidePanelIfEnabled();\n                    }\n                }, 100);\n            });\n        });\n    }\n    enable(_options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error(\"Method not implemented.\");\n        });\n    }\n    isPreauthorized() {\n        throw new Error(\"Method not implemented.\");\n    }\n    on(_event, _handleEvent) {\n        throw new Error(\"Method not implemented.\");\n    }\n    off(_event, _handleEvent) {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n//# sourceMappingURL=core.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/build/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/build/cosmjs.js":
/*!*************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/build/cosmjs.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CosmJSOfflineSigner = exports.CosmJSOfflineSignerOnlyAmino = void 0;\nclass CosmJSOfflineSignerOnlyAmino {\n    constructor(chainId, keplr, signOptions) {\n        this.chainId = chainId;\n        this.keplr = keplr;\n        this.signOptions = signOptions;\n    }\n    getAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = yield this.keplr.getKey(this.chainId);\n            return [\n                {\n                    address: key.bech32Address,\n                    // Currently, only secp256k1 is supported.\n                    algo: \"secp256k1\",\n                    pubkey: key.pubKey,\n                },\n            ];\n        });\n    }\n    signAmino(signerAddress, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.chainId !== signDoc.chain_id) {\n                throw new Error(\"Unmatched chain id with the offline signer\");\n            }\n            const key = yield this.keplr.getKey(signDoc.chain_id);\n            if (key.bech32Address !== signerAddress) {\n                throw new Error(\"Unknown signer address\");\n            }\n            return yield this.keplr.signAmino(this.chainId, signerAddress, signDoc, this.signOptions);\n        });\n    }\n    // Fallback function for the legacy cosmjs implementation before the stargate.\n    sign(signerAddress, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.signAmino(signerAddress, signDoc);\n        });\n    }\n}\nexports.CosmJSOfflineSignerOnlyAmino = CosmJSOfflineSignerOnlyAmino;\nclass CosmJSOfflineSigner extends CosmJSOfflineSignerOnlyAmino {\n    constructor(chainId, keplr, signOptions) {\n        super(chainId, keplr, signOptions);\n    }\n    signDirect(signerAddress, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.chainId !== signDoc.chainId) {\n                throw new Error(\"Unmatched chain id with the offline signer\");\n            }\n            const key = yield this.keplr.getKey(signDoc.chainId);\n            if (key.bech32Address !== signerAddress) {\n                throw new Error(\"Unknown signer address\");\n            }\n            return yield this.keplr.signDirect(this.chainId, signerAddress, signDoc, this.signOptions);\n        });\n    }\n}\nexports.CosmJSOfflineSigner = CosmJSOfflineSigner;\n//# sourceMappingURL=cosmjs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9idWlsZC9jb3NtanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLG9DQUFvQztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlclxcYnVpbGRcXGNvc21qcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db3NtSlNPZmZsaW5lU2lnbmVyID0gZXhwb3J0cy5Db3NtSlNPZmZsaW5lU2lnbmVyT25seUFtaW5vID0gdm9pZCAwO1xuY2xhc3MgQ29zbUpTT2ZmbGluZVNpZ25lck9ubHlBbWlubyB7XG4gICAgY29uc3RydWN0b3IoY2hhaW5JZCwga2VwbHIsIHNpZ25PcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgIHRoaXMua2VwbHIgPSBrZXBscjtcbiAgICAgICAgdGhpcy5zaWduT3B0aW9ucyA9IHNpZ25PcHRpb25zO1xuICAgIH1cbiAgICBnZXRBY2NvdW50cygpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHlpZWxkIHRoaXMua2VwbHIuZ2V0S2V5KHRoaXMuY2hhaW5JZCk7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczoga2V5LmJlY2gzMkFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIC8vIEN1cnJlbnRseSwgb25seSBzZWNwMjU2azEgaXMgc3VwcG9ydGVkLlxuICAgICAgICAgICAgICAgICAgICBhbGdvOiBcInNlY3AyNTZrMVwiLFxuICAgICAgICAgICAgICAgICAgICBwdWJrZXk6IGtleS5wdWJLZXksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaWduQW1pbm8oc2lnbmVyQWRkcmVzcywgc2lnbkRvYykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhaW5JZCAhPT0gc2lnbkRvYy5jaGFpbl9pZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVubWF0Y2hlZCBjaGFpbiBpZCB3aXRoIHRoZSBvZmZsaW5lIHNpZ25lclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHlpZWxkIHRoaXMua2VwbHIuZ2V0S2V5KHNpZ25Eb2MuY2hhaW5faWQpO1xuICAgICAgICAgICAgaWYgKGtleS5iZWNoMzJBZGRyZXNzICE9PSBzaWduZXJBZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBzaWduZXIgYWRkcmVzc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmtlcGxyLnNpZ25BbWlubyh0aGlzLmNoYWluSWQsIHNpZ25lckFkZHJlc3MsIHNpZ25Eb2MsIHRoaXMuc2lnbk9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gRmFsbGJhY2sgZnVuY3Rpb24gZm9yIHRoZSBsZWdhY3kgY29zbWpzIGltcGxlbWVudGF0aW9uIGJlZm9yZSB0aGUgc3RhcmdhdGUuXG4gICAgc2lnbihzaWduZXJBZGRyZXNzLCBzaWduRG9jKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5zaWduQW1pbm8oc2lnbmVyQWRkcmVzcywgc2lnbkRvYyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29zbUpTT2ZmbGluZVNpZ25lck9ubHlBbWlubyA9IENvc21KU09mZmxpbmVTaWduZXJPbmx5QW1pbm87XG5jbGFzcyBDb3NtSlNPZmZsaW5lU2lnbmVyIGV4dGVuZHMgQ29zbUpTT2ZmbGluZVNpZ25lck9ubHlBbWlubyB7XG4gICAgY29uc3RydWN0b3IoY2hhaW5JZCwga2VwbHIsIHNpZ25PcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNoYWluSWQsIGtlcGxyLCBzaWduT3B0aW9ucyk7XG4gICAgfVxuICAgIHNpZ25EaXJlY3Qoc2lnbmVyQWRkcmVzcywgc2lnbkRvYykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhaW5JZCAhPT0gc2lnbkRvYy5jaGFpbklkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5tYXRjaGVkIGNoYWluIGlkIHdpdGggdGhlIG9mZmxpbmUgc2lnbmVyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qga2V5ID0geWllbGQgdGhpcy5rZXBsci5nZXRLZXkoc2lnbkRvYy5jaGFpbklkKTtcbiAgICAgICAgICAgIGlmIChrZXkuYmVjaDMyQWRkcmVzcyAhPT0gc2lnbmVyQWRkcmVzcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gc2lnbmVyIGFkZHJlc3NcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5rZXBsci5zaWduRGlyZWN0KHRoaXMuY2hhaW5JZCwgc2lnbmVyQWRkcmVzcywgc2lnbkRvYywgdGhpcy5zaWduT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29zbUpTT2ZmbGluZVNpZ25lciA9IENvc21KU09mZmxpbmVTaWduZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3NtanMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/build/cosmjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/build/enigma.js":
/*!*************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/build/enigma.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KeplrEnigmaUtils = void 0;\n/**\n * KeplrEnigmaUtils duplicates the public methods that are supported on secretjs's EnigmaUtils class.\n */\nclass KeplrEnigmaUtils {\n    constructor(chainId, keplr) {\n        this.chainId = chainId;\n        this.keplr = keplr;\n    }\n    getPubkey() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.keplr.getEnigmaPubKey(this.chainId);\n        });\n    }\n    getTxEncryptionKey(nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.keplr.getEnigmaTxEncryptionKey(this.chainId, nonce);\n        });\n    }\n    encrypt(contractCodeHash, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.keplr.enigmaEncrypt(this.chainId, contractCodeHash, msg);\n        });\n    }\n    decrypt(ciphertext, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.keplr.enigmaDecrypt(this.chainId, ciphertext, nonce);\n        });\n    }\n}\nexports.KeplrEnigmaUtils = KeplrEnigmaUtils;\n//# sourceMappingURL=enigma.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9idWlsZC9lbmlnbWEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlclxcYnVpbGRcXGVuaWdtYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LZXBsckVuaWdtYVV0aWxzID0gdm9pZCAwO1xuLyoqXG4gKiBLZXBsckVuaWdtYVV0aWxzIGR1cGxpY2F0ZXMgdGhlIHB1YmxpYyBtZXRob2RzIHRoYXQgYXJlIHN1cHBvcnRlZCBvbiBzZWNyZXRqcydzIEVuaWdtYVV0aWxzIGNsYXNzLlxuICovXG5jbGFzcyBLZXBsckVuaWdtYVV0aWxzIHtcbiAgICBjb25zdHJ1Y3RvcihjaGFpbklkLCBrZXBscikge1xuICAgICAgICB0aGlzLmNoYWluSWQgPSBjaGFpbklkO1xuICAgICAgICB0aGlzLmtlcGxyID0ga2VwbHI7XG4gICAgfVxuICAgIGdldFB1YmtleSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmtlcGxyLmdldEVuaWdtYVB1YktleSh0aGlzLmNoYWluSWQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0VHhFbmNyeXB0aW9uS2V5KG5vbmNlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5rZXBsci5nZXRFbmlnbWFUeEVuY3J5cHRpb25LZXkodGhpcy5jaGFpbklkLCBub25jZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbmNyeXB0KGNvbnRyYWN0Q29kZUhhc2gsIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gICAgbXNnKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5rZXBsci5lbmlnbWFFbmNyeXB0KHRoaXMuY2hhaW5JZCwgY29udHJhY3RDb2RlSGFzaCwgbXNnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlY3J5cHQoY2lwaGVydGV4dCwgbm9uY2UpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmtlcGxyLmVuaWdtYURlY3J5cHQodGhpcy5jaGFpbklkLCBjaXBoZXJ0ZXh0LCBub25jZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuS2VwbHJFbmlnbWFVdGlscyA9IEtlcGxyRW5pZ21hVXRpbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmlnbWEuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/build/enigma.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/build/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/build/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./core */ \"(ssr)/./node_modules/@keplr-wallet/provider/build/core.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cosmjs */ \"(ssr)/./node_modules/@keplr-wallet/provider/build/cosmjs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./enigma */ \"(ssr)/./node_modules/@keplr-wallet/provider/build/enigma.js\"), exports);\n__exportStar(__webpack_require__(/*! ./inject */ \"(ssr)/./node_modules/@keplr-wallet/provider/build/inject.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9idWlsZC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMseUVBQVE7QUFDN0IsYUFBYSxtQkFBTyxDQUFDLDZFQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyw2RUFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsNkVBQVU7QUFDL0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyXFxidWlsZFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb3JlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb3NtanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VuaWdtYVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaW5qZWN0XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/build/inject.js":
/*!*************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/build/inject.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InjectedKeplr = exports.injectKeplrToWindow = void 0;\nconst types_1 = __webpack_require__(/*! @keplr-wallet/types */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/index.js\");\nconst router_1 = __webpack_require__(/*! @keplr-wallet/router */ \"(ssr)/./node_modules/@keplr-wallet/router/build/index.js\");\nconst enigma_1 = __webpack_require__(/*! ./enigma */ \"(ssr)/./node_modules/@keplr-wallet/provider/build/enigma.js\");\nconst cosmjs_1 = __webpack_require__(/*! ./cosmjs */ \"(ssr)/./node_modules/@keplr-wallet/provider/build/cosmjs.js\");\nconst deepmerge_1 = __importDefault(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"events\"));\nfunction defineUnwritablePropertyIfPossible(o, p, value) {\n    const descriptor = Object.getOwnPropertyDescriptor(o, p);\n    if (!descriptor || descriptor.writable) {\n        if (!descriptor || descriptor.configurable) {\n            Object.defineProperty(o, p, {\n                value,\n                writable: false,\n            });\n        }\n        else {\n            o[p] = value;\n        }\n    }\n    else {\n        console.warn(`Failed to inject ${p} from keplr. Probably, other wallet is trying to intercept Keplr`);\n    }\n}\nfunction injectKeplrToWindow(keplr) {\n    defineUnwritablePropertyIfPossible(window, \"keplr\", keplr);\n    defineUnwritablePropertyIfPossible(window, \"getOfflineSigner\", keplr.getOfflineSigner);\n    defineUnwritablePropertyIfPossible(window, \"getOfflineSignerOnlyAmino\", keplr.getOfflineSignerOnlyAmino);\n    defineUnwritablePropertyIfPossible(window, \"getOfflineSignerAuto\", keplr.getOfflineSignerAuto);\n    defineUnwritablePropertyIfPossible(window, \"getEnigmaUtils\", keplr.getEnigmaUtils);\n    defineUnwritablePropertyIfPossible(window, \"starknet_keplr\", keplr.starknet);\n}\nexports.injectKeplrToWindow = injectKeplrToWindow;\n/**\n * InjectedKeplr would be injected to the webpage.\n * In the webpage, it can't request any messages to the extension because it doesn't have any API related to the extension.\n * So, to request some methods of the extension, this will proxy the request to the content script that is injected to webpage on the extension level.\n * This will use `window.postMessage` to interact with the content script.\n */\nclass InjectedKeplr {\n    static startProxy(keplr, metaId, eventListener = {\n        addMessageListener: (fn) => window.addEventListener(\"message\", fn),\n        removeMessageListener: (fn) => window.removeEventListener(\"message\", fn),\n        postMessage: (message) => window.postMessage(message, window.location.origin),\n    }, parseMessage) {\n        const proxyRequestType = `proxy-request${metaId ? `-${metaId}` : \"\"}`;\n        const fn = (e) => __awaiter(this, void 0, void 0, function* () {\n            const message = parseMessage\n                ? parseMessage(e.data)\n                : e.data;\n            if (!message ||\n                // \"proxy-request\"는 legacy support를 위한 것임.\n                (message.type !== proxyRequestType && message.type !== \"proxy-request\")) {\n                return;\n            }\n            try {\n                if (!message.id) {\n                    throw new Error(\"Empty id\");\n                }\n                if (message.method.startsWith(\"protected\")) {\n                    throw new Error(\"Rejected\");\n                }\n                if (message.method === \"version\") {\n                    throw new Error(\"Version is not function\");\n                }\n                if (message.method === \"mode\") {\n                    throw new Error(\"Mode is not function\");\n                }\n                if (message.method === \"defaultOptions\") {\n                    throw new Error(\"DefaultOptions is not function\");\n                }\n                if (!keplr[message.method] ||\n                    (message.method !== \"ethereum\" &&\n                        message.method !== \"starknet\" &&\n                        typeof keplr[message.method] !== \"function\")) {\n                    throw new Error(`Invalid method: ${message.method}`);\n                }\n                if (message.method === \"getOfflineSigner\") {\n                    throw new Error(\"GetOfflineSigner method can't be proxy request\");\n                }\n                if (message.method === \"getOfflineSignerOnlyAmino\") {\n                    throw new Error(\"GetOfflineSignerOnlyAmino method can't be proxy request\");\n                }\n                if (message.method === \"getOfflineSignerAuto\") {\n                    throw new Error(\"GetOfflineSignerAuto method can't be proxy request\");\n                }\n                if (message.method === \"getEnigmaUtils\") {\n                    throw new Error(\"GetEnigmaUtils method can't be proxy request\");\n                }\n                const method = message.method;\n                const result = yield (() => __awaiter(this, void 0, void 0, function* () {\n                    var _a;\n                    if (method === \"signDirect\") {\n                        return yield (() => __awaiter(this, void 0, void 0, function* () {\n                            const receivedSignDoc = message.args[2];\n                            const result = yield keplr.signDirect(message.args[0], message.args[1], {\n                                bodyBytes: receivedSignDoc.bodyBytes,\n                                authInfoBytes: receivedSignDoc.authInfoBytes,\n                                chainId: receivedSignDoc.chainId,\n                                accountNumber: receivedSignDoc.accountNumber\n                                    ? long_1.default.fromString(receivedSignDoc.accountNumber)\n                                    : null,\n                            }, message.args[3]);\n                            return {\n                                signed: {\n                                    bodyBytes: result.signed.bodyBytes,\n                                    authInfoBytes: result.signed.authInfoBytes,\n                                    chainId: result.signed.chainId,\n                                    accountNumber: result.signed.accountNumber.toString(),\n                                },\n                                signature: result.signature,\n                            };\n                        }))();\n                    }\n                    if (method === \"signDirectAux\") {\n                        return yield (() => __awaiter(this, void 0, void 0, function* () {\n                            const receivedSignDoc = message.args[2];\n                            const result = yield keplr.signDirectAux(message.args[0], message.args[1], {\n                                bodyBytes: receivedSignDoc.bodyBytes,\n                                publicKey: receivedSignDoc.publicKey,\n                                chainId: receivedSignDoc.chainId,\n                                accountNumber: receivedSignDoc.accountNumber\n                                    ? long_1.default.fromString(receivedSignDoc.accountNumber)\n                                    : null,\n                                sequence: receivedSignDoc.sequence\n                                    ? long_1.default.fromString(receivedSignDoc.sequence)\n                                    : null,\n                            }, message.args[3]);\n                            return {\n                                signed: {\n                                    bodyBytes: result.signed.bodyBytes,\n                                    publicKey: result.signed.publicKey,\n                                    chainId: result.signed.chainId,\n                                    accountNumber: result.signed.accountNumber.toString(),\n                                    sequence: result.signed.sequence.toString(),\n                                },\n                                signature: result.signature,\n                            };\n                        }))();\n                    }\n                    if (method === \"ethereum\") {\n                        const ethereumProviderMethod = message.ethereumProviderMethod;\n                        if (ethereumProviderMethod === null || ethereumProviderMethod === void 0 ? void 0 : ethereumProviderMethod.startsWith(\"protected\")) {\n                            throw new Error(\"Rejected\");\n                        }\n                        if (ethereumProviderMethod === \"chainId\") {\n                            throw new Error(\"chainId is not function\");\n                        }\n                        if (ethereumProviderMethod === \"selectedAddress\") {\n                            throw new Error(\"selectedAddress is not function\");\n                        }\n                        if (ethereumProviderMethod === \"networkVersion\") {\n                            throw new Error(\"networkVersion is not function\");\n                        }\n                        if (ethereumProviderMethod === \"isKeplr\") {\n                            throw new Error(\"isKeplr is not function\");\n                        }\n                        if (ethereumProviderMethod === \"isMetaMask\") {\n                            throw new Error(\"isMetaMask is not function\");\n                        }\n                        if (ethereumProviderMethod === undefined ||\n                            typeof keplr.ethereum[ethereumProviderMethod] !== \"function\") {\n                            throw new Error(`${message.ethereumProviderMethod} is not function or invalid Ethereum provider method`);\n                        }\n                        const messageArgs = router_1.JSONUint8Array.unwrap(message.args);\n                        if (ethereumProviderMethod === \"request\") {\n                            return yield keplr.ethereum.request(typeof messageArgs === \"string\"\n                                ? JSON.parse(messageArgs)\n                                : messageArgs);\n                        }\n                        return yield keplr.ethereum[ethereumProviderMethod](\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        // @ts-ignore\n                        ...(typeof messageArgs === \"string\"\n                            ? JSON.parse(messageArgs)\n                            : messageArgs));\n                    }\n                    if (method === \"starknet\") {\n                        const starknetProviderMethod = message.starknetProviderMethod;\n                        if (starknetProviderMethod === null || starknetProviderMethod === void 0 ? void 0 : starknetProviderMethod.startsWith(\"protected\")) {\n                            throw new Error(\"Rejected\");\n                        }\n                        if (starknetProviderMethod === \"id\") {\n                            throw new Error(\"id is not function\");\n                        }\n                        if (starknetProviderMethod === \"name\") {\n                            throw new Error(\"name is not function\");\n                        }\n                        if (starknetProviderMethod === \"version\") {\n                            throw new Error(\"version is not function\");\n                        }\n                        if (starknetProviderMethod === \"icon\") {\n                            throw new Error(\"icon is not function\");\n                        }\n                        if (starknetProviderMethod === \"chainId\") {\n                            throw new Error(\"chainId is not function\");\n                        }\n                        if (starknetProviderMethod === \"selectedAddress\") {\n                            throw new Error(\"selectedAddress is not function\");\n                        }\n                        if (starknetProviderMethod === \"isConnected\") {\n                            throw new Error(\"isConnected is not function\");\n                        }\n                        if (starknetProviderMethod === \"account\") {\n                            throw new Error(\"account is not function\");\n                        }\n                        if (starknetProviderMethod === \"provider\") {\n                            throw new Error(\"provider is not function\");\n                        }\n                        if (starknetProviderMethod === undefined ||\n                            typeof ((_a = keplr.starknet) === null || _a === void 0 ? void 0 : _a[starknetProviderMethod]) !== \"function\") {\n                            throw new Error(`${message.starknetProviderMethod} is not function or invalid Starknet provider method`);\n                        }\n                        const messageArgs = router_1.JSONUint8Array.unwrap(message.args);\n                        if (starknetProviderMethod === \"request\") {\n                            return yield keplr.starknet.request(typeof messageArgs === \"string\"\n                                ? JSON.parse(messageArgs)\n                                : messageArgs);\n                        }\n                        return yield keplr.starknet[starknetProviderMethod](\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        // @ts-ignore\n                        ...(typeof messageArgs === \"string\"\n                            ? JSON.parse(messageArgs)\n                            : messageArgs));\n                    }\n                    return yield keplr[method](\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    ...router_1.JSONUint8Array.unwrap(message.args));\n                }))();\n                const proxyResponse = {\n                    type: \"proxy-request-response\",\n                    id: message.id,\n                    result: {\n                        return: router_1.JSONUint8Array.wrap(result),\n                    },\n                };\n                eventListener.postMessage(proxyResponse);\n            }\n            catch (e) {\n                const proxyResponse = {\n                    type: \"proxy-request-response\",\n                    id: message.id,\n                    result: {\n                        error: e.code && !e.module\n                            ? {\n                                code: e.code,\n                                message: e.message,\n                                data: e.data,\n                            }\n                            : e.message || e.toString(),\n                    },\n                };\n                eventListener.postMessage(proxyResponse);\n            }\n        });\n        eventListener.addMessageListener(fn);\n        return () => {\n            eventListener.removeMessageListener(fn);\n        };\n    }\n    requestMethod(method, args) {\n        const bytes = new Uint8Array(8);\n        const id = Array.from(crypto.getRandomValues(bytes))\n            .map((value) => {\n            return value.toString(16);\n        })\n            .join(\"\");\n        const proxyRequestType = `proxy-request${this.metaId ? `-${this.metaId}` : \"\"}`;\n        const proxyMessage = {\n            type: proxyRequestType,\n            id,\n            method,\n            args: router_1.JSONUint8Array.wrap(args),\n        };\n        return new Promise((resolve, reject) => {\n            const receiveResponse = (e) => {\n                const proxyResponse = this.parseMessage\n                    ? this.parseMessage(e.data)\n                    : e.data;\n                if (!proxyResponse || proxyResponse.type !== \"proxy-request-response\") {\n                    return;\n                }\n                if (proxyResponse.id !== id) {\n                    return;\n                }\n                this.eventListener.removeMessageListener(receiveResponse);\n                const result = router_1.JSONUint8Array.unwrap(proxyResponse.result);\n                if (!result) {\n                    reject(new Error(\"Result is null\"));\n                    return;\n                }\n                if (result.error) {\n                    reject(new Error(result.error));\n                    return;\n                }\n                resolve(result.return);\n            };\n            this.eventListener.addMessageListener(receiveResponse);\n            this.eventListener.postMessage(proxyMessage);\n        });\n    }\n    constructor(metaId, version, mode, onStarknetStateChange, onStarknetAccountChange, eventListener = {\n        addMessageListener: (fn) => window.addEventListener(\"message\", fn),\n        removeMessageListener: (fn) => window.removeEventListener(\"message\", fn),\n        postMessage: (message) => window.postMessage(message, window.location.origin),\n    }, parseMessage, eip6963ProviderInfo, starknetProviderInfo) {\n        this.metaId = metaId;\n        this.version = version;\n        this.mode = mode;\n        this.onStarknetStateChange = onStarknetStateChange;\n        this.onStarknetAccountChange = onStarknetAccountChange;\n        this.eventListener = eventListener;\n        this.parseMessage = parseMessage;\n        this.eip6963ProviderInfo = eip6963ProviderInfo;\n        this.starknetProviderInfo = starknetProviderInfo;\n        this.enigmaUtils = new Map();\n        this.defaultOptions = {};\n        this.ethereum = new EthereumProvider(this.metaId, () => this, this.eventListener, this.parseMessage, this.eip6963ProviderInfo);\n        this.starknet = this.generateStarknetProvider();\n        // Freeze fields/method except for \"defaultOptions\"\n        // Intentionally, \"defaultOptions\" can be mutated to allow a webpage to change the options with cosmjs usage.\n        // Freeze fields\n        const fieldNames = Object.keys(this);\n        for (const fieldName of fieldNames) {\n            if (fieldName !== \"defaultOptions\") {\n                Object.defineProperty(this, fieldName, {\n                    value: this[fieldName],\n                    writable: false,\n                });\n            }\n            // If field is \"eventListener\", try to iterate one-level deep.\n            if (fieldName === \"eventListener\") {\n                const fieldNames = Object.keys(this.eventListener);\n                for (const fieldName of fieldNames) {\n                    Object.defineProperty(this.eventListener, fieldName, {\n                        value: this.eventListener[fieldName],\n                        writable: false,\n                    });\n                }\n            }\n        }\n        // Freeze methods\n        const methodNames = Object.getOwnPropertyNames(InjectedKeplr.prototype);\n        for (const methodName of methodNames) {\n            if (methodName !== \"constructor\" &&\n                typeof this[methodName] === \"function\") {\n                Object.defineProperty(this, methodName, {\n                    value: this[methodName].bind(this),\n                    writable: false,\n                });\n            }\n        }\n    }\n    ping() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.requestMethod(\"ping\", []);\n        });\n    }\n    enable(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.requestMethod(\"enable\", [chainIds]);\n        });\n    }\n    disable(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.requestMethod(\"disable\", [chainIds]);\n        });\n    }\n    experimentalSuggestChain(chainInfo) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (chainInfo.hideInUI) {\n                throw new Error(\"hideInUI is not allowed\");\n            }\n            if (((_a = chainInfo.features) === null || _a === void 0 ? void 0 : _a.includes(\"stargate\")) ||\n                ((_b = chainInfo.features) === null || _b === void 0 ? void 0 : _b.includes(\"no-legacy-stdTx\"))) {\n                console.warn(\"“stargate”, “no-legacy-stdTx” feature has been deprecated. The launchpad is no longer supported, thus works without the two features. We would keep the aforementioned two feature for a while, but the upcoming update would potentially cause errors. Remove the two feature.\");\n            }\n            yield this.requestMethod(\"experimentalSuggestChain\", [chainInfo]);\n        });\n    }\n    getKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getKey\", [chainId]);\n        });\n    }\n    getKeysSettled(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getKeysSettled\", [chainIds]);\n        });\n    }\n    sendTx(chainId, tx, mode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(\"length\" in tx)) {\n                console.warn(\"Do not send legacy std tx via `sendTx` API. We now only support protobuf tx. The usage of legeacy std tx would throw an error in the near future.\");\n            }\n            return yield this.requestMethod(\"sendTx\", [chainId, tx, mode]);\n        });\n    }\n    signAmino(chainId, signer, signDoc, signOptions = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"signAmino\", [\n                chainId,\n                signer,\n                signDoc,\n                (0, deepmerge_1.default)((_a = this.defaultOptions.sign) !== null && _a !== void 0 ? _a : {}, signOptions),\n            ]);\n        });\n    }\n    signDirect(chainId, signer, signDoc, signOptions = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.requestMethod(\"signDirect\", [\n                chainId,\n                signer,\n                // We can't send the `Long` with remaing the type.\n                // Receiver should change the `string` to `Long`.\n                {\n                    bodyBytes: signDoc.bodyBytes,\n                    authInfoBytes: signDoc.authInfoBytes,\n                    chainId: signDoc.chainId,\n                    accountNumber: signDoc.accountNumber\n                        ? signDoc.accountNumber.toString()\n                        : null,\n                },\n                (0, deepmerge_1.default)((_a = this.defaultOptions.sign) !== null && _a !== void 0 ? _a : {}, signOptions),\n            ]);\n            const signed = result.signed;\n            return {\n                signed: {\n                    bodyBytes: signed.bodyBytes,\n                    authInfoBytes: signed.authInfoBytes,\n                    chainId: signed.chainId,\n                    // We can't send the `Long` with remaing the type.\n                    // Sender should change the `Long` to `string`.\n                    accountNumber: long_1.default.fromString(signed.accountNumber),\n                },\n                signature: result.signature,\n            };\n        });\n    }\n    signDirectAux(chainId, signer, signDoc, signOptions = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.requestMethod(\"signDirectAux\", [\n                chainId,\n                signer,\n                // We can't send the `Long` with remaing the type.\n                // Receiver should change the `string` to `Long`.\n                {\n                    bodyBytes: signDoc.bodyBytes,\n                    publicKey: signDoc.publicKey,\n                    chainId: signDoc.chainId,\n                    accountNumber: signDoc.accountNumber\n                        ? signDoc.accountNumber.toString()\n                        : null,\n                    sequence: signDoc.sequence ? signDoc.sequence.toString() : null,\n                },\n                (0, deepmerge_1.default)({\n                    preferNoSetMemo: (_a = this.defaultOptions.sign) === null || _a === void 0 ? void 0 : _a.preferNoSetMemo,\n                }, signOptions),\n            ]);\n            const signed = result.signed;\n            return {\n                signed: {\n                    bodyBytes: signed.bodyBytes,\n                    publicKey: signed.publicKey || undefined,\n                    chainId: signed.chainId,\n                    // We can't send the `Long` with remaing the type.\n                    // Sender should change the `Long` to `string`.\n                    accountNumber: long_1.default.fromString(signed.accountNumber),\n                    sequence: long_1.default.fromString(signed.sequence),\n                },\n                signature: result.signature,\n            };\n        });\n    }\n    signArbitrary(chainId, signer, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"signArbitrary\", [chainId, signer, data]);\n        });\n    }\n    signICNSAdr36(chainId, contractAddress, owner, username, addressChainIds) {\n        return this.requestMethod(\"signICNSAdr36\", [\n            chainId,\n            contractAddress,\n            owner,\n            username,\n            addressChainIds,\n        ]);\n    }\n    verifyArbitrary(chainId, signer, data, signature) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"verifyArbitrary\", [\n                chainId,\n                signer,\n                data,\n                signature,\n            ]);\n        });\n    }\n    signEthereum(chainId, signer, data, type) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"signEthereum\", [\n                chainId,\n                signer,\n                data,\n                type,\n            ]);\n        });\n    }\n    getOfflineSigner(chainId, signOptions) {\n        return new cosmjs_1.CosmJSOfflineSigner(chainId, this, signOptions);\n    }\n    getOfflineSignerOnlyAmino(chainId, signOptions) {\n        return new cosmjs_1.CosmJSOfflineSignerOnlyAmino(chainId, this, signOptions);\n    }\n    getOfflineSignerAuto(chainId, signOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = yield this.getKey(chainId);\n            if (key.isNanoLedger) {\n                return new cosmjs_1.CosmJSOfflineSignerOnlyAmino(chainId, this, signOptions);\n            }\n            return new cosmjs_1.CosmJSOfflineSigner(chainId, this, signOptions);\n        });\n    }\n    suggestToken(chainId, contractAddress, viewingKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"suggestToken\", [\n                chainId,\n                contractAddress,\n                viewingKey,\n            ]);\n        });\n    }\n    getSecret20ViewingKey(chainId, contractAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getSecret20ViewingKey\", [\n                chainId,\n                contractAddress,\n            ]);\n        });\n    }\n    getEnigmaPubKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getEnigmaPubKey\", [chainId]);\n        });\n    }\n    getEnigmaTxEncryptionKey(chainId, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getEnigmaTxEncryptionKey\", [\n                chainId,\n                nonce,\n            ]);\n        });\n    }\n    enigmaEncrypt(chainId, contractCodeHash, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"enigmaEncrypt\", [\n                chainId,\n                contractCodeHash,\n                msg,\n            ]);\n        });\n    }\n    enigmaDecrypt(chainId, ciphertext, nonce) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"enigmaDecrypt\", [\n                chainId,\n                ciphertext,\n                nonce,\n            ]);\n        });\n    }\n    getEnigmaUtils(chainId) {\n        if (this.enigmaUtils.has(chainId)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return this.enigmaUtils.get(chainId);\n        }\n        const enigmaUtils = new enigma_1.KeplrEnigmaUtils(chainId, this);\n        this.enigmaUtils.set(chainId, enigmaUtils);\n        return enigmaUtils;\n    }\n    experimentalSignEIP712CosmosTx_v0(chainId, signer, eip712, signDoc, signOptions = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"experimentalSignEIP712CosmosTx_v0\", [\n                chainId,\n                signer,\n                eip712,\n                signDoc,\n                (0, deepmerge_1.default)((_a = this.defaultOptions.sign) !== null && _a !== void 0 ? _a : {}, signOptions),\n            ]);\n        });\n    }\n    getChainInfosWithoutEndpoints() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getChainInfosWithoutEndpoints\", []);\n        });\n    }\n    getChainInfoWithoutEndpoints(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getChainInfoWithoutEndpoints\", [chainId]);\n        });\n    }\n    __core__getAnalyticsId() {\n        return this.requestMethod(\"__core__getAnalyticsId\", []);\n    }\n    changeKeyRingName({ defaultName, editable = true, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"changeKeyRingName\", [\n                { defaultName, editable },\n            ]);\n        });\n    }\n    __core__privilageSignAminoWithdrawRewards(chainId, signer, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"__core__privilageSignAminoWithdrawRewards\", [chainId, signer, signDoc]);\n        });\n    }\n    __core__privilageSignAminoDelegate(chainId, signer, signDoc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"__core__privilageSignAminoDelegate\", [\n                chainId,\n                signer,\n                signDoc,\n            ]);\n        });\n    }\n    sendEthereumTx(chainId, tx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"sendEthereumTx\", [chainId, tx]);\n        });\n    }\n    suggestERC20(chainId, contractAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"suggestERC20\", [chainId, contractAddress]);\n        });\n    }\n    __core__webpageClosed() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"__core__webpageClosed\", []);\n        });\n    }\n    getStarknetKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getStarknetKey\", [chainId]);\n        });\n    }\n    getStarknetKeysSettled(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"getStarknetKeysSettled\", [chainIds]);\n        });\n    }\n    signStarknetTx(chainId, transactions, details) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"signStarknetTx\", [\n                chainId,\n                transactions,\n                details,\n            ]);\n        });\n    }\n    signStarknetDeployAccountTransaction(chainId, transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.requestMethod(\"signStarknetDeployAccountTransaction\", [\n                chainId,\n                transaction,\n            ]);\n        });\n    }\n    generateStarknetProvider() {\n        return new StarknetProvider(this.metaId, this.starknetProviderInfo.id, this.starknetProviderInfo.name, this.version, this.starknetProviderInfo.icon, () => this, this.onStarknetStateChange, this.onStarknetAccountChange, this.eventListener, this.parseMessage);\n    }\n}\nexports.InjectedKeplr = InjectedKeplr;\nclass EthereumProvider extends events_1.default {\n    constructor(metaId, injectedKeplr, eventListener = {\n        addMessageListener: (fn) => window.addEventListener(\"message\", fn),\n        removeMessageListener: (fn) => window.removeEventListener(\"message\", fn),\n        postMessage: (message) => window.postMessage(message, window.location.origin),\n    }, parseMessage, eip6963ProviderInfo) {\n        super();\n        this.metaId = metaId;\n        this.injectedKeplr = injectedKeplr;\n        this.eventListener = eventListener;\n        this.parseMessage = parseMessage;\n        this.eip6963ProviderInfo = eip6963ProviderInfo;\n        // It must be in the hexadecimal format used in EVM-based chains, not the format used in Tendermint nodes.\n        this.chainId = null;\n        // It must be in the decimal format of chainId.\n        this.networkVersion = null;\n        this.selectedAddress = null;\n        this.isKeplr = true;\n        this.isMetaMask = true;\n        this._isConnected = false;\n        this._currentChainId = null;\n        this._requestMethod = (method, args) => __awaiter(this, void 0, void 0, function* () {\n            const bytes = new Uint8Array(8);\n            const id = Array.from(crypto.getRandomValues(bytes))\n                .map((value) => {\n                return value.toString(16);\n            })\n                .join(\"\");\n            const proxyRequestType = `proxy-request${this.metaId ? `-${this.metaId}` : \"\"}`;\n            const proxyMessage = {\n                type: proxyRequestType,\n                id,\n                method: \"ethereum\",\n                args: router_1.JSONUint8Array.wrap(args),\n                ethereumProviderMethod: method,\n            };\n            return new Promise((resolve, reject) => {\n                const receiveResponse = (e) => {\n                    const proxyResponse = this.parseMessage\n                        ? this.parseMessage(e.data)\n                        : e.data;\n                    if (!proxyResponse || proxyResponse.type !== \"proxy-request-response\") {\n                        return;\n                    }\n                    if (proxyResponse.id !== id) {\n                        return;\n                    }\n                    this.eventListener.removeMessageListener(receiveResponse);\n                    const result = router_1.JSONUint8Array.unwrap(proxyResponse.result);\n                    if (!result) {\n                        reject(new Error(\"Result is null\"));\n                        return;\n                    }\n                    if (result.error) {\n                        const error = result.error;\n                        reject(error.code && !error.module\n                            ? new router_1.EthereumProviderRpcError(error.code, error.message, error.data)\n                            : new Error(error));\n                        return;\n                    }\n                    resolve(result.return);\n                };\n                this.eventListener.addMessageListener(receiveResponse);\n                this.eventListener.postMessage(proxyMessage);\n            });\n        });\n        this._initProviderState = () => __awaiter(this, void 0, void 0, function* () {\n            const initialProviderState = yield this._requestMethod(\"request\", {\n                method: \"keplr_initProviderState\",\n            });\n            if (initialProviderState) {\n                const { currentEvmChainId, currentChainId, selectedAddress } = initialProviderState;\n                if (currentChainId != null &&\n                    currentEvmChainId != null &&\n                    selectedAddress != null) {\n                    this._handleConnect(currentEvmChainId);\n                    this._handleChainChanged(currentEvmChainId);\n                    this._currentChainId = currentChainId;\n                    this._handleAccountsChanged(selectedAddress);\n                }\n            }\n        });\n        this._handleConnect = (evmChainId) => __awaiter(this, void 0, void 0, function* () {\n            if (!this._isConnected) {\n                this._isConnected = true;\n                const evmChainIdHexString = `0x${evmChainId.toString(16)}`;\n                this.emit(\"connect\", { chainId: evmChainIdHexString });\n            }\n        });\n        this._handleDisconnect = () => __awaiter(this, void 0, void 0, function* () {\n            if (this._isConnected) {\n                yield this._requestMethod(\"request\", {\n                    method: \"keplr_disconnect\",\n                });\n                this._isConnected = false;\n                this.chainId = null;\n                this.selectedAddress = null;\n                this.networkVersion = null;\n                this.emit(\"disconnect\");\n            }\n        });\n        this._handleChainChanged = (evmChainId) => __awaiter(this, void 0, void 0, function* () {\n            const evmChainIdHexString = `0x${evmChainId.toString(16)}`;\n            if (evmChainIdHexString !== this.chainId) {\n                this.chainId = evmChainIdHexString;\n                this.networkVersion = evmChainId.toString(10);\n                this.emit(\"chainChanged\", evmChainIdHexString);\n            }\n        });\n        this._handleAccountsChanged = (selectedAddress) => __awaiter(this, void 0, void 0, function* () {\n            if (this.selectedAddress !== selectedAddress) {\n                this.selectedAddress = selectedAddress;\n                this.emit(\"accountsChanged\", [selectedAddress]);\n            }\n        });\n        this.request = ({ method, params, chainId, }) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (typeof method !== \"string\") {\n                throw new Error(\"Invalid paramater: `method` must be a string\");\n            }\n            if (!this._isConnected) {\n                yield this._initProviderState();\n            }\n            if (method === \"eth_accounts\") {\n                return (this.selectedAddress ? [this.selectedAddress] : []);\n            }\n            return yield this._requestMethod(\"request\", {\n                method,\n                params,\n                providerId: (_a = this.eip6963ProviderInfo) === null || _a === void 0 ? void 0 : _a.uuid,\n                chainId,\n            });\n        });\n        this.enable = () => __awaiter(this, void 0, void 0, function* () {\n            return (yield this.request({\n                method: \"eth_requestAccounts\",\n            }));\n        });\n        this.net_version = () => __awaiter(this, void 0, void 0, function* () {\n            return (yield this.request({\n                method: \"net_version\",\n            }));\n        });\n        this._initProviderState();\n        window.addEventListener(\"keplr_keystorechange\", () => __awaiter(this, void 0, void 0, function* () {\n            if (this._currentChainId) {\n                const chainInfo = yield injectedKeplr().getChainInfoWithoutEndpoints(this._currentChainId);\n                if (chainInfo) {\n                    const selectedAddress = (yield injectedKeplr().getKey(this._currentChainId)).ethereumHexAddress;\n                    this._handleAccountsChanged(selectedAddress);\n                }\n            }\n        }));\n        window.addEventListener(\"keplr_chainChanged\", (event) => {\n            const origin = event.detail.origin;\n            if (origin === window.location.origin) {\n                const evmChainId = event.detail.evmChainId;\n                this._handleChainChanged(evmChainId);\n            }\n        });\n        window.addEventListener(\"keplr_ethSubscription\", (event) => {\n            var _a;\n            const origin = event.detail.origin;\n            const providerId = event.detail.providerId;\n            if (origin === window.location.origin &&\n                providerId === ((_a = this.eip6963ProviderInfo) === null || _a === void 0 ? void 0 : _a.uuid)) {\n                const data = event.detail.data;\n                this.emit(\"message\", {\n                    type: \"eth_subscription\",\n                    data,\n                });\n            }\n        });\n        if (this.eip6963ProviderInfo) {\n            const announceEvent = new CustomEvent(types_1.EIP6963EventNames.Announce, {\n                detail: Object.freeze({\n                    info: this.eip6963ProviderInfo,\n                    provider: this,\n                }),\n            });\n            window.addEventListener(types_1.EIP6963EventNames.Request, () => window.dispatchEvent(announceEvent));\n            window.dispatchEvent(announceEvent);\n        }\n    }\n    isConnected() {\n        return this._isConnected;\n    }\n}\nclass StarknetProvider {\n    constructor(metaId, id, name, version, icon, _injectedKeplr, onStateChange, onAccountChange, _eventListener = {\n        addMessageListener: (fn) => window.addEventListener(\"message\", fn),\n        removeMessageListener: (fn) => window.removeEventListener(\"message\", fn),\n        postMessage: (message) => window.postMessage(message, window.location.origin),\n    }, _parseMessage) {\n        this.metaId = metaId;\n        this.id = id;\n        this.name = name;\n        this.version = version;\n        this.icon = icon;\n        this._injectedKeplr = _injectedKeplr;\n        this.onStateChange = onStateChange;\n        this.onAccountChange = onAccountChange;\n        this._eventListener = _eventListener;\n        this._parseMessage = _parseMessage;\n        this.isConnected = false;\n        // It must be in plain text format not hexadecimal string. e.g. \"SN_MAIN\"\n        this.chainId = undefined;\n        this.selectedAddress = undefined;\n        this.account = undefined;\n        this.provider = undefined;\n        // It must be in the CAIP-2 chain ID format. e.g. \"starknet:SN_MAIN\"\n        this._currentChainId = undefined;\n        this._userWalletEvents = [];\n        this._initProviderState();\n        window.addEventListener(\"keplr_keystorechange\", () => __awaiter(this, void 0, void 0, function* () {\n            if (this._currentChainId) {\n                const selectedAddress = (yield this._injectedKeplr().getStarknetKey(this._currentChainId)).hexAddress;\n                this.selectedAddress = selectedAddress;\n                this.onAccountChange({\n                    selectedAddress,\n                });\n                this._userWalletEvents.forEach((userWalletEvent) => {\n                    if (userWalletEvent.type === \"accountsChanged\") {\n                        userWalletEvent.handler([selectedAddress]);\n                    }\n                });\n            }\n        }));\n        window.addEventListener(\"keplr_starknetChainChanged\", (event) => {\n            const origin = event.detail.origin;\n            const starknetChainId = event.detail.starknetChainId;\n            this.chainId = starknetChainId;\n            if (origin === window.location.origin) {\n                this._userWalletEvents.forEach((userWalletEvent) => {\n                    if (userWalletEvent.type === \"networkChanged\") {\n                        userWalletEvent.handler(starknetChainId);\n                    }\n                });\n            }\n        });\n    }\n    _requestMethod(method, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const bytes = new Uint8Array(8);\n            const id = Array.from(crypto.getRandomValues(bytes))\n                .map((value) => {\n                return value.toString(16);\n            })\n                .join(\"\");\n            const proxyRequestType = `proxy-request${this.metaId ? `-${this.metaId}` : \"\"}`;\n            const proxyMessage = {\n                type: proxyRequestType,\n                id,\n                method: \"starknet\",\n                args: router_1.JSONUint8Array.wrap(args),\n                starknetProviderMethod: method,\n            };\n            return new Promise((resolve, reject) => {\n                const receiveResponse = (e) => {\n                    const proxyResponse = this._parseMessage\n                        ? this._parseMessage(e.data)\n                        : e.data;\n                    if (!proxyResponse || proxyResponse.type !== \"proxy-request-response\") {\n                        return;\n                    }\n                    if (proxyResponse.id !== id) {\n                        return;\n                    }\n                    this._eventListener.removeMessageListener(receiveResponse);\n                    const result = router_1.JSONUint8Array.unwrap(proxyResponse.result);\n                    if (!result) {\n                        reject(new Error(\"Result is null\"));\n                        return;\n                    }\n                    if (result.error) {\n                        const error = result.error;\n                        reject(error.code && !error.module\n                            ? new router_1.EthereumProviderRpcError(error.code, error.message, error.data)\n                            : new Error(error));\n                        return;\n                    }\n                    resolve(result.return);\n                };\n                this._eventListener.addMessageListener(receiveResponse);\n                this._eventListener.postMessage(proxyMessage);\n            });\n        });\n    }\n    _initProviderState() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { currentChainId, selectedAddress, rpc } = yield this.request({\n                type: \"keplr_initStarknetProviderState\",\n            });\n            if (currentChainId != null && selectedAddress != null && rpc != null) {\n                this.onStateChange({\n                    selectedAddress,\n                    chainId: currentChainId,\n                    rpc,\n                });\n                this._currentChainId = currentChainId;\n                this.chainId = currentChainId.replace(\"starknet:\", \"\");\n                this.selectedAddress = selectedAddress;\n                this.isConnected = true;\n            }\n            else {\n                this.onStateChange({\n                    selectedAddress: null,\n                    chainId: null,\n                    rpc: null,\n                });\n            }\n        });\n    }\n    request({ type, params, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof type !== \"string\") {\n                throw new Error(\"Invalid parameter: `type` must be a string\");\n            }\n            return yield this._requestMethod(\"request\", {\n                type,\n                params,\n            });\n        });\n    }\n    enable(_options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { currentChainId, selectedAddress, rpc } = yield this.request({\n                type: \"keplr_enableStarknetProvider\",\n            });\n            this.onStateChange({\n                selectedAddress,\n                chainId: currentChainId,\n                rpc,\n            });\n            this._currentChainId = currentChainId;\n            this.chainId = currentChainId.replace(\"starknet:\", \"\");\n            this.selectedAddress = selectedAddress;\n            this.isConnected = true;\n            return [selectedAddress];\n        });\n    }\n    isPreauthorized() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { currentChainId, selectedAddress } = yield this.request({\n                type: \"keplr_initStarknetProviderState\",\n            });\n            if (currentChainId != null && selectedAddress != null) {\n                return true;\n            }\n            return false;\n        });\n    }\n    on(event, handleEvent) {\n        if (event === \"accountsChanged\") {\n            this._userWalletEvents.push({\n                type: \"accountsChanged\",\n                handler: handleEvent,\n            });\n        }\n        else if (event === \"networkChanged\") {\n            this._userWalletEvents.push({\n                type: \"networkChanged\",\n                handler: handleEvent,\n            });\n        }\n        else {\n            throw new Error(\"Invalid event type\");\n        }\n    }\n    off(event, handleEvent) {\n        if (event !== \"accountsChanged\" && event !== \"networkChanged\") {\n            throw new Error(\"Invalid event type\");\n        }\n        const eventIndex = this._userWalletEvents.findIndex((userEvent) => userEvent.type === event && userEvent.handler === handleEvent);\n        if (eventIndex >= 0) {\n            this._userWalletEvents.splice(eventIndex, 1);\n        }\n    }\n}\n//# sourceMappingURL=inject.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/build/inject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/bech32.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/bech32.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=bech32.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC9iZWNoMzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcYmVjaDMyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmVjaDMyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/bech32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/bip44.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/bip44.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=bip44.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC9iaXA0NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXJcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFxiaXA0NC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpcDQ0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/bip44.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/chain-info.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/chain-info.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=chain-info.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC9jaGFpbi1pbmZvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlclxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFx0eXBlc1xcYnVpbGRcXGNoYWluLWluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFpbi1pbmZvLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/chain-info.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/cosmjs-alt.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/cosmjs-alt.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=cosmjs-alt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC9jb3NtanMtYWx0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlclxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFx0eXBlc1xcYnVpbGRcXGNvc21qcy1hbHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3NtanMtYWx0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/cosmjs-alt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/cosmjs.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/cosmjs.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=cosmjs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC9jb3NtanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcY29zbWpzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29zbWpzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/cosmjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/currency.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/currency.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=currency.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC9jdXJyZW5jeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXJcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFxjdXJyZW5jeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1cnJlbmN5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/currency.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/ethereum.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/ethereum.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EthTxStatus = exports.EthSignType = void 0;\nvar EthSignType;\n(function (EthSignType) {\n    EthSignType[\"MESSAGE\"] = \"message\";\n    EthSignType[\"TRANSACTION\"] = \"transaction\";\n    EthSignType[\"EIP712\"] = \"eip-712\";\n})(EthSignType = exports.EthSignType || (exports.EthSignType = {}));\nvar EthTxStatus;\n(function (EthTxStatus) {\n    EthTxStatus[\"Success\"] = \"0x1\";\n    EthTxStatus[\"Failure\"] = \"0x0\";\n})(EthTxStatus = exports.EthTxStatus || (exports.EthTxStatus = {}));\n//# sourceMappingURL=ethereum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC9ldGhlcmV1bS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxtQkFBbUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDLG1CQUFtQixLQUFLO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3Q0FBd0MsbUJBQW1CLEtBQUs7QUFDakUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcZXRoZXJldW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV0aFR4U3RhdHVzID0gZXhwb3J0cy5FdGhTaWduVHlwZSA9IHZvaWQgMDtcbnZhciBFdGhTaWduVHlwZTtcbihmdW5jdGlvbiAoRXRoU2lnblR5cGUpIHtcbiAgICBFdGhTaWduVHlwZVtcIk1FU1NBR0VcIl0gPSBcIm1lc3NhZ2VcIjtcbiAgICBFdGhTaWduVHlwZVtcIlRSQU5TQUNUSU9OXCJdID0gXCJ0cmFuc2FjdGlvblwiO1xuICAgIEV0aFNpZ25UeXBlW1wiRUlQNzEyXCJdID0gXCJlaXAtNzEyXCI7XG59KShFdGhTaWduVHlwZSA9IGV4cG9ydHMuRXRoU2lnblR5cGUgfHwgKGV4cG9ydHMuRXRoU2lnblR5cGUgPSB7fSkpO1xudmFyIEV0aFR4U3RhdHVzO1xuKGZ1bmN0aW9uIChFdGhUeFN0YXR1cykge1xuICAgIEV0aFR4U3RhdHVzW1wiU3VjY2Vzc1wiXSA9IFwiMHgxXCI7XG4gICAgRXRoVHhTdGF0dXNbXCJGYWlsdXJlXCJdID0gXCIweDBcIjtcbn0pKEV0aFR4U3RhdHVzID0gZXhwb3J0cy5FdGhUeFN0YXR1cyB8fCAoZXhwb3J0cy5FdGhUeFN0YXR1cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldGhlcmV1bS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/ethereum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/index.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./currency */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/currency.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bech32 */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/bech32.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bip44 */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/bip44.js\"), exports);\n__exportStar(__webpack_require__(/*! ./chain-info */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/chain-info.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./window */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/window.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ethereum */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/ethereum.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cosmjs */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/cosmjs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./cosmjs-alt */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/cosmjs-alt.js\"), exports);\n__exportStar(__webpack_require__(/*! ./secretjs */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/secretjs.js\"), exports);\n__exportStar(__webpack_require__(/*! ./settled */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/settled.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsa0hBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLDhHQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyw0R0FBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLG9IQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyw4R0FBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsa0hBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLDhHQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxhQUFhLG1CQUFPLENBQUMsa0hBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLGdIQUFXO0FBQ2hDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlclxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFx0eXBlc1xcYnVpbGRcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3VycmVuY3lcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2JlY2gzMlwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYmlwNDRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NoYWluLWluZm9cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhbGxldFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2luZG93XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ldGhlcmV1bVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29zbWpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb3NtanMtYWx0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zZWNyZXRqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2V0dGxlZFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/secretjs.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/secretjs.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=secretjs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC9zZWNyZXRqcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXJcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFxzZWNyZXRqcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlY3JldGpzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/secretjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/settled.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/settled.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=settled.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC9zZXR0bGVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlclxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFx0eXBlc1xcYnVpbGRcXHNldHRsZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXR0bGVkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/settled.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/eip6963.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/eip6963.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EIP6963EventNames = void 0;\nvar EIP6963EventNames;\n(function (EIP6963EventNames) {\n    EIP6963EventNames[\"Announce\"] = \"eip6963:announceProvider\";\n    EIP6963EventNames[\"Request\"] = \"eip6963:requestProvider\";\n})(EIP6963EventNames = exports.EIP6963EventNames || (exports.EIP6963EventNames = {}));\n//# sourceMappingURL=eip6963.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC93YWxsZXQvZWlwNjk2My5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9EQUFvRCx5QkFBeUIsS0FBSztBQUNuRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccHJvdmlkZXJcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdHlwZXNcXGJ1aWxkXFx3YWxsZXRcXGVpcDY5NjMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVJUDY5NjNFdmVudE5hbWVzID0gdm9pZCAwO1xudmFyIEVJUDY5NjNFdmVudE5hbWVzO1xuKGZ1bmN0aW9uIChFSVA2OTYzRXZlbnROYW1lcykge1xuICAgIEVJUDY5NjNFdmVudE5hbWVzW1wiQW5ub3VuY2VcIl0gPSBcImVpcDY5NjM6YW5ub3VuY2VQcm92aWRlclwiO1xuICAgIEVJUDY5NjNFdmVudE5hbWVzW1wiUmVxdWVzdFwiXSA9IFwiZWlwNjk2MzpyZXF1ZXN0UHJvdmlkZXJcIjtcbn0pKEVJUDY5NjNFdmVudE5hbWVzID0gZXhwb3J0cy5FSVA2OTYzRXZlbnROYW1lcyB8fCAoZXhwb3J0cy5FSVA2OTYzRXZlbnROYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1laXA2OTYzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/eip6963.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/ethereum.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/ethereum.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=ethereum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC93YWxsZXQvZXRoZXJldW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcd2FsbGV0XFxldGhlcmV1bS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV0aGVyZXVtLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/ethereum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/index.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./keplr */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/keplr.js\"), exports);\n__exportStar(__webpack_require__(/*! ./eip6963 */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/eip6963.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ethereum */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/ethereum.js\"), exports);\n__exportStar(__webpack_require__(/*! ./starknet */ \"(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/starknet.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC93YWxsZXQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLG1IQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyx1SEFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMseUhBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLHlIQUFZO0FBQ2pDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxwcm92aWRlclxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFx0eXBlc1xcYnVpbGRcXHdhbGxldFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9rZXBsclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZWlwNjk2M1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXRoZXJldW1cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3N0YXJrbmV0XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/keplr.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/keplr.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=keplr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC93YWxsZXQva2VwbHIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcd2FsbGV0XFxrZXBsci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlcGxyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/keplr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/starknet.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/starknet.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=starknet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC93YWxsZXQvc3RhcmtuZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcd2FsbGV0XFxzdGFya25ldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXJrbmV0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/wallet/starknet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/window.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/window.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=window.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9wcm92aWRlci9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC90eXBlcy9idWlsZC93aW5kb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHByb3ZpZGVyXFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHR5cGVzXFxidWlsZFxcd2luZG93LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/provider/node_modules/@keplr-wallet/types/build/window.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/constant.js":
/*!*************************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/constant.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WEBPAGE_PORT = exports.APP_PORT = exports.BACKGROUND_PORT = void 0;\nexports.BACKGROUND_PORT = \"background\";\nexports.APP_PORT = \"popup\";\nexports.WEBPAGE_PORT = \"webpage\";\n//# sourceMappingURL=constant.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvY29uc3RhbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsZ0JBQWdCLEdBQUcsdUJBQXVCO0FBQ2pFLHVCQUF1QjtBQUN2QixnQkFBZ0I7QUFDaEIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxyb3V0ZXJcXGJ1aWxkXFxjb25zdGFudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV0VCUEFHRV9QT1JUID0gZXhwb3J0cy5BUFBfUE9SVCA9IGV4cG9ydHMuQkFDS0dST1VORF9QT1JUID0gdm9pZCAwO1xuZXhwb3J0cy5CQUNLR1JPVU5EX1BPUlQgPSBcImJhY2tncm91bmRcIjtcbmV4cG9ydHMuQVBQX1BPUlQgPSBcInBvcHVwXCI7XG5leHBvcnRzLldFQlBBR0VfUE9SVCA9IFwid2VicGFnZVwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/constant.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/encoding/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/encoding/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MessageRegistry = void 0;\nclass MessageRegistry {\n    constructor() {\n        this.registeredMsgType = new Map();\n    }\n    registerMessage(msgCls) {\n        if (this.registeredMsgType.has(msgCls.type())) {\n            throw new Error(`Already registered type ${msgCls.type()}`);\n        }\n        this.registeredMsgType.set(msgCls.type(), msgCls);\n    }\n    parseMessage(message) {\n        if (!message.type) {\n            throw new Error(\"Null type\");\n        }\n        const msgCls = this.registeredMsgType.get(message.type);\n        if (!msgCls) {\n            throw new Error(`Unregistered msg type ${message.type}`);\n        }\n        return Object.setPrototypeOf(message.msg, msgCls.prototype);\n    }\n}\nexports.MessageRegistry = MessageRegistry;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvZW5jb2RpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxhQUFhO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxyb3V0ZXJcXGJ1aWxkXFxlbmNvZGluZ1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1lc3NhZ2VSZWdpc3RyeSA9IHZvaWQgMDtcbmNsYXNzIE1lc3NhZ2VSZWdpc3RyeSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZE1zZ1R5cGUgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHJlZ2lzdGVyTWVzc2FnZShtc2dDbHMpIHtcbiAgICAgICAgaWYgKHRoaXMucmVnaXN0ZXJlZE1zZ1R5cGUuaGFzKG1zZ0Nscy50eXBlKCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFscmVhZHkgcmVnaXN0ZXJlZCB0eXBlICR7bXNnQ2xzLnR5cGUoKX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZ2lzdGVyZWRNc2dUeXBlLnNldChtc2dDbHMudHlwZSgpLCBtc2dDbHMpO1xuICAgIH1cbiAgICBwYXJzZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICBpZiAoIW1lc3NhZ2UudHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTnVsbCB0eXBlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1zZ0NscyA9IHRoaXMucmVnaXN0ZXJlZE1zZ1R5cGUuZ2V0KG1lc3NhZ2UudHlwZSk7XG4gICAgICAgIGlmICghbXNnQ2xzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVnaXN0ZXJlZCBtc2cgdHlwZSAke21lc3NhZ2UudHlwZX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKG1lc3NhZ2UubXNnLCBtc2dDbHMucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnRzLk1lc3NhZ2VSZWdpc3RyeSA9IE1lc3NhZ2VSZWdpc3RyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/encoding/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/error.js":
/*!**********************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/error.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EthereumProviderRpcError = exports.KeplrError = void 0;\nclass KeplrError extends Error {\n    constructor(module, code, message) {\n        super(message);\n        this.module = module;\n        this.code = code;\n        Object.setPrototypeOf(this, KeplrError.prototype);\n    }\n}\nexports.KeplrError = KeplrError;\nclass EthereumProviderRpcError extends Error {\n    constructor(code, message, data) {\n        super(message);\n        this.code = code;\n        this.data = data;\n        Object.setPrototypeOf(this, EthereumProviderRpcError.prototype);\n    }\n}\nexports.EthereumProviderRpcError = EthereumProviderRpcError;\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcsa0JBQWtCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccm91dGVyXFxidWlsZFxcZXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV0aGVyZXVtUHJvdmlkZXJScGNFcnJvciA9IGV4cG9ydHMuS2VwbHJFcnJvciA9IHZvaWQgMDtcbmNsYXNzIEtlcGxyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobW9kdWxlLCBjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm1vZHVsZSA9IG1vZHVsZTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEtlcGxyRXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnRzLktlcGxyRXJyb3IgPSBLZXBsckVycm9yO1xuY2xhc3MgRXRoZXJldW1Qcm92aWRlclJwY0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvZGUsIG1lc3NhZ2UsIGRhdGEpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBFdGhlcmV1bVByb3ZpZGVyUnBjRXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnRzLkV0aGVyZXVtUHJvdmlkZXJScGNFcnJvciA9IEV0aGVyZXVtUHJvdmlkZXJScGNFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/handler.js":
/*!************************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/handler.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvaGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccm91dGVyXFxidWlsZFxcaGFuZGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/hex.js":
/*!********************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/hex.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n  Belows are from @cosmjs/encoding library.\n  To reduce the bundle size of provider, put them directly here.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromHex = exports.toHex = void 0;\nfunction toHex(data) {\n    let out = \"\";\n    for (const byte of data) {\n        out += (\"0\" + byte.toString(16)).slice(-2);\n    }\n    return out;\n}\nexports.toHex = toHex;\nfunction fromHex(hexstring) {\n    if (hexstring.length % 2 !== 0) {\n        throw new Error(\"hex string length must be a multiple of 2\");\n    }\n    const listOfInts = [];\n    for (let i = 0; i < hexstring.length; i += 2) {\n        const hexByteAsString = hexstring.substr(i, 2);\n        if (!hexByteAsString.match(/[0-9a-f]{2}/i)) {\n            throw new Error(\"hex string contains invalid characters\");\n        }\n        listOfInts.push(parseInt(hexByteAsString, 16));\n    }\n    return new Uint8Array(listOfInts);\n}\nexports.fromHex = fromHex;\n//# sourceMappingURL=hex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvaGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLGFBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQSw2Q0FBNkMsRUFBRTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHJvdXRlclxcYnVpbGRcXGhleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gIEJlbG93cyBhcmUgZnJvbSBAY29zbWpzL2VuY29kaW5nIGxpYnJhcnkuXG4gIFRvIHJlZHVjZSB0aGUgYnVuZGxlIHNpemUgb2YgcHJvdmlkZXIsIHB1dCB0aGVtIGRpcmVjdGx5IGhlcmUuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbUhleCA9IGV4cG9ydHMudG9IZXggPSB2b2lkIDA7XG5mdW5jdGlvbiB0b0hleChkYXRhKSB7XG4gICAgbGV0IG91dCA9IFwiXCI7XG4gICAgZm9yIChjb25zdCBieXRlIG9mIGRhdGEpIHtcbiAgICAgICAgb3V0ICs9IChcIjBcIiArIGJ5dGUudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLnRvSGV4ID0gdG9IZXg7XG5mdW5jdGlvbiBmcm9tSGV4KGhleHN0cmluZykge1xuICAgIGlmIChoZXhzdHJpbmcubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJoZXggc3RyaW5nIGxlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMlwiKTtcbiAgICB9XG4gICAgY29uc3QgbGlzdE9mSW50cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGV4c3RyaW5nLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGNvbnN0IGhleEJ5dGVBc1N0cmluZyA9IGhleHN0cmluZy5zdWJzdHIoaSwgMik7XG4gICAgICAgIGlmICghaGV4Qnl0ZUFzU3RyaW5nLm1hdGNoKC9bMC05YS1mXXsyfS9pKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaGV4IHN0cmluZyBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnNcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdE9mSW50cy5wdXNoKHBhcnNlSW50KGhleEJ5dGVBc1N0cmluZywgMTYpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGxpc3RPZkludHMpO1xufVxuZXhwb3J0cy5mcm9tSGV4ID0gZnJvbUhleDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/hex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./router */ \"(ssr)/./node_modules/@keplr-wallet/router/build/router/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./handler */ \"(ssr)/./node_modules/@keplr-wallet/router/build/handler.js\"), exports);\n__exportStar(__webpack_require__(/*! ./interfaces */ \"(ssr)/./node_modules/@keplr-wallet/router/build/interfaces.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@keplr-wallet/router/build/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@keplr-wallet/router/build/error.js\"), exports);\n__exportStar(__webpack_require__(/*! ./message */ \"(ssr)/./node_modules/@keplr-wallet/router/build/message.js\"), exports);\n__exportStar(__webpack_require__(/*! ./constant */ \"(ssr)/./node_modules/@keplr-wallet/router/build/constant.js\"), exports);\n__exportStar(__webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/@keplr-wallet/router/build/encoding/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./simple */ \"(ssr)/./node_modules/@keplr-wallet/router/build/simple.js\"), exports);\n__exportStar(__webpack_require__(/*! ./uint8-array */ \"(ssr)/./node_modules/@keplr-wallet/router/build/uint8-array.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLGlGQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyw2RUFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsbUZBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLHlFQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyx5RUFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsNkVBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLCtFQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxxRkFBWTtBQUNqQyxhQUFhLG1CQUFPLENBQUMsMkVBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLHFGQUFlO0FBQ3BDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFxyb3V0ZXJcXGJ1aWxkXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3JvdXRlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGFuZGxlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaW50ZXJmYWNlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Vycm9yXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tZXNzYWdlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdGFudFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW5jb2RpbmdcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NpbXBsZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdWludDgtYXJyYXlcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/interfaces.js":
/*!***************************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/interfaces.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=interfaces.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvaW50ZXJmYWNlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccm91dGVyXFxidWlsZFxcaW50ZXJmYWNlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/interfaces.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/message.js":
/*!************************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/message.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Message = void 0;\n/**\n * This messaging system is influenced by cosmos-sdk.\n * The messages are processed in the following order:\n * \"deserialize message -> approve external -> validate basic -> handler by routing\".\n * This deserializing system has weak polymorphism feature.\n * Message would be converted to object according to their class and registered type.\n * But, nested class is not supported. Non primitivie types or array that includes non primitive types in message's fields\n * can't be decoded to their type properly. In this case, user should set thier prototype manually.\n */\nclass Message {\n    /**\n     * Ask for approval if message is sent externally.\n     */\n    approveExternal(_env, _sender) {\n        return false;\n    }\n}\nexports.Message = Message;\n//# sourceMappingURL=message.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvbWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccm91dGVyXFxidWlsZFxcbWVzc2FnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWVzc2FnZSA9IHZvaWQgMDtcbi8qKlxuICogVGhpcyBtZXNzYWdpbmcgc3lzdGVtIGlzIGluZmx1ZW5jZWQgYnkgY29zbW9zLXNkay5cbiAqIFRoZSBtZXNzYWdlcyBhcmUgcHJvY2Vzc2VkIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6XG4gKiBcImRlc2VyaWFsaXplIG1lc3NhZ2UgLT4gYXBwcm92ZSBleHRlcm5hbCAtPiB2YWxpZGF0ZSBiYXNpYyAtPiBoYW5kbGVyIGJ5IHJvdXRpbmdcIi5cbiAqIFRoaXMgZGVzZXJpYWxpemluZyBzeXN0ZW0gaGFzIHdlYWsgcG9seW1vcnBoaXNtIGZlYXR1cmUuXG4gKiBNZXNzYWdlIHdvdWxkIGJlIGNvbnZlcnRlZCB0byBvYmplY3QgYWNjb3JkaW5nIHRvIHRoZWlyIGNsYXNzIGFuZCByZWdpc3RlcmVkIHR5cGUuXG4gKiBCdXQsIG5lc3RlZCBjbGFzcyBpcyBub3Qgc3VwcG9ydGVkLiBOb24gcHJpbWl0aXZpZSB0eXBlcyBvciBhcnJheSB0aGF0IGluY2x1ZGVzIG5vbiBwcmltaXRpdmUgdHlwZXMgaW4gbWVzc2FnZSdzIGZpZWxkc1xuICogY2FuJ3QgYmUgZGVjb2RlZCB0byB0aGVpciB0eXBlIHByb3Blcmx5LiBJbiB0aGlzIGNhc2UsIHVzZXIgc2hvdWxkIHNldCB0aGllciBwcm90b3R5cGUgbWFudWFsbHkuXG4gKi9cbmNsYXNzIE1lc3NhZ2Uge1xuICAgIC8qKlxuICAgICAqIEFzayBmb3IgYXBwcm92YWwgaWYgbWVzc2FnZSBpcyBzZW50IGV4dGVybmFsbHkuXG4gICAgICovXG4gICAgYXBwcm92ZUV4dGVybmFsKF9lbnYsIF9zZW5kZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuTWVzc2FnZSA9IE1lc3NhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/router/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/router/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Router = void 0;\nconst encoding_1 = __webpack_require__(/*! ../encoding */ \"(ssr)/./node_modules/@keplr-wallet/router/build/encoding/index.js\");\nconst uint8_array_1 = __webpack_require__(/*! ../uint8-array */ \"(ssr)/./node_modules/@keplr-wallet/router/build/uint8-array.js\");\nclass Router {\n    constructor(envProducer) {\n        this.envProducer = envProducer;\n        this.msgRegistry = new encoding_1.MessageRegistry();\n        this.registeredHandler = new Map();\n        this.guards = [];\n        this.port = \"\";\n        this._isInitialized = false;\n    }\n    get isInitialized() {\n        return this._isInitialized;\n    }\n    registerMessage(msgCls) {\n        this.msgRegistry.registerMessage(msgCls);\n    }\n    addHandler(route, handler) {\n        if (this.registeredHandler.has(route)) {\n            throw new Error(`Already registered type ${route}`);\n        }\n        this.registeredHandler.set(route, handler);\n    }\n    addGuard(guard) {\n        this.guards.push(guard);\n    }\n    listen(port, initFn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.port = port;\n            this.attachHandler();\n            if (initFn) {\n                let initWaiter;\n                this._initWaiter = new Promise((resolve) => {\n                    initWaiter = resolve;\n                });\n                yield initFn();\n                initWaiter();\n            }\n            this._isInitialized = true;\n            return;\n        });\n    }\n    unlisten() {\n        this.port = \"\";\n        this.detachHandler();\n    }\n    handleMessage(message, sender) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isInitialized) {\n                yield this._initWaiter;\n            }\n            const msg = this.msgRegistry.parseMessage(uint8_array_1.JSONUint8Array.unwrap(message));\n            const env = this.envProducer(sender, (_a = msg.routerMeta) !== null && _a !== void 0 ? _a : {});\n            for (const guard of this.guards) {\n                yield guard(env, msg, sender);\n            }\n            // Can happen throw\n            msg.validateBasic();\n            const route = msg.route();\n            if (!route) {\n                throw new Error(\"Null router\");\n            }\n            const handler = this.registeredHandler.get(route);\n            if (!handler) {\n                throw new Error(\"Can't get handler\");\n            }\n            return uint8_array_1.JSONUint8Array.wrap(yield handler(env, msg));\n        });\n    }\n}\nexports.Router = Router;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvcm91dGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsbUJBQW1CLG1CQUFPLENBQUMsc0ZBQWE7QUFDeEMsc0JBQXNCLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsTUFBTTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEdBQTBHO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxccm91dGVyXFxidWlsZFxccm91dGVyXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Sb3V0ZXIgPSB2b2lkIDA7XG5jb25zdCBlbmNvZGluZ18xID0gcmVxdWlyZShcIi4uL2VuY29kaW5nXCIpO1xuY29uc3QgdWludDhfYXJyYXlfMSA9IHJlcXVpcmUoXCIuLi91aW50OC1hcnJheVwiKTtcbmNsYXNzIFJvdXRlciB7XG4gICAgY29uc3RydWN0b3IoZW52UHJvZHVjZXIpIHtcbiAgICAgICAgdGhpcy5lbnZQcm9kdWNlciA9IGVudlByb2R1Y2VyO1xuICAgICAgICB0aGlzLm1zZ1JlZ2lzdHJ5ID0gbmV3IGVuY29kaW5nXzEuTWVzc2FnZVJlZ2lzdHJ5KCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZEhhbmRsZXIgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuZ3VhcmRzID0gW107XG4gICAgICAgIHRoaXMucG9ydCA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IGlzSW5pdGlhbGl6ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0luaXRpYWxpemVkO1xuICAgIH1cbiAgICByZWdpc3Rlck1lc3NhZ2UobXNnQ2xzKSB7XG4gICAgICAgIHRoaXMubXNnUmVnaXN0cnkucmVnaXN0ZXJNZXNzYWdlKG1zZ0Nscyk7XG4gICAgfVxuICAgIGFkZEhhbmRsZXIocm91dGUsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHRoaXMucmVnaXN0ZXJlZEhhbmRsZXIuaGFzKHJvdXRlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBbHJlYWR5IHJlZ2lzdGVyZWQgdHlwZSAke3JvdXRlfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZEhhbmRsZXIuc2V0KHJvdXRlLCBoYW5kbGVyKTtcbiAgICB9XG4gICAgYWRkR3VhcmQoZ3VhcmQpIHtcbiAgICAgICAgdGhpcy5ndWFyZHMucHVzaChndWFyZCk7XG4gICAgfVxuICAgIGxpc3Rlbihwb3J0LCBpbml0Rm4pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaEhhbmRsZXIoKTtcbiAgICAgICAgICAgIGlmIChpbml0Rm4pIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5pdFdhaXRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbml0V2FpdGVyID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdFdhaXRlciA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgeWllbGQgaW5pdEZuKCk7XG4gICAgICAgICAgICAgICAgaW5pdFdhaXRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1bmxpc3RlbigpIHtcbiAgICAgICAgdGhpcy5wb3J0ID0gXCJcIjtcbiAgICAgICAgdGhpcy5kZXRhY2hIYW5kbGVyKCk7XG4gICAgfVxuICAgIGhhbmRsZU1lc3NhZ2UobWVzc2FnZSwgc2VuZGVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5faW5pdFdhaXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IHRoaXMubXNnUmVnaXN0cnkucGFyc2VNZXNzYWdlKHVpbnQ4X2FycmF5XzEuSlNPTlVpbnQ4QXJyYXkudW53cmFwKG1lc3NhZ2UpKTtcbiAgICAgICAgICAgIGNvbnN0IGVudiA9IHRoaXMuZW52UHJvZHVjZXIoc2VuZGVyLCAoX2EgPSBtc2cucm91dGVyTWV0YSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiB0aGlzLmd1YXJkcykge1xuICAgICAgICAgICAgICAgIHlpZWxkIGd1YXJkKGVudiwgbXNnLCBzZW5kZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2FuIGhhcHBlbiB0aHJvd1xuICAgICAgICAgICAgbXNnLnZhbGlkYXRlQmFzaWMoKTtcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gbXNnLnJvdXRlKCk7XG4gICAgICAgICAgICBpZiAoIXJvdXRlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTnVsbCByb3V0ZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5yZWdpc3RlcmVkSGFuZGxlci5nZXQocm91dGUpO1xuICAgICAgICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgZ2V0IGhhbmRsZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdWludDhfYXJyYXlfMS5KU09OVWludDhBcnJheS53cmFwKHlpZWxkIGhhbmRsZXIoZW52LCBtc2cpKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Sb3V0ZXIgPSBSb3V0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/router/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/simple.js":
/*!***********************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/simple.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sendSimpleMessage = exports.SimpleMessage = void 0;\nconst message_1 = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/@keplr-wallet/router/build/message.js\");\nconst symbolRoute = Symbol();\nconst symbolType = Symbol();\nclass SimpleMessage extends message_1.Message {\n    constructor(route, type, data) {\n        super();\n        this[symbolRoute] = route;\n        this[symbolType] = type;\n        for (const key of Object.keys(data)) {\n            this[key] = data[key];\n        }\n    }\n    route() {\n        return this[symbolRoute];\n    }\n    type() {\n        return this[symbolType];\n    }\n    // validateBasic should be handled in background.\n    validateBasic() {\n        // noop\n    }\n    // approveExternal should be handled in background.\n    approveExternal() {\n        return true;\n    }\n}\nexports.SimpleMessage = SimpleMessage;\n/**\n * Send message without typing and message instance.\n * Usage of this function is not recommended.\n * However, if you know about this function well,\n * and you want to avoid the usage of troublesome typing and class definition,\n * You can try using this function.\n * @param requester\n * @param port\n * @param route\n * @param type\n * @param data\n */\nfunction sendSimpleMessage(requester, port, route, type, data) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield requester.sendMessage(port, new SimpleMessage(route, type, data));\n    });\n}\nexports.sendSimpleMessage = sendSimpleMessage;\n//# sourceMappingURL=simple.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvc2ltcGxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRyxxQkFBcUI7QUFDakQsa0JBQWtCLG1CQUFPLENBQUMsNkVBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHJvdXRlclxcYnVpbGRcXHNpbXBsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZW5kU2ltcGxlTWVzc2FnZSA9IGV4cG9ydHMuU2ltcGxlTWVzc2FnZSA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VfMSA9IHJlcXVpcmUoXCIuL21lc3NhZ2VcIik7XG5jb25zdCBzeW1ib2xSb3V0ZSA9IFN5bWJvbCgpO1xuY29uc3Qgc3ltYm9sVHlwZSA9IFN5bWJvbCgpO1xuY2xhc3MgU2ltcGxlTWVzc2FnZSBleHRlbmRzIG1lc3NhZ2VfMS5NZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3Rvcihyb3V0ZSwgdHlwZSwgZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzW3N5bWJvbFJvdXRlXSA9IHJvdXRlO1xuICAgICAgICB0aGlzW3N5bWJvbFR5cGVdID0gdHlwZTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZGF0YSkpIHtcbiAgICAgICAgICAgIHRoaXNba2V5XSA9IGRhdGFba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByb3V0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbc3ltYm9sUm91dGVdO1xuICAgIH1cbiAgICB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpc1tzeW1ib2xUeXBlXTtcbiAgICB9XG4gICAgLy8gdmFsaWRhdGVCYXNpYyBzaG91bGQgYmUgaGFuZGxlZCBpbiBiYWNrZ3JvdW5kLlxuICAgIHZhbGlkYXRlQmFzaWMoKSB7XG4gICAgICAgIC8vIG5vb3BcbiAgICB9XG4gICAgLy8gYXBwcm92ZUV4dGVybmFsIHNob3VsZCBiZSBoYW5kbGVkIGluIGJhY2tncm91bmQuXG4gICAgYXBwcm92ZUV4dGVybmFsKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLlNpbXBsZU1lc3NhZ2UgPSBTaW1wbGVNZXNzYWdlO1xuLyoqXG4gKiBTZW5kIG1lc3NhZ2Ugd2l0aG91dCB0eXBpbmcgYW5kIG1lc3NhZ2UgaW5zdGFuY2UuXG4gKiBVc2FnZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIG5vdCByZWNvbW1lbmRlZC5cbiAqIEhvd2V2ZXIsIGlmIHlvdSBrbm93IGFib3V0IHRoaXMgZnVuY3Rpb24gd2VsbCxcbiAqIGFuZCB5b3Ugd2FudCB0byBhdm9pZCB0aGUgdXNhZ2Ugb2YgdHJvdWJsZXNvbWUgdHlwaW5nIGFuZCBjbGFzcyBkZWZpbml0aW9uLFxuICogWW91IGNhbiB0cnkgdXNpbmcgdGhpcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSByZXF1ZXN0ZXJcbiAqIEBwYXJhbSBwb3J0XG4gKiBAcGFyYW0gcm91dGVcbiAqIEBwYXJhbSB0eXBlXG4gKiBAcGFyYW0gZGF0YVxuICovXG5mdW5jdGlvbiBzZW5kU2ltcGxlTWVzc2FnZShyZXF1ZXN0ZXIsIHBvcnQsIHJvdXRlLCB0eXBlLCBkYXRhKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHlpZWxkIHJlcXVlc3Rlci5zZW5kTWVzc2FnZShwb3J0LCBuZXcgU2ltcGxlTWVzc2FnZShyb3V0ZSwgdHlwZSwgZGF0YSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zZW5kU2ltcGxlTWVzc2FnZSA9IHNlbmRTaW1wbGVNZXNzYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2ltcGxlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/simple.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHJvdXRlclxcYnVpbGRcXHR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/router/build/uint8-array.js":
/*!****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/router/build/uint8-array.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JSONUint8Array = void 0;\n// The JSON encoder that supports the `Uint8Array`.\nconst hex_1 = __webpack_require__(/*! ./hex */ \"(ssr)/./node_modules/@keplr-wallet/router/build/hex.js\");\nclass JSONUint8Array {\n    static parse(text) {\n        return JSON.parse(text, (key, value) => {\n            // Prevent potential prototype poisoning.\n            if (key === \"__proto__\") {\n                throw new Error(\"__proto__ is disallowed\");\n            }\n            if (value &&\n                typeof value === \"string\" &&\n                value.startsWith(\"__uint8array__\")) {\n                return (0, hex_1.fromHex)(value.replace(\"__uint8array__\", \"\"));\n            }\n            if (typeof BigInt !== \"undefined\" &&\n                value &&\n                typeof value === \"string\" &&\n                value.startsWith(\"__bigint__\")) {\n                return BigInt(value.replace(\"__bigint__\", \"\"));\n            }\n            return value;\n        });\n    }\n    static stringify(obj) {\n        return JSON.stringify(obj, (key, value) => {\n            // Prevent potential prototype poisoning.\n            if (key === \"__proto__\") {\n                throw new Error(\"__proto__ is disallowed\");\n            }\n            if (value &&\n                (value instanceof Uint8Array ||\n                    (typeof value === \"object\" &&\n                        \"type\" in value &&\n                        \"data\" in value &&\n                        value.type === \"Buffer\" &&\n                        Array.isArray(value.data)))) {\n                const array = value instanceof Uint8Array ? value : new Uint8Array(value.data);\n                return `__uint8array__${(0, hex_1.toHex)(array)}`;\n            }\n            if (typeof value === \"bigint\") {\n                return `__bigint__${value.toString()}`;\n            }\n            return value;\n        });\n    }\n    static wrap(obj) {\n        if (obj === undefined)\n            return undefined;\n        return JSON.parse(JSONUint8Array.stringify(obj));\n    }\n    static unwrap(obj) {\n        if (obj === undefined)\n            return undefined;\n        return JSONUint8Array.parse(JSONUint8Array.stringify(obj));\n    }\n}\nexports.JSONUint8Array = JSONUint8Array;\n//# sourceMappingURL=uint8-array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9yb3V0ZXIvYnVpbGQvdWludDgtYXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLHFFQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyx3QkFBd0I7QUFDaEU7QUFDQTtBQUNBLG9DQUFvQyxpQkFBaUI7QUFDckQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHJvdXRlclxcYnVpbGRcXHVpbnQ4LWFycmF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5KU09OVWludDhBcnJheSA9IHZvaWQgMDtcbi8vIFRoZSBKU09OIGVuY29kZXIgdGhhdCBzdXBwb3J0cyB0aGUgYFVpbnQ4QXJyYXlgLlxuY29uc3QgaGV4XzEgPSByZXF1aXJlKFwiLi9oZXhcIik7XG5jbGFzcyBKU09OVWludDhBcnJheSB7XG4gICAgc3RhdGljIHBhcnNlKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIC8vIFByZXZlbnQgcG90ZW50aWFsIHByb3RvdHlwZSBwb2lzb25pbmcuXG4gICAgICAgICAgICBpZiAoa2V5ID09PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiX19wcm90b19fIGlzIGRpc2FsbG93ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5zdGFydHNXaXRoKFwiX191aW50OGFycmF5X19cIikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGhleF8xLmZyb21IZXgpKHZhbHVlLnJlcGxhY2UoXCJfX3VpbnQ4YXJyYXlfX1wiLCBcIlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIEJpZ0ludCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgICAgIHZhbHVlICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgdmFsdWUuc3RhcnRzV2l0aChcIl9fYmlnaW50X19cIikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmlnSW50KHZhbHVlLnJlcGxhY2UoXCJfX2JpZ2ludF9fXCIsIFwiXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBzdHJpbmdpZnkob2JqKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IHBvdGVudGlhbCBwcm90b3R5cGUgcG9pc29uaW5nLlxuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJfX3Byb3RvX19cIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIl9fcHJvdG9fXyBpcyBkaXNhbGxvd2VkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICAgICAgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSB8fFxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIiBpbiB2YWx1ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhXCIgaW4gdmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnR5cGUgPT09IFwiQnVmZmVyXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUuZGF0YSkpKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gdmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gdmFsdWUgOiBuZXcgVWludDhBcnJheSh2YWx1ZS5kYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYF9fdWludDhhcnJheV9fJHsoMCwgaGV4XzEudG9IZXgpKGFycmF5KX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBgX19iaWdpbnRfXyR7dmFsdWUudG9TdHJpbmcoKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIHdyYXAob2JqKSB7XG4gICAgICAgIGlmIChvYmogPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT05VaW50OEFycmF5LnN0cmluZ2lmeShvYmopKTtcbiAgICB9XG4gICAgc3RhdGljIHVud3JhcChvYmopIHtcbiAgICAgICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIEpTT05VaW50OEFycmF5LnBhcnNlKEpTT05VaW50OEFycmF5LnN0cmluZ2lmeShvYmopKTtcbiAgICB9XG59XG5leHBvcnRzLkpTT05VaW50OEFycmF5ID0gSlNPTlVpbnQ4QXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11aW50OC1hcnJheS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/router/build/uint8-array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/error.js":
/*!****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/simple-fetch/build/error.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isSimpleFetchError = exports.SimpleFetchError = void 0;\nclass SimpleFetchError extends Error {\n    constructor(baseURL, url, response) {\n        super(`Failed to get response from ${new URL(url, baseURL).toString()}`);\n        this.baseURL = baseURL;\n        this.url = url;\n        this.response = response;\n        // Set the prototype explicitly.\n        Object.setPrototypeOf(this, SimpleFetchError.prototype);\n    }\n}\nexports.SimpleFetchError = SimpleFetchError;\nfunction isSimpleFetchError(payload) {\n    return payload instanceof SimpleFetchError;\n}\nexports.isSimpleFetchError = isSimpleFetchError;\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9zaW1wbGUtZmV0Y2gvYnVpbGQvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsd0JBQXdCO0FBQ3JEO0FBQ0E7QUFDQSw2Q0FBNkMsaUNBQWlDO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcc2ltcGxlLWZldGNoXFxidWlsZFxcZXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzU2ltcGxlRmV0Y2hFcnJvciA9IGV4cG9ydHMuU2ltcGxlRmV0Y2hFcnJvciA9IHZvaWQgMDtcbmNsYXNzIFNpbXBsZUZldGNoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoYmFzZVVSTCwgdXJsLCByZXNwb25zZSkge1xuICAgICAgICBzdXBlcihgRmFpbGVkIHRvIGdldCByZXNwb25zZSBmcm9tICR7bmV3IFVSTCh1cmwsIGJhc2VVUkwpLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgIHRoaXMuYmFzZVVSTCA9IGJhc2VVUkw7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgIC8vIFNldCB0aGUgcHJvdG90eXBlIGV4cGxpY2l0bHkuXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBTaW1wbGVGZXRjaEVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0cy5TaW1wbGVGZXRjaEVycm9yID0gU2ltcGxlRmV0Y2hFcnJvcjtcbmZ1bmN0aW9uIGlzU2ltcGxlRmV0Y2hFcnJvcihwYXlsb2FkKSB7XG4gICAgcmV0dXJuIHBheWxvYWQgaW5zdGFuY2VvZiBTaW1wbGVGZXRjaEVycm9yO1xufVxuZXhwb3J0cy5pc1NpbXBsZUZldGNoRXJyb3IgPSBpc1NpbXBsZUZldGNoRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/fetch.js":
/*!****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/simple-fetch/build/fetch.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.simpleFetch = exports.makeURL = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/error.js\");\nfunction makeURL(baseURL, url) {\n    const baseURLInstance = new URL(baseURL);\n    baseURL = removeLastSlashIfIs(baseURLInstance.origin);\n    url =\n        removeLastSlashIfIs(baseURLInstance.pathname) +\n            \"/\" +\n            removeFirstSlashIfIs(url);\n    return removeLastSlashIfIs(baseURL + \"/\" + removeFirstSlashIfIs(url));\n}\nexports.makeURL = makeURL;\nfunction removeFirstSlashIfIs(str) {\n    if (str.length > 0 && str[0] === \"/\") {\n        return str.slice(1);\n    }\n    return str;\n}\nfunction removeLastSlashIfIs(str) {\n    if (str.length > 0 && str[str.length - 1] === \"/\") {\n        return str.slice(0, str.length - 1);\n    }\n    return str;\n}\nfunction simpleFetch(baseURL, url, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (typeof url !== \"string\") {\n            if (url) {\n                options = url;\n            }\n            url = \"\";\n        }\n        if (url === \"/\") {\n            // If url is \"/\", probably its mean should be to use only base url.\n            // However, `URL` with \"/\" url generate the root url with removing trailing url from base url.\n            // To prevent this invalid case, just handle \"/\" as \"\".\n            url = \"\";\n        }\n        const actualURL = makeURL(baseURL, url);\n        const _a = options || {}, { headers: optionHeaders } = _a, otherOptions = __rest(_a, [\"headers\"]);\n        const fetched = yield fetch(actualURL, Object.assign({ headers: Object.assign({ accept: \"application/json, text/plain, */*\" }, optionHeaders) }, otherOptions));\n        let data;\n        const contentType = fetched.headers.get(\"content-type\") || \"\";\n        if (contentType.startsWith(\"application/json\")) {\n            data = yield fetched.json();\n        }\n        else {\n            const r = yield fetched.text();\n            const trim = r.trim();\n            if (trim.startsWith(\"{\") && trim.endsWith(\"}\")) {\n                data = JSON.parse(trim);\n            }\n            else {\n                data = r;\n            }\n        }\n        const res = {\n            url: actualURL,\n            data,\n            headers: fetched.headers,\n            status: fetched.status,\n            statusText: fetched.statusText,\n        };\n        const validateStatusFn = (options === null || options === void 0 ? void 0 : options.validateStatus) || defaultValidateStatusFn;\n        if (!validateStatusFn(fetched.status)) {\n            throw new error_1.SimpleFetchError(baseURL, url, res);\n        }\n        return res;\n    });\n}\nexports.simpleFetch = simpleFetch;\nfunction defaultValidateStatusFn(status) {\n    return status === 200;\n}\n//# sourceMappingURL=fetch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9zaW1wbGUtZmV0Y2gvYnVpbGQvZmV0Y2guanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxjQUFjO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcsZUFBZTtBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQywrRUFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUkseUJBQXlCO0FBQzdELCtEQUErRCx5QkFBeUIsNkNBQTZDLGtCQUFrQjtBQUN2SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHNCQUFzQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHNpbXBsZS1mZXRjaFxcYnVpbGRcXGZldGNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNpbXBsZUZldGNoID0gZXhwb3J0cy5tYWtlVVJMID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuZnVuY3Rpb24gbWFrZVVSTChiYXNlVVJMLCB1cmwpIHtcbiAgICBjb25zdCBiYXNlVVJMSW5zdGFuY2UgPSBuZXcgVVJMKGJhc2VVUkwpO1xuICAgIGJhc2VVUkwgPSByZW1vdmVMYXN0U2xhc2hJZklzKGJhc2VVUkxJbnN0YW5jZS5vcmlnaW4pO1xuICAgIHVybCA9XG4gICAgICAgIHJlbW92ZUxhc3RTbGFzaElmSXMoYmFzZVVSTEluc3RhbmNlLnBhdGhuYW1lKSArXG4gICAgICAgICAgICBcIi9cIiArXG4gICAgICAgICAgICByZW1vdmVGaXJzdFNsYXNoSWZJcyh1cmwpO1xuICAgIHJldHVybiByZW1vdmVMYXN0U2xhc2hJZklzKGJhc2VVUkwgKyBcIi9cIiArIHJlbW92ZUZpcnN0U2xhc2hJZklzKHVybCkpO1xufVxuZXhwb3J0cy5tYWtlVVJMID0gbWFrZVVSTDtcbmZ1bmN0aW9uIHJlbW92ZUZpcnN0U2xhc2hJZklzKHN0cikge1xuICAgIGlmIChzdHIubGVuZ3RoID4gMCAmJiBzdHJbMF0gPT09IFwiL1wiKSB7XG4gICAgICAgIHJldHVybiBzdHIuc2xpY2UoMSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiByZW1vdmVMYXN0U2xhc2hJZklzKHN0cikge1xuICAgIGlmIChzdHIubGVuZ3RoID4gMCAmJiBzdHJbc3RyLmxlbmd0aCAtIDFdID09PSBcIi9cIikge1xuICAgICAgICByZXR1cm4gc3RyLnNsaWNlKDAsIHN0ci5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIHNpbXBsZUZldGNoKGJhc2VVUkwsIHVybCwgb3B0aW9ucykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVybCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVybCA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgIC8vIElmIHVybCBpcyBcIi9cIiwgcHJvYmFibHkgaXRzIG1lYW4gc2hvdWxkIGJlIHRvIHVzZSBvbmx5IGJhc2UgdXJsLlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgYFVSTGAgd2l0aCBcIi9cIiB1cmwgZ2VuZXJhdGUgdGhlIHJvb3QgdXJsIHdpdGggcmVtb3ZpbmcgdHJhaWxpbmcgdXJsIGZyb20gYmFzZSB1cmwuXG4gICAgICAgICAgICAvLyBUbyBwcmV2ZW50IHRoaXMgaW52YWxpZCBjYXNlLCBqdXN0IGhhbmRsZSBcIi9cIiBhcyBcIlwiLlxuICAgICAgICAgICAgdXJsID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY3R1YWxVUkwgPSBtYWtlVVJMKGJhc2VVUkwsIHVybCk7XG4gICAgICAgIGNvbnN0IF9hID0gb3B0aW9ucyB8fCB7fSwgeyBoZWFkZXJzOiBvcHRpb25IZWFkZXJzIH0gPSBfYSwgb3RoZXJPcHRpb25zID0gX19yZXN0KF9hLCBbXCJoZWFkZXJzXCJdKTtcbiAgICAgICAgY29uc3QgZmV0Y2hlZCA9IHlpZWxkIGZldGNoKGFjdHVhbFVSTCwgT2JqZWN0LmFzc2lnbih7IGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oeyBhY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qXCIgfSwgb3B0aW9uSGVhZGVycykgfSwgb3RoZXJPcHRpb25zKSk7XG4gICAgICAgIGxldCBkYXRhO1xuICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IGZldGNoZWQuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIikgfHwgXCJcIjtcbiAgICAgICAgaWYgKGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoXCJhcHBsaWNhdGlvbi9qc29uXCIpKSB7XG4gICAgICAgICAgICBkYXRhID0geWllbGQgZmV0Y2hlZC5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByID0geWllbGQgZmV0Y2hlZC50ZXh0KCk7XG4gICAgICAgICAgICBjb25zdCB0cmltID0gci50cmltKCk7XG4gICAgICAgICAgICBpZiAodHJpbS5zdGFydHNXaXRoKFwie1wiKSAmJiB0cmltLmVuZHNXaXRoKFwifVwiKSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHRyaW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0ge1xuICAgICAgICAgICAgdXJsOiBhY3R1YWxVUkwsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgaGVhZGVyczogZmV0Y2hlZC5oZWFkZXJzLFxuICAgICAgICAgICAgc3RhdHVzOiBmZXRjaGVkLnN0YXR1cyxcbiAgICAgICAgICAgIHN0YXR1c1RleHQ6IGZldGNoZWQuc3RhdHVzVGV4dCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdmFsaWRhdGVTdGF0dXNGbiA9IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudmFsaWRhdGVTdGF0dXMpIHx8IGRlZmF1bHRWYWxpZGF0ZVN0YXR1c0ZuO1xuICAgICAgICBpZiAoIXZhbGlkYXRlU3RhdHVzRm4oZmV0Y2hlZC5zdGF0dXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5TaW1wbGVGZXRjaEVycm9yKGJhc2VVUkwsIHVybCwgcmVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zaW1wbGVGZXRjaCA9IHNpbXBsZUZldGNoO1xuZnVuY3Rpb24gZGVmYXVsdFZhbGlkYXRlU3RhdHVzRm4oc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA9PT0gMjAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmV0Y2guanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/simple-fetch/build/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./fetch */ \"(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/fetch.js\"), exports);\n__exportStar(__webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/error.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/types.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9zaW1wbGUtZmV0Y2gvYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLCtFQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQywrRUFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsK0VBQVM7QUFDOUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHNpbXBsZS1mZXRjaFxcYnVpbGRcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZmV0Y2hcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Vycm9yXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/types.js":
/*!****************************************************************!*\
  !*** ./node_modules/@keplr-wallet/simple-fetch/build/types.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC9zaW1wbGUtZmV0Y2gvYnVpbGQvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHNpbXBsZS1mZXRjaFxcYnVpbGRcXHR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/simple-fetch/build/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/coin-pretty.js":
/*!**************************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/coin-pretty.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CoinPretty = void 0;\nconst int_pretty_1 = __webpack_require__(/*! ./int-pretty */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/int-pretty.js\");\nconst decimal_1 = __webpack_require__(/*! ./decimal */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/decimal.js\");\nconst dec_utils_1 = __webpack_require__(/*! ./dec-utils */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/dec-utils.js\");\nclass CoinPretty {\n    constructor(_currency, amount) {\n        this._currency = _currency;\n        this._options = {\n            separator: \" \",\n            upperCase: false,\n            lowerCase: false,\n            hideDenom: false,\n            hideIBCMetadata: false,\n        };\n        if (typeof amount === \"object\" && \"toDec\" in amount) {\n            amount = amount.toDec();\n        }\n        else if (!(amount instanceof decimal_1.Dec)) {\n            amount = new decimal_1.Dec(amount);\n        }\n        this.intPretty = new int_pretty_1.IntPretty(amount.quoTruncate(dec_utils_1.DecUtils.getTenExponentNInPrecisionRange(_currency.coinDecimals))).maxDecimals(_currency.coinDecimals);\n    }\n    get options() {\n        return Object.assign(Object.assign({}, this._options), this.intPretty.options);\n    }\n    get denom() {\n        return this.currency.coinDenom;\n    }\n    get currency() {\n        return this._currency;\n    }\n    setCurrency(currency) {\n        const pretty = this.clone();\n        pretty.intPretty = this.intPretty.moveDecimalPointRight(this._currency.coinDecimals - currency.coinDecimals);\n        pretty._currency = currency;\n        return pretty;\n    }\n    separator(str) {\n        const pretty = this.clone();\n        pretty._options.separator = str;\n        return pretty;\n    }\n    upperCase(bool) {\n        const pretty = this.clone();\n        pretty._options.upperCase = bool;\n        pretty._options.lowerCase = !bool;\n        return pretty;\n    }\n    lowerCase(bool) {\n        const pretty = this.clone();\n        pretty._options.lowerCase = bool;\n        pretty._options.upperCase = !bool;\n        return pretty;\n    }\n    hideDenom(bool) {\n        const pretty = this.clone();\n        pretty._options.hideDenom = bool;\n        return pretty;\n    }\n    hideIBCMetadata(bool) {\n        const pretty = this.clone();\n        pretty._options.hideIBCMetadata = bool;\n        return pretty;\n    }\n    moveDecimalPointLeft(delta) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.moveDecimalPointLeft(delta);\n        return pretty;\n    }\n    moveDecimalPointRight(delta) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.moveDecimalPointRight(delta);\n        return pretty;\n    }\n    /**\n     * @deprecated Use`moveDecimalPointLeft`\n     */\n    increasePrecision(delta) {\n        return this.moveDecimalPointLeft(delta);\n    }\n    /**\n     * @deprecated Use`moveDecimalPointRight`\n     */\n    decreasePrecision(delta) {\n        return this.moveDecimalPointRight(delta);\n    }\n    maxDecimals(max) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.maxDecimals(max);\n        return pretty;\n    }\n    inequalitySymbol(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.inequalitySymbol(bool);\n        return pretty;\n    }\n    inequalitySymbolSeparator(str) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.inequalitySymbolSeparator(str);\n        return pretty;\n    }\n    trim(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.trim(bool);\n        return pretty;\n    }\n    shrink(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.shrink(bool);\n        return pretty;\n    }\n    locale(locale) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.locale(locale);\n        return pretty;\n    }\n    /**\n     * Ready indicates the actual value is ready to show the users.\n     * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n     * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n     * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n     * @param bool\n     */\n    ready(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.ready(bool);\n        return pretty;\n    }\n    get isReady() {\n        return this.intPretty.isReady;\n    }\n    add(target) {\n        const isCoinPretty = target instanceof CoinPretty;\n        if (isCoinPretty) {\n            // If target is `CoinPretty` and it has different denom, do nothing.\n            if (\"currency\" in target &&\n                this.currency.coinMinimalDenom !== target.currency.coinMinimalDenom) {\n                return this.clone();\n            }\n        }\n        if (\"toDec\" in target) {\n            target = target.toDec();\n        }\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.add(isCoinPretty\n            ? target\n            : target.mul(dec_utils_1.DecUtils.getTenExponentNInPrecisionRange(-this._currency.coinDecimals)));\n        return pretty;\n    }\n    sub(target) {\n        const isCoinPretty = target instanceof CoinPretty;\n        if (isCoinPretty) {\n            // If target is `CoinPretty` and it has different denom, do nothing.\n            if (\"currency\" in target &&\n                this.currency.coinMinimalDenom !== target.currency.coinMinimalDenom) {\n                return this.clone();\n            }\n        }\n        if (\"toDec\" in target) {\n            target = target.toDec();\n        }\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.sub(isCoinPretty\n            ? target\n            : target.mul(dec_utils_1.DecUtils.getTenExponentNInPrecisionRange(-this._currency.coinDecimals)));\n        return pretty;\n    }\n    mul(target) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.mul(target);\n        return pretty;\n    }\n    quo(target) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.quo(target);\n        return pretty;\n    }\n    toDec() {\n        return this.intPretty.toDec();\n    }\n    toCoin() {\n        const amount = this.toDec()\n            .mulTruncate(dec_utils_1.DecUtils.getTenExponentNInPrecisionRange(this.currency.coinDecimals))\n            .truncate();\n        return {\n            denom: this.currency.coinMinimalDenom,\n            amount: amount.toString(),\n        };\n    }\n    toString() {\n        let denom = this.denom;\n        if (this._options.hideIBCMetadata &&\n            \"originCurrency\" in this.currency &&\n            this.currency.originCurrency) {\n            denom = this.currency.originCurrency.coinDenom;\n        }\n        if (this._options.upperCase) {\n            denom = denom.toUpperCase();\n        }\n        if (this._options.lowerCase) {\n            denom = denom.toLowerCase();\n        }\n        let separator = this._options.separator;\n        if (this._options.hideDenom) {\n            denom = \"\";\n            separator = \"\";\n        }\n        return this.intPretty.toStringWithSymbols(\"\", `${separator}${denom}`);\n    }\n    clone() {\n        const pretty = new CoinPretty(this._currency, 0);\n        pretty._options = Object.assign({}, this._options);\n        pretty.intPretty = this.intPretty.clone();\n        return pretty;\n    }\n}\nexports.CoinPretty = CoinPretty;\n//# sourceMappingURL=coin-pretty.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/coin-pretty.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/coin-utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/coin-utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CoinUtils = void 0;\nconst coin_1 = __webpack_require__(/*! ./coin */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/coin.js\");\nconst int_1 = __webpack_require__(/*! ./int */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/int.js\");\nconst decimal_1 = __webpack_require__(/*! ./decimal */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/decimal.js\");\nconst dec_utils_1 = __webpack_require__(/*! ./dec-utils */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/dec-utils.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/utils.js\");\nclass CoinUtils {\n    static createCoinsFromPrimitives(coinPrimitives) {\n        return coinPrimitives.map((primitive) => {\n            return new coin_1.Coin(primitive.denom, primitive.amount);\n        });\n    }\n    static amountOf(coins, denom) {\n        const coin = coins.find((coin) => {\n            return coin.denom === denom;\n        });\n        if (!coin) {\n            return new int_1.Int(0);\n        }\n        else {\n            return coin.amount;\n        }\n    }\n    static exclude(coins, demons) {\n        return coins.filter((coin) => {\n            return demons.indexOf(coin.denom) === 0;\n        });\n    }\n    static concat(...coins) {\n        if (coins.length === 0) {\n            return [];\n        }\n        const arr = coins.slice();\n        const reducer = (accumulator, coin) => {\n            // Find the duplicated denom.\n            const find = accumulator.find((c) => c.denom === coin.denom);\n            // If duplicated coin exists, add the amount to duplicated one.\n            if (find) {\n                const newCoin = new coin_1.Coin(find.denom, find.amount.add(coin.amount));\n                accumulator.push(newCoin);\n            }\n            else {\n                const newCoin = new coin_1.Coin(coin.denom, coin.amount);\n                accumulator.push(newCoin);\n            }\n            return accumulator;\n        };\n        return arr.reduce(reducer, []);\n    }\n    static getCoinFromDecimals(currencies, decAmountStr, denom) {\n        const currency = currencies.find((currency) => {\n            return currency.coinDenom === denom;\n        });\n        if (!currency) {\n            throw new Error(\"Invalid currency\");\n        }\n        let precision = new decimal_1.Dec(1);\n        for (let i = 0; i < currency.coinDecimals; i++) {\n            precision = precision.mul(new decimal_1.Dec(10));\n        }\n        let decAmount = new decimal_1.Dec(decAmountStr);\n        decAmount = decAmount.mul(precision);\n        if (!new decimal_1.Dec(decAmount.truncate()).equals(decAmount)) {\n            throw new Error(\"Can't divide anymore\");\n        }\n        return new coin_1.Coin(currency.coinMinimalDenom, decAmount.truncate());\n    }\n    static parseDecAndDenomFromCoin(currencies, coin) {\n        let currency = currencies.find((currency) => {\n            return currency.coinMinimalDenom === coin.denom;\n        });\n        if (!currency) {\n            // If the currency is unknown, just use the raw currency.\n            currency = {\n                coinDecimals: 0,\n                coinDenom: coin.denom,\n                coinMinimalDenom: coin.denom,\n            };\n        }\n        let precision = new decimal_1.Dec(1);\n        for (let i = 0; i < currency.coinDecimals; i++) {\n            precision = precision.mul(new decimal_1.Dec(10));\n        }\n        const decAmount = new decimal_1.Dec(coin.amount).quoTruncate(precision);\n        return {\n            amount: decAmount.toString(currency.coinDecimals),\n            denom: currency.coinDenom,\n        };\n    }\n    static shrinkDecimals(dec, minDecimals, maxDecimals, locale = false) {\n        if (dec.equals(new decimal_1.Dec(0))) {\n            return \"0\";\n        }\n        const isNeg = dec.isNegative();\n        const integer = dec.abs().truncate();\n        const fraction = dec.abs().sub(new decimal_1.Dec(integer));\n        const decimals = Math.max(maxDecimals - integer.toString().length + 1, minDecimals);\n        const fractionStr = decimals === 0 ? \"\" : fraction.toString(decimals).replace(\"0.\", \"\");\n        const integerStr = locale\n            ? CoinUtils.integerStringToUSLocaleString(integer.toString())\n            : integer.toString();\n        return ((isNeg ? \"-\" : \"\") +\n            integerStr +\n            (fractionStr.length > 0 ? \".\" : \"\") +\n            fractionStr);\n    }\n    static coinToTrimmedString(coin, currency, separator = \" \") {\n        const dec = new decimal_1.Dec(coin.amount).quoTruncate(dec_utils_1.DecUtils.getPrecisionDec(currency.coinDecimals));\n        return `${dec_utils_1.DecUtils.trim(dec)}${separator}${currency.coinDenom}`;\n    }\n}\nexports.CoinUtils = CoinUtils;\nCoinUtils.integerStringToUSLocaleString = utils_1.integerStringToUSLocaleString;\n//# sourceMappingURL=coin-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC91bml0L2J1aWxkL2NvaW4tdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGVBQWUsbUJBQU8sQ0FBQyxxRUFBUTtBQUMvQixjQUFjLG1CQUFPLENBQUMsbUVBQU87QUFDN0Isa0JBQWtCLG1CQUFPLENBQUMsMkVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsK0VBQWE7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMsdUVBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkJBQTJCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkJBQTJCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwrQkFBK0IsRUFBRSxVQUFVLEVBQUUsbUJBQW1CO0FBQ2xGO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdW5pdFxcYnVpbGRcXGNvaW4tdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvaW5VdGlscyA9IHZvaWQgMDtcbmNvbnN0IGNvaW5fMSA9IHJlcXVpcmUoXCIuL2NvaW5cIik7XG5jb25zdCBpbnRfMSA9IHJlcXVpcmUoXCIuL2ludFwiKTtcbmNvbnN0IGRlY2ltYWxfMSA9IHJlcXVpcmUoXCIuL2RlY2ltYWxcIik7XG5jb25zdCBkZWNfdXRpbHNfMSA9IHJlcXVpcmUoXCIuL2RlYy11dGlsc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNsYXNzIENvaW5VdGlscyB7XG4gICAgc3RhdGljIGNyZWF0ZUNvaW5zRnJvbVByaW1pdGl2ZXMoY29pblByaW1pdGl2ZXMpIHtcbiAgICAgICAgcmV0dXJuIGNvaW5QcmltaXRpdmVzLm1hcCgocHJpbWl0aXZlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGNvaW5fMS5Db2luKHByaW1pdGl2ZS5kZW5vbSwgcHJpbWl0aXZlLmFtb3VudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgYW1vdW50T2YoY29pbnMsIGRlbm9tKSB7XG4gICAgICAgIGNvbnN0IGNvaW4gPSBjb2lucy5maW5kKChjb2luKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29pbi5kZW5vbSA9PT0gZGVub207XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWNvaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgaW50XzEuSW50KDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvaW4uYW1vdW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBleGNsdWRlKGNvaW5zLCBkZW1vbnMpIHtcbiAgICAgICAgcmV0dXJuIGNvaW5zLmZpbHRlcigoY29pbikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRlbW9ucy5pbmRleE9mKGNvaW4uZGVub20pID09PSAwO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGNvbmNhdCguLi5jb2lucykge1xuICAgICAgICBpZiAoY29pbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXJyID0gY29pbnMuc2xpY2UoKTtcbiAgICAgICAgY29uc3QgcmVkdWNlciA9IChhY2N1bXVsYXRvciwgY29pbikgPT4ge1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgZHVwbGljYXRlZCBkZW5vbS5cbiAgICAgICAgICAgIGNvbnN0IGZpbmQgPSBhY2N1bXVsYXRvci5maW5kKChjKSA9PiBjLmRlbm9tID09PSBjb2luLmRlbm9tKTtcbiAgICAgICAgICAgIC8vIElmIGR1cGxpY2F0ZWQgY29pbiBleGlzdHMsIGFkZCB0aGUgYW1vdW50IHRvIGR1cGxpY2F0ZWQgb25lLlxuICAgICAgICAgICAgaWYgKGZpbmQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdDb2luID0gbmV3IGNvaW5fMS5Db2luKGZpbmQuZGVub20sIGZpbmQuYW1vdW50LmFkZChjb2luLmFtb3VudCkpO1xuICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yLnB1c2gobmV3Q29pbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdDb2luID0gbmV3IGNvaW5fMS5Db2luKGNvaW4uZGVub20sIGNvaW4uYW1vdW50KTtcbiAgICAgICAgICAgICAgICBhY2N1bXVsYXRvci5wdXNoKG5ld0NvaW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXJyLnJlZHVjZShyZWR1Y2VyLCBbXSk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDb2luRnJvbURlY2ltYWxzKGN1cnJlbmNpZXMsIGRlY0Ftb3VudFN0ciwgZGVub20pIHtcbiAgICAgICAgY29uc3QgY3VycmVuY3kgPSBjdXJyZW5jaWVzLmZpbmQoKGN1cnJlbmN5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVuY3kuY29pbkRlbm9tID09PSBkZW5vbTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghY3VycmVuY3kpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY3VycmVuY3lcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByZWNpc2lvbiA9IG5ldyBkZWNpbWFsXzEuRGVjKDEpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbmN5LmNvaW5EZWNpbWFsczsgaSsrKSB7XG4gICAgICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24ubXVsKG5ldyBkZWNpbWFsXzEuRGVjKDEwKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRlY0Ftb3VudCA9IG5ldyBkZWNpbWFsXzEuRGVjKGRlY0Ftb3VudFN0cik7XG4gICAgICAgIGRlY0Ftb3VudCA9IGRlY0Ftb3VudC5tdWwocHJlY2lzaW9uKTtcbiAgICAgICAgaWYgKCFuZXcgZGVjaW1hbF8xLkRlYyhkZWNBbW91bnQudHJ1bmNhdGUoKSkuZXF1YWxzKGRlY0Ftb3VudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGRpdmlkZSBhbnltb3JlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgY29pbl8xLkNvaW4oY3VycmVuY3kuY29pbk1pbmltYWxEZW5vbSwgZGVjQW1vdW50LnRydW5jYXRlKCkpO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2VEZWNBbmREZW5vbUZyb21Db2luKGN1cnJlbmNpZXMsIGNvaW4pIHtcbiAgICAgICAgbGV0IGN1cnJlbmN5ID0gY3VycmVuY2llcy5maW5kKChjdXJyZW5jeSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbmN5LmNvaW5NaW5pbWFsRGVub20gPT09IGNvaW4uZGVub207XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWN1cnJlbmN5KSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgY3VycmVuY3kgaXMgdW5rbm93biwganVzdCB1c2UgdGhlIHJhdyBjdXJyZW5jeS5cbiAgICAgICAgICAgIGN1cnJlbmN5ID0ge1xuICAgICAgICAgICAgICAgIGNvaW5EZWNpbWFsczogMCxcbiAgICAgICAgICAgICAgICBjb2luRGVub206IGNvaW4uZGVub20sXG4gICAgICAgICAgICAgICAgY29pbk1pbmltYWxEZW5vbTogY29pbi5kZW5vbSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHByZWNpc2lvbiA9IG5ldyBkZWNpbWFsXzEuRGVjKDEpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbmN5LmNvaW5EZWNpbWFsczsgaSsrKSB7XG4gICAgICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24ubXVsKG5ldyBkZWNpbWFsXzEuRGVjKDEwKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVjQW1vdW50ID0gbmV3IGRlY2ltYWxfMS5EZWMoY29pbi5hbW91bnQpLnF1b1RydW5jYXRlKHByZWNpc2lvbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhbW91bnQ6IGRlY0Ftb3VudC50b1N0cmluZyhjdXJyZW5jeS5jb2luRGVjaW1hbHMpLFxuICAgICAgICAgICAgZGVub206IGN1cnJlbmN5LmNvaW5EZW5vbSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIHNocmlua0RlY2ltYWxzKGRlYywgbWluRGVjaW1hbHMsIG1heERlY2ltYWxzLCBsb2NhbGUgPSBmYWxzZSkge1xuICAgICAgICBpZiAoZGVjLmVxdWFscyhuZXcgZGVjaW1hbF8xLkRlYygwKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBcIjBcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc05lZyA9IGRlYy5pc05lZ2F0aXZlKCk7XG4gICAgICAgIGNvbnN0IGludGVnZXIgPSBkZWMuYWJzKCkudHJ1bmNhdGUoKTtcbiAgICAgICAgY29uc3QgZnJhY3Rpb24gPSBkZWMuYWJzKCkuc3ViKG5ldyBkZWNpbWFsXzEuRGVjKGludGVnZXIpKTtcbiAgICAgICAgY29uc3QgZGVjaW1hbHMgPSBNYXRoLm1heChtYXhEZWNpbWFscyAtIGludGVnZXIudG9TdHJpbmcoKS5sZW5ndGggKyAxLCBtaW5EZWNpbWFscyk7XG4gICAgICAgIGNvbnN0IGZyYWN0aW9uU3RyID0gZGVjaW1hbHMgPT09IDAgPyBcIlwiIDogZnJhY3Rpb24udG9TdHJpbmcoZGVjaW1hbHMpLnJlcGxhY2UoXCIwLlwiLCBcIlwiKTtcbiAgICAgICAgY29uc3QgaW50ZWdlclN0ciA9IGxvY2FsZVxuICAgICAgICAgICAgPyBDb2luVXRpbHMuaW50ZWdlclN0cmluZ1RvVVNMb2NhbGVTdHJpbmcoaW50ZWdlci50b1N0cmluZygpKVxuICAgICAgICAgICAgOiBpbnRlZ2VyLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiAoKGlzTmVnID8gXCItXCIgOiBcIlwiKSArXG4gICAgICAgICAgICBpbnRlZ2VyU3RyICtcbiAgICAgICAgICAgIChmcmFjdGlvblN0ci5sZW5ndGggPiAwID8gXCIuXCIgOiBcIlwiKSArXG4gICAgICAgICAgICBmcmFjdGlvblN0cik7XG4gICAgfVxuICAgIHN0YXRpYyBjb2luVG9UcmltbWVkU3RyaW5nKGNvaW4sIGN1cnJlbmN5LCBzZXBhcmF0b3IgPSBcIiBcIikge1xuICAgICAgICBjb25zdCBkZWMgPSBuZXcgZGVjaW1hbF8xLkRlYyhjb2luLmFtb3VudCkucXVvVHJ1bmNhdGUoZGVjX3V0aWxzXzEuRGVjVXRpbHMuZ2V0UHJlY2lzaW9uRGVjKGN1cnJlbmN5LmNvaW5EZWNpbWFscykpO1xuICAgICAgICByZXR1cm4gYCR7ZGVjX3V0aWxzXzEuRGVjVXRpbHMudHJpbShkZWMpfSR7c2VwYXJhdG9yfSR7Y3VycmVuY3kuY29pbkRlbm9tfWA7XG4gICAgfVxufVxuZXhwb3J0cy5Db2luVXRpbHMgPSBDb2luVXRpbHM7XG5Db2luVXRpbHMuaW50ZWdlclN0cmluZ1RvVVNMb2NhbGVTdHJpbmcgPSB1dGlsc18xLmludGVnZXJTdHJpbmdUb1VTTG9jYWxlU3RyaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29pbi11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/coin-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/coin.js":
/*!*******************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/coin.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Coin = void 0;\nconst int_1 = __webpack_require__(/*! ./int */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/int.js\");\nclass Coin {\n    static parse(str) {\n        const re = new RegExp(\"([0-9]+)[ ]*([a-zA-Z]+)$\");\n        const execed = re.exec(str);\n        if (!execed || execed.length !== 3) {\n            throw new Error(\"Invalid coin str\");\n        }\n        const denom = execed[2];\n        const amount = execed[1];\n        return new Coin(denom, amount);\n    }\n    constructor(denom, amount) {\n        this.denom = denom;\n        this.amount = amount instanceof int_1.Int ? amount : new int_1.Int(amount);\n    }\n    toString() {\n        return `${this.amount.toString()}${this.denom}`;\n    }\n}\nexports.Coin = Coin;\n//# sourceMappingURL=coin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC91bml0L2J1aWxkL2NvaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaLGNBQWMsbUJBQU8sQ0FBQyxtRUFBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUIsRUFBRSxXQUFXO0FBQ3REO0FBQ0E7QUFDQSxZQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHVuaXRcXGJ1aWxkXFxjb2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2luID0gdm9pZCAwO1xuY29uc3QgaW50XzEgPSByZXF1aXJlKFwiLi9pbnRcIik7XG5jbGFzcyBDb2luIHtcbiAgICBzdGF0aWMgcGFyc2Uoc3RyKSB7XG4gICAgICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChcIihbMC05XSspWyBdKihbYS16QS1aXSspJFwiKTtcbiAgICAgICAgY29uc3QgZXhlY2VkID0gcmUuZXhlYyhzdHIpO1xuICAgICAgICBpZiAoIWV4ZWNlZCB8fCBleGVjZWQubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvaW4gc3RyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlbm9tID0gZXhlY2VkWzJdO1xuICAgICAgICBjb25zdCBhbW91bnQgPSBleGVjZWRbMV07XG4gICAgICAgIHJldHVybiBuZXcgQ29pbihkZW5vbSwgYW1vdW50KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZGVub20sIGFtb3VudCkge1xuICAgICAgICB0aGlzLmRlbm9tID0gZGVub207XG4gICAgICAgIHRoaXMuYW1vdW50ID0gYW1vdW50IGluc3RhbmNlb2YgaW50XzEuSW50ID8gYW1vdW50IDogbmV3IGludF8xLkludChhbW91bnQpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuYW1vdW50LnRvU3RyaW5nKCl9JHt0aGlzLmRlbm9tfWA7XG4gICAgfVxufVxuZXhwb3J0cy5Db2luID0gQ29pbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvaW4uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/coin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/dec-utils.js":
/*!************************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/dec-utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DecUtils = void 0;\nconst decimal_1 = __webpack_require__(/*! ./decimal */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/decimal.js\");\nconst int_1 = __webpack_require__(/*! ./int */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/int.js\");\nclass DecUtils {\n    static trim(dec) {\n        let decStr = typeof dec === \"string\" ? dec : dec.toString();\n        if (decStr.indexOf(\".\") < 0) {\n            return decStr;\n        }\n        for (let i = decStr.length - 1; i >= 0; i--) {\n            if (decStr[i] === \"0\") {\n                decStr = decStr.slice(0, i);\n            }\n            else {\n                break;\n            }\n        }\n        if (decStr.length > 0) {\n            if (decStr[decStr.length - 1] === \".\") {\n                decStr = decStr.slice(0, decStr.length - 1);\n            }\n        }\n        return decStr;\n    }\n    static getTenExponentN(n) {\n        if (n < -decimal_1.Dec.precision) {\n            // Dec can only handle up to precision 18.\n            // Anything less than 18 precision is 0, so there is a high probability of an error.\n            throw new Error(\"Too little precision\");\n        }\n        if (DecUtils.tenExponentNs[n.toString()]) {\n            return DecUtils.tenExponentNs[n.toString()];\n        }\n        const dec = new decimal_1.Dec(10).pow(new int_1.Int(n));\n        DecUtils.tenExponentNs[n.toString()] = dec;\n        return dec;\n    }\n    static getTenExponentNInPrecisionRange(n) {\n        if (n > decimal_1.Dec.precision) {\n            throw new Error(\"Too much precision\");\n        }\n        return DecUtils.getTenExponentN(n);\n    }\n    /**\n     * @deprecated Use`getTenExponentNInPrecisionRange`\n     */\n    static getPrecisionDec(precision) {\n        return DecUtils.getTenExponentNInPrecisionRange(precision);\n    }\n}\nexports.DecUtils = DecUtils;\nDecUtils.tenExponentNs = {};\n//# sourceMappingURL=dec-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC91bml0L2J1aWxkL2RlYy11dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsa0JBQWtCLG1CQUFPLENBQUMsMkVBQVc7QUFDckMsY0FBYyxtQkFBTyxDQUFDLG1FQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHVuaXRcXGJ1aWxkXFxkZWMtdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlY1V0aWxzID0gdm9pZCAwO1xuY29uc3QgZGVjaW1hbF8xID0gcmVxdWlyZShcIi4vZGVjaW1hbFwiKTtcbmNvbnN0IGludF8xID0gcmVxdWlyZShcIi4vaW50XCIpO1xuY2xhc3MgRGVjVXRpbHMge1xuICAgIHN0YXRpYyB0cmltKGRlYykge1xuICAgICAgICBsZXQgZGVjU3RyID0gdHlwZW9mIGRlYyA9PT0gXCJzdHJpbmdcIiA/IGRlYyA6IGRlYy50b1N0cmluZygpO1xuICAgICAgICBpZiAoZGVjU3RyLmluZGV4T2YoXCIuXCIpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlY1N0cjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gZGVjU3RyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAoZGVjU3RyW2ldID09PSBcIjBcIikge1xuICAgICAgICAgICAgICAgIGRlY1N0ciA9IGRlY1N0ci5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWNTdHIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKGRlY1N0cltkZWNTdHIubGVuZ3RoIC0gMV0gPT09IFwiLlwiKSB7XG4gICAgICAgICAgICAgICAgZGVjU3RyID0gZGVjU3RyLnNsaWNlKDAsIGRlY1N0ci5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVjU3RyO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VGVuRXhwb25lbnROKG4pIHtcbiAgICAgICAgaWYgKG4gPCAtZGVjaW1hbF8xLkRlYy5wcmVjaXNpb24pIHtcbiAgICAgICAgICAgIC8vIERlYyBjYW4gb25seSBoYW5kbGUgdXAgdG8gcHJlY2lzaW9uIDE4LlxuICAgICAgICAgICAgLy8gQW55dGhpbmcgbGVzcyB0aGFuIDE4IHByZWNpc2lvbiBpcyAwLCBzbyB0aGVyZSBpcyBhIGhpZ2ggcHJvYmFiaWxpdHkgb2YgYW4gZXJyb3IuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb28gbGl0dGxlIHByZWNpc2lvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoRGVjVXRpbHMudGVuRXhwb25lbnROc1tuLnRvU3RyaW5nKCldKSB7XG4gICAgICAgICAgICByZXR1cm4gRGVjVXRpbHMudGVuRXhwb25lbnROc1tuLnRvU3RyaW5nKCldO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlYyA9IG5ldyBkZWNpbWFsXzEuRGVjKDEwKS5wb3cobmV3IGludF8xLkludChuKSk7XG4gICAgICAgIERlY1V0aWxzLnRlbkV4cG9uZW50TnNbbi50b1N0cmluZygpXSA9IGRlYztcbiAgICAgICAgcmV0dXJuIGRlYztcbiAgICB9XG4gICAgc3RhdGljIGdldFRlbkV4cG9uZW50TkluUHJlY2lzaW9uUmFuZ2Uobikge1xuICAgICAgICBpZiAobiA+IGRlY2ltYWxfMS5EZWMucHJlY2lzaW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb28gbXVjaCBwcmVjaXNpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIERlY1V0aWxzLmdldFRlbkV4cG9uZW50TihuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlYGdldFRlbkV4cG9uZW50TkluUHJlY2lzaW9uUmFuZ2VgXG4gICAgICovXG4gICAgc3RhdGljIGdldFByZWNpc2lvbkRlYyhwcmVjaXNpb24pIHtcbiAgICAgICAgcmV0dXJuIERlY1V0aWxzLmdldFRlbkV4cG9uZW50TkluUHJlY2lzaW9uUmFuZ2UocHJlY2lzaW9uKTtcbiAgICB9XG59XG5leHBvcnRzLkRlY1V0aWxzID0gRGVjVXRpbHM7XG5EZWNVdGlscy50ZW5FeHBvbmVudE5zID0ge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWMtdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/dec-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/decimal.js":
/*!**********************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/decimal.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Dec = void 0;\nconst big_integer_1 = __importDefault(__webpack_require__(/*! big-integer */ \"(ssr)/./node_modules/big-integer/BigInteger.js\"));\nconst int_1 = __webpack_require__(/*! ./int */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/int.js\");\nconst etc_1 = __webpack_require__(/*! ./etc */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/etc.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/utils.js\");\nclass Dec {\n    static calcPrecisionMultiplier(prec) {\n        if (prec < 0) {\n            throw new Error(\"Invalid prec\");\n        }\n        if (prec > Dec.precision) {\n            throw new Error(\"Too much precision\");\n        }\n        const key = prec.toString();\n        const cached = Dec.precisionMultipliers.get(key);\n        if (cached) {\n            return cached;\n        }\n        const zerosToAdd = Dec.precision - prec;\n        const multiplier = (0, big_integer_1.default)(10).pow(zerosToAdd);\n        Dec.precisionMultipliers.set(key, multiplier);\n        return multiplier;\n    }\n    static reduceDecimalsFromString(str) {\n        const decimalPointIndex = str.indexOf(\".\");\n        if (decimalPointIndex < 0) {\n            return {\n                res: str,\n                isDownToZero: false,\n            };\n        }\n        const exceededDecimals = str.length - 1 - decimalPointIndex - Dec.precision;\n        if (exceededDecimals <= 0) {\n            return {\n                res: str,\n                isDownToZero: false,\n            };\n        }\n        const res = str.slice(0, str.length - exceededDecimals);\n        return {\n            res,\n            isDownToZero: /^[0.]*$/.test(res),\n        };\n    }\n    /**\n     * Create a new Dec from integer with decimal place at prec\n     * @param int - Parse a number | bigInteger | string into a Dec.\n     * If int is string and contains dot(.), prec is ignored and automatically calculated.\n     * @param prec - Precision\n     */\n    constructor(int, prec = 0) {\n        if (typeof int === \"number\") {\n            int = int.toString();\n        }\n        if (typeof int === \"string\") {\n            if (int.length === 0) {\n                throw new Error(\"empty string\");\n            }\n            if (!(0, etc_1.isValidDecimalString)(int)) {\n                if ((0, etc_1.isExponentDecString)(int)) {\n                    int = (0, etc_1.exponentDecStringToDecString)(int);\n                }\n                else {\n                    throw new Error(`invalid decimal: ${int}`);\n                }\n            }\n            // Even if an input with more than 18 decimals, it does not throw an error and ignores the rest.\n            const reduced = Dec.reduceDecimalsFromString(int);\n            if (reduced.isDownToZero) {\n                // However, as a result, if the input becomes 0, a problem may occur in mul or quo. In this case, print a warning.\n                console.log(`WARNING: Got ${int}. Dec can only handle up to 18 decimals. However, since the decimal point of the input exceeds 18 digits, the remainder is discarded. As a result, input becomes 0.`);\n            }\n            int = reduced.res;\n            if (int.indexOf(\".\") >= 0) {\n                prec = int.length - int.indexOf(\".\") - 1;\n                int = int.replace(\".\", \"\");\n            }\n            this.int = (0, big_integer_1.default)(int);\n        }\n        else if (int instanceof int_1.Int) {\n            this.int = (0, big_integer_1.default)(int.toString());\n        }\n        else if (int instanceof int_1.Uint) {\n            this.int = (0, big_integer_1.default)(int.toString());\n        }\n        else if (typeof int === \"bigint\") {\n            this.int = (0, big_integer_1.default)(int);\n        }\n        else {\n            this.int = (0, big_integer_1.default)(int);\n        }\n        this.int = this.int.multiply(Dec.calcPrecisionMultiplier(prec));\n        this.checkBitLen();\n    }\n    checkBitLen() {\n        if (this.int.abs().gt(Dec.maxDec)) {\n            throw new Error(`Integer out of range ${this.int.toString()}`);\n        }\n    }\n    isZero() {\n        return this.int.eq((0, big_integer_1.default)(0));\n    }\n    isNegative() {\n        return this.int.isNegative();\n    }\n    isPositive() {\n        return this.int.isPositive();\n    }\n    equals(d2) {\n        return this.int.eq(d2.int);\n    }\n    /**\n     * Alias for the greater method.\n     */\n    gt(d2) {\n        return this.int.gt(d2.int);\n    }\n    /**\n     * Alias for the greaterOrEquals method.\n     */\n    gte(d2) {\n        return this.int.geq(d2.int);\n    }\n    /**\n     * Alias for the lesser method.\n     */\n    lt(d2) {\n        return this.int.lt(d2.int);\n    }\n    /**\n     * Alias for the lesserOrEquals method.\n     */\n    lte(d2) {\n        return this.int.leq(d2.int);\n    }\n    /**\n     * reverse the decimal sign.\n     */\n    neg() {\n        return new Dec(this.int.negate(), Dec.precision);\n    }\n    /**\n     * Returns the absolute value of a decimals.\n     */\n    abs() {\n        return new Dec(this.int.abs(), Dec.precision);\n    }\n    add(d2) {\n        return new Dec(this.int.add(d2.int), Dec.precision);\n    }\n    sub(d2) {\n        return new Dec(this.int.subtract(d2.int), Dec.precision);\n    }\n    pow(n) {\n        if (n.isZero()) {\n            return new Dec(1);\n        }\n        if (n.isNegative()) {\n            return new Dec(1).quo(this.pow(n.abs()));\n        }\n        let base = new Dec(this.int, Dec.precision);\n        let tmp = new Dec(1);\n        for (let i = n; i.gt(new int_1.Int(1)); i = i.div(new int_1.Int(2))) {\n            if (!i.mod(new int_1.Int(2)).isZero()) {\n                tmp = tmp.mul(base);\n            }\n            base = base.mul(base);\n        }\n        return base.mul(tmp);\n    }\n    approxSqrt() {\n        return this.approxRoot(2);\n    }\n    approxRoot(root, maxIters = 300) {\n        if (this.isNegative()) {\n            return this.neg().approxRoot(root).neg();\n        }\n        if (root === 1 || this.isZero() || this.equals(Dec.one)) {\n            return this;\n        }\n        if (root === 0) {\n            return Dec.one;\n        }\n        let [guess, delta] = [Dec.one, Dec.one];\n        for (let i = 0; delta.abs().gt(Dec.smallestDec) && i < maxIters; i++) {\n            let prev = guess.pow(new int_1.Int(root - 1));\n            if (prev.isZero()) {\n                prev = Dec.smallestDec;\n            }\n            delta = this.quo(prev);\n            delta = delta.sub(guess);\n            delta = delta.quoTruncate(new Dec(root));\n            guess = guess.add(delta);\n        }\n        return guess;\n    }\n    mul(d2) {\n        return new Dec(this.mulRaw(d2).chopPrecisionAndRound(), Dec.precision);\n    }\n    mulTruncate(d2) {\n        return new Dec(this.mulRaw(d2).chopPrecisionAndTruncate(), Dec.precision);\n    }\n    mulRoundUp(d2) {\n        return new Dec(this.mulRaw(d2).chopPrecisionAndRoundUp(), Dec.precision);\n    }\n    mulRaw(d2) {\n        return new Dec(this.int.multiply(d2.int), Dec.precision);\n    }\n    quo(d2) {\n        return new Dec(this.quoRaw(d2).chopPrecisionAndRound(), Dec.precision);\n    }\n    quoTruncate(d2) {\n        return new Dec(this.quoRaw(d2).chopPrecisionAndTruncate(), Dec.precision);\n    }\n    quoRoundUp(d2) {\n        return new Dec(this.quoRaw(d2).chopPrecisionAndRoundUp(), Dec.precision);\n    }\n    quoRaw(d2) {\n        const precision = Dec.calcPrecisionMultiplier(0);\n        // multiply precision twice\n        const mul = this.int.multiply(precision).multiply(precision);\n        return new Dec(mul.divide(d2.int), Dec.precision);\n    }\n    isInteger() {\n        const precision = Dec.calcPrecisionMultiplier(0);\n        return this.int.remainder(precision).equals((0, big_integer_1.default)(0));\n    }\n    /**\n     * Remove a Precision amount of rightmost digits and perform bankers rounding\n     * on the remainder (gaussian rounding) on the digits which have been removed.\n     */\n    chopPrecisionAndRound() {\n        // Remove the negative and add it back when returning\n        if (this.isNegative()) {\n            const absoulteDec = this.abs();\n            const choped = absoulteDec.chopPrecisionAndRound();\n            return choped.negate();\n        }\n        const precision = Dec.calcPrecisionMultiplier(0);\n        const fivePrecision = precision.divide((0, big_integer_1.default)(2));\n        // Get the truncated quotient and remainder\n        const { quotient, remainder } = this.int.divmod(precision);\n        // If remainder is zero\n        if (remainder.equals((0, big_integer_1.default)(0))) {\n            return quotient;\n        }\n        if (remainder.lt(fivePrecision)) {\n            return quotient;\n        }\n        else if (remainder.gt(fivePrecision)) {\n            return quotient.add((0, big_integer_1.default)(1));\n        }\n        else {\n            // always round to an even number\n            if (quotient.divide((0, big_integer_1.default)(2)).equals((0, big_integer_1.default)(0))) {\n                return quotient;\n            }\n            else {\n                return quotient.add((0, big_integer_1.default)(1));\n            }\n        }\n    }\n    chopPrecisionAndRoundUp() {\n        // Remove the negative and add it back when returning\n        if (this.isNegative()) {\n            const absoulteDec = this.abs();\n            // truncate since d is negative...\n            const choped = absoulteDec.chopPrecisionAndTruncate();\n            return choped.negate();\n        }\n        const precision = Dec.calcPrecisionMultiplier(0);\n        // Get the truncated quotient and remainder\n        const { quotient, remainder } = this.int.divmod(precision);\n        // If remainder is zero\n        if (remainder.equals((0, big_integer_1.default)(0))) {\n            return quotient;\n        }\n        return quotient.add((0, big_integer_1.default)(1));\n    }\n    /**\n     * Similar to chopPrecisionAndRound, but always rounds down\n     */\n    chopPrecisionAndTruncate() {\n        const precision = Dec.calcPrecisionMultiplier(0);\n        return this.int.divide(precision);\n    }\n    toString(prec = Dec.precision, locale = false) {\n        const precision = Dec.calcPrecisionMultiplier(0);\n        const int = this.int.abs();\n        const { quotient: integer, remainder: fraction } = int.divmod(precision);\n        let fractionStr = fraction.toString(10);\n        for (let i = 0, l = fractionStr.length; i < Dec.precision - l; i++) {\n            fractionStr = \"0\" + fractionStr;\n        }\n        fractionStr = fractionStr.substring(0, prec);\n        const isNegative = this.isNegative() &&\n            !(integer.eq((0, big_integer_1.default)(0)) && fractionStr.length === 0);\n        const integerStr = locale\n            ? (0, utils_1.integerStringToUSLocaleString)(integer.toString())\n            : integer.toString();\n        return `${isNegative ? \"-\" : \"\"}${integerStr}${fractionStr.length > 0 ? \".\" + fractionStr : \"\"}`;\n    }\n    round() {\n        return new int_1.Int(this.chopPrecisionAndRound());\n    }\n    roundUp() {\n        return new int_1.Int(this.chopPrecisionAndRoundUp());\n    }\n    truncate() {\n        return new int_1.Int(this.chopPrecisionAndTruncate());\n    }\n    roundDec() {\n        return new Dec(this.chopPrecisionAndRound(), 0);\n    }\n    roundUpDec() {\n        return new Dec(this.chopPrecisionAndRoundUp(), 0);\n    }\n    truncateDec() {\n        return new Dec(this.chopPrecisionAndTruncate(), 0);\n    }\n}\nexports.Dec = Dec;\nDec.precision = 18;\n// Bytes required to represent the above precision is 18.\n// Ceiling[Log2[999 999 999 999 999 999]]\nDec.decimalPrecisionBits = 60;\n// Max bit length for `Dec` is 256 + 60(decimalPrecisionBits)\n// The int in the `Dec` is handled as integer assuming that it has 18 precision.\n// (2 ** (256 + 60) - 1)\nDec.maxDec = (0, big_integer_1.default)(\"133499189745056880149688856635597007162669032647290798121690100488888732861290034376435130433535\");\nDec.precisionMultipliers = new Map();\nDec.zero = new Dec(0);\n/** Smallest `Dec` with current precision. */\nDec.smallestDec = new Dec(\"1\", Dec.precision);\nDec.one = new Dec(1);\nint_1.Int.prototype.toDec = function () {\n    return new Dec(this);\n};\nint_1.Uint.prototype.toDec = function () {\n    return new Dec(this);\n};\n//# sourceMappingURL=decimal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/decimal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/etc.js":
/*!******************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/etc.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.exponentDecStringToDecString = exports.isExponentDecString = exports.isValidDecimalString = exports.isValidIntegerString = void 0;\nconst regexIntString = /^-?\\d+$/;\nconst regexDecString = /^-?\\d+.?\\d*$/;\nconst regexExponentDecString = /^(-?)([\\d.]+)e([-+])([\\d]+)$/;\nfunction isValidIntegerString(str) {\n    return regexIntString.test(str);\n}\nexports.isValidIntegerString = isValidIntegerString;\nfunction isValidDecimalString(str) {\n    return regexDecString.test(str);\n}\nexports.isValidDecimalString = isValidDecimalString;\nfunction isExponentDecString(str) {\n    return regexExponentDecString.test(str);\n}\nexports.isExponentDecString = isExponentDecString;\nfunction makeZerosStr(len) {\n    let r = \"\";\n    for (let i = 0; i < len; i++) {\n        r += \"0\";\n    }\n    return r;\n}\nfunction removeHeadZeros(str) {\n    while (str.length > 0 && str[0] === \"0\") {\n        str = str.slice(1);\n    }\n    if (str.length === 0 || str[0] === \".\") {\n        return \"0\" + str;\n    }\n    return str;\n}\nfunction exponentDecStringToDecString(str) {\n    const split = str.split(regexExponentDecString);\n    if (split.length !== 6) {\n        return str;\n    }\n    const isNeg = split[1] === \"-\";\n    let numStr = split[2];\n    const numStrFractionIndex = numStr.indexOf(\".\");\n    const exponentStr = split[4];\n    let exponent = parseInt(exponentStr) * (split[3] === \"-\" ? -1 : 1);\n    if (numStrFractionIndex >= 0) {\n        const fractionLen = numStr.length - numStrFractionIndex - 1;\n        exponent = exponent - fractionLen;\n        numStr = removeHeadZeros(numStr.replace(\".\", \"\"));\n    }\n    const prefix = isNeg ? \"-\" : \"\";\n    if (exponent < 0) {\n        if (numStr.length > -exponent) {\n            const fractionPosition = numStr.length + exponent;\n            return (prefix +\n                (numStr.slice(0, fractionPosition) +\n                    \".\" +\n                    numStr.slice(fractionPosition)));\n        }\n        return prefix + \"0.\" + makeZerosStr(-(numStr.length + exponent)) + numStr;\n    }\n    else {\n        return prefix + numStr + makeZerosStr(exponent);\n    }\n}\nexports.exponentDecStringToDecString = exponentDecStringToDecString;\n//# sourceMappingURL=etc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC91bml0L2J1aWxkL2V0Yy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0MsR0FBRywyQkFBMkIsR0FBRyw0QkFBNEIsR0FBRyw0QkFBNEI7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxPbmVEcml2ZVxcRGVza3RvcFxcdmF1bHRxdWVzdFxcbm9kZV9tb2R1bGVzXFxAa2VwbHItd2FsbGV0XFx1bml0XFxidWlsZFxcZXRjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leHBvbmVudERlY1N0cmluZ1RvRGVjU3RyaW5nID0gZXhwb3J0cy5pc0V4cG9uZW50RGVjU3RyaW5nID0gZXhwb3J0cy5pc1ZhbGlkRGVjaW1hbFN0cmluZyA9IGV4cG9ydHMuaXNWYWxpZEludGVnZXJTdHJpbmcgPSB2b2lkIDA7XG5jb25zdCByZWdleEludFN0cmluZyA9IC9eLT9cXGQrJC87XG5jb25zdCByZWdleERlY1N0cmluZyA9IC9eLT9cXGQrLj9cXGQqJC87XG5jb25zdCByZWdleEV4cG9uZW50RGVjU3RyaW5nID0gL14oLT8pKFtcXGQuXSspZShbLStdKShbXFxkXSspJC87XG5mdW5jdGlvbiBpc1ZhbGlkSW50ZWdlclN0cmluZyhzdHIpIHtcbiAgICByZXR1cm4gcmVnZXhJbnRTdHJpbmcudGVzdChzdHIpO1xufVxuZXhwb3J0cy5pc1ZhbGlkSW50ZWdlclN0cmluZyA9IGlzVmFsaWRJbnRlZ2VyU3RyaW5nO1xuZnVuY3Rpb24gaXNWYWxpZERlY2ltYWxTdHJpbmcoc3RyKSB7XG4gICAgcmV0dXJuIHJlZ2V4RGVjU3RyaW5nLnRlc3Qoc3RyKTtcbn1cbmV4cG9ydHMuaXNWYWxpZERlY2ltYWxTdHJpbmcgPSBpc1ZhbGlkRGVjaW1hbFN0cmluZztcbmZ1bmN0aW9uIGlzRXhwb25lbnREZWNTdHJpbmcoc3RyKSB7XG4gICAgcmV0dXJuIHJlZ2V4RXhwb25lbnREZWNTdHJpbmcudGVzdChzdHIpO1xufVxuZXhwb3J0cy5pc0V4cG9uZW50RGVjU3RyaW5nID0gaXNFeHBvbmVudERlY1N0cmluZztcbmZ1bmN0aW9uIG1ha2VaZXJvc1N0cihsZW4pIHtcbiAgICBsZXQgciA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICByICs9IFwiMFwiO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbn1cbmZ1bmN0aW9uIHJlbW92ZUhlYWRaZXJvcyhzdHIpIHtcbiAgICB3aGlsZSAoc3RyLmxlbmd0aCA+IDAgJiYgc3RyWzBdID09PSBcIjBcIikge1xuICAgICAgICBzdHIgPSBzdHIuc2xpY2UoMSk7XG4gICAgfVxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwIHx8IHN0clswXSA9PT0gXCIuXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiMFwiICsgc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuZnVuY3Rpb24gZXhwb25lbnREZWNTdHJpbmdUb0RlY1N0cmluZyhzdHIpIHtcbiAgICBjb25zdCBzcGxpdCA9IHN0ci5zcGxpdChyZWdleEV4cG9uZW50RGVjU3RyaW5nKTtcbiAgICBpZiAoc3BsaXQubGVuZ3RoICE9PSA2KSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIGNvbnN0IGlzTmVnID0gc3BsaXRbMV0gPT09IFwiLVwiO1xuICAgIGxldCBudW1TdHIgPSBzcGxpdFsyXTtcbiAgICBjb25zdCBudW1TdHJGcmFjdGlvbkluZGV4ID0gbnVtU3RyLmluZGV4T2YoXCIuXCIpO1xuICAgIGNvbnN0IGV4cG9uZW50U3RyID0gc3BsaXRbNF07XG4gICAgbGV0IGV4cG9uZW50ID0gcGFyc2VJbnQoZXhwb25lbnRTdHIpICogKHNwbGl0WzNdID09PSBcIi1cIiA/IC0xIDogMSk7XG4gICAgaWYgKG51bVN0ckZyYWN0aW9uSW5kZXggPj0gMCkge1xuICAgICAgICBjb25zdCBmcmFjdGlvbkxlbiA9IG51bVN0ci5sZW5ndGggLSBudW1TdHJGcmFjdGlvbkluZGV4IC0gMTtcbiAgICAgICAgZXhwb25lbnQgPSBleHBvbmVudCAtIGZyYWN0aW9uTGVuO1xuICAgICAgICBudW1TdHIgPSByZW1vdmVIZWFkWmVyb3MobnVtU3RyLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgICB9XG4gICAgY29uc3QgcHJlZml4ID0gaXNOZWcgPyBcIi1cIiA6IFwiXCI7XG4gICAgaWYgKGV4cG9uZW50IDwgMCkge1xuICAgICAgICBpZiAobnVtU3RyLmxlbmd0aCA+IC1leHBvbmVudCkge1xuICAgICAgICAgICAgY29uc3QgZnJhY3Rpb25Qb3NpdGlvbiA9IG51bVN0ci5sZW5ndGggKyBleHBvbmVudDtcbiAgICAgICAgICAgIHJldHVybiAocHJlZml4ICtcbiAgICAgICAgICAgICAgICAobnVtU3RyLnNsaWNlKDAsIGZyYWN0aW9uUG9zaXRpb24pICtcbiAgICAgICAgICAgICAgICAgICAgXCIuXCIgK1xuICAgICAgICAgICAgICAgICAgICBudW1TdHIuc2xpY2UoZnJhY3Rpb25Qb3NpdGlvbikpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJlZml4ICsgXCIwLlwiICsgbWFrZVplcm9zU3RyKC0obnVtU3RyLmxlbmd0aCArIGV4cG9uZW50KSkgKyBudW1TdHI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgbnVtU3RyICsgbWFrZVplcm9zU3RyKGV4cG9uZW50KTtcbiAgICB9XG59XG5leHBvcnRzLmV4cG9uZW50RGVjU3RyaW5nVG9EZWNTdHJpbmcgPSBleHBvbmVudERlY1N0cmluZ1RvRGVjU3RyaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXRjLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/etc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./int-pretty */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/int-pretty.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coin-pretty */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/coin-pretty.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coin */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/coin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./int */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/int.js\"), exports);\n__exportStar(__webpack_require__(/*! ./decimal */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/decimal.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coin-utils */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/coin-utils.js\"), exports);\n__exportStar(__webpack_require__(/*! ./dec-utils */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/dec-utils.js\"), exports);\n__exportStar(__webpack_require__(/*! ./price-pretty */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/price-pretty.js\"), exports);\n__exportStar(__webpack_require__(/*! ./rate-pretty */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/rate-pretty.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC91bml0L2J1aWxkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxpRkFBYztBQUNuQyxhQUFhLG1CQUFPLENBQUMsbUZBQWU7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLHFFQUFRO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQyxtRUFBTztBQUM1QixhQUFhLG1CQUFPLENBQUMsMkVBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLGlGQUFjO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQywrRUFBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMscUZBQWdCO0FBQ3JDLGFBQWEsbUJBQU8sQ0FBQyxtRkFBZTtBQUNwQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcT25lRHJpdmVcXERlc2t0b3BcXHZhdWx0cXVlc3RcXG5vZGVfbW9kdWxlc1xcQGtlcGxyLXdhbGxldFxcdW5pdFxcYnVpbGRcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaW50LXByZXR0eVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbi1wcmV0dHlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvaW5cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2ludFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGVjaW1hbFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29pbi11dGlsc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGVjLXV0aWxzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wcmljZS1wcmV0dHlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3JhdGUtcHJldHR5XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/int-pretty.js":
/*!*************************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/int-pretty.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IntPretty = void 0;\nconst int_1 = __webpack_require__(/*! ./int */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/int.js\");\nconst decimal_1 = __webpack_require__(/*! ./decimal */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/decimal.js\");\nconst dec_utils_1 = __webpack_require__(/*! ./dec-utils */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/dec-utils.js\");\nconst coin_utils_1 = __webpack_require__(/*! ./coin-utils */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/coin-utils.js\");\nclass IntPretty {\n    constructor(num) {\n        this.floatingDecimalPointRight = 0;\n        this._options = {\n            maxDecimals: 0,\n            trim: false,\n            shrink: false,\n            ready: true,\n            locale: true,\n            inequalitySymbol: false,\n            inequalitySymbolSeparator: \" \",\n        };\n        if (typeof num === \"object\" && \"toDec\" in num) {\n            num = num.toDec();\n        }\n        else if (!(num instanceof decimal_1.Dec)) {\n            num = new decimal_1.Dec(num);\n        }\n        if (num.isZero()) {\n            this.dec = num;\n            return;\n        }\n        let dec = num;\n        let decPrecision = 0;\n        for (let i = 0; i < 18; i++) {\n            if (!dec.truncate().equals(new int_1.Int(0)) &&\n                dec.equals(new decimal_1.Dec(dec.truncate()))) {\n                break;\n            }\n            dec = dec.mul(new decimal_1.Dec(10));\n            decPrecision++;\n        }\n        this.dec = num;\n        this._options.maxDecimals = decPrecision;\n    }\n    get options() {\n        return this._options;\n    }\n    moveDecimalPointLeft(delta) {\n        const pretty = this.clone();\n        pretty.floatingDecimalPointRight += -delta;\n        return pretty;\n    }\n    moveDecimalPointRight(delta) {\n        const pretty = this.clone();\n        pretty.floatingDecimalPointRight += delta;\n        return pretty;\n    }\n    /**\n     * @deprecated Use`moveDecimalPointLeft`\n     */\n    increasePrecision(delta) {\n        return this.moveDecimalPointLeft(delta);\n    }\n    /**\n     * @deprecated Use`moveDecimalPointRight`\n     */\n    decreasePrecision(delta) {\n        return this.moveDecimalPointRight(delta);\n    }\n    maxDecimals(max) {\n        const pretty = this.clone();\n        pretty._options.maxDecimals = max;\n        return pretty;\n    }\n    inequalitySymbol(bool) {\n        const pretty = this.clone();\n        pretty._options.inequalitySymbol = bool;\n        return pretty;\n    }\n    inequalitySymbolSeparator(str) {\n        const pretty = this.clone();\n        pretty._options.inequalitySymbolSeparator = str;\n        return pretty;\n    }\n    trim(bool) {\n        const pretty = this.clone();\n        pretty._options.trim = bool;\n        return pretty;\n    }\n    shrink(bool) {\n        const pretty = this.clone();\n        pretty._options.shrink = bool;\n        return pretty;\n    }\n    locale(locale) {\n        const pretty = this.clone();\n        pretty._options.locale = locale;\n        return pretty;\n    }\n    /**\n     * Ready indicates the actual value is ready to show the users.\n     * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n     * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n     * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n     * @param bool\n     */\n    ready(bool) {\n        const pretty = this.clone();\n        pretty._options.ready = bool;\n        return pretty;\n    }\n    get isReady() {\n        return this._options.ready;\n    }\n    add(target) {\n        if (!(target instanceof decimal_1.Dec)) {\n            target = target.toDec();\n        }\n        const pretty = new IntPretty(this.toDec().add(target));\n        pretty._options = Object.assign({}, this._options);\n        return pretty;\n    }\n    sub(target) {\n        if (!(target instanceof decimal_1.Dec)) {\n            target = target.toDec();\n        }\n        const pretty = new IntPretty(this.toDec().sub(target));\n        pretty._options = Object.assign({}, this._options);\n        return pretty;\n    }\n    mul(target) {\n        if (!(target instanceof decimal_1.Dec)) {\n            target = target.toDec();\n        }\n        const pretty = new IntPretty(this.toDec().mul(target));\n        pretty._options = Object.assign({}, this._options);\n        return pretty;\n    }\n    quo(target) {\n        if (!(target instanceof decimal_1.Dec)) {\n            target = target.toDec();\n        }\n        const pretty = new IntPretty(this.toDec().quo(target));\n        pretty._options = Object.assign({}, this._options);\n        return pretty;\n    }\n    toDec() {\n        if (this.floatingDecimalPointRight === 0) {\n            return this.dec;\n        }\n        else if (this.floatingDecimalPointRight > 0) {\n            return this.dec.mulTruncate(dec_utils_1.DecUtils.getTenExponentN(this.floatingDecimalPointRight));\n        }\n        else {\n            // Since a decimal in Dec cannot exceed 18, it cannot be computed at once.\n            let i = -this.floatingDecimalPointRight;\n            let dec = this.dec;\n            while (i > 0) {\n                if (i >= decimal_1.Dec.precision) {\n                    dec = dec.mulTruncate(dec_utils_1.DecUtils.getTenExponentN(-decimal_1.Dec.precision));\n                    i -= decimal_1.Dec.precision;\n                }\n                else {\n                    dec = dec.mulTruncate(dec_utils_1.DecUtils.getTenExponentN(-(i % decimal_1.Dec.precision)));\n                    break;\n                }\n            }\n            return dec;\n        }\n    }\n    toString() {\n        return this.toStringWithSymbols(\"\", \"\");\n    }\n    toStringWithSymbols(prefix, suffix) {\n        const dec = this.toDec();\n        if (this._options.inequalitySymbol &&\n            !dec.isZero() &&\n            dec.abs().lt(dec_utils_1.DecUtils.getTenExponentN(-this._options.maxDecimals))) {\n            const isNeg = dec.isNegative();\n            return `${isNeg ? \">\" : \"<\"}${this._options.inequalitySymbolSeparator}${isNeg ? \"-\" : \"\"}${prefix}${dec_utils_1.DecUtils.getTenExponentN(-this._options.maxDecimals).toString(this._options.maxDecimals, this._options.locale)}${suffix}`;\n        }\n        let result;\n        if (!this._options.shrink) {\n            result = dec.toString(this._options.maxDecimals, this._options.locale);\n        }\n        else {\n            result = coin_utils_1.CoinUtils.shrinkDecimals(dec, 0, this._options.maxDecimals, this._options.locale);\n        }\n        if (this._options.trim) {\n            result = dec_utils_1.DecUtils.trim(result);\n        }\n        const isNeg = result.charAt(0) === \"-\";\n        if (isNeg) {\n            result = result.slice(1);\n        }\n        return `${isNeg ? \"-\" : \"\"}${prefix}${result}${suffix}`;\n    }\n    clone() {\n        const pretty = new IntPretty(this.dec);\n        pretty.dec = this.dec;\n        pretty.floatingDecimalPointRight = this.floatingDecimalPointRight;\n        pretty._options = Object.assign({}, this._options);\n        return pretty;\n    }\n}\nexports.IntPretty = IntPretty;\n//# sourceMappingURL=int-pretty.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/int-pretty.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/int.js":
/*!******************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/int.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Uint = exports.Int = void 0;\nconst big_integer_1 = __importDefault(__webpack_require__(/*! big-integer */ \"(ssr)/./node_modules/big-integer/BigInteger.js\"));\nconst etc_1 = __webpack_require__(/*! ./etc */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/etc.js\");\nclass Int {\n    /**\n     * @param int - Parse a number | bigInteger | string into a bigInt.\n     */\n    constructor(int) {\n        if (typeof int === \"number\") {\n            int = int.toString();\n        }\n        if (typeof int === \"string\") {\n            if (!(0, etc_1.isValidIntegerString)(int)) {\n                if ((0, etc_1.isExponentDecString)(int)) {\n                    int = (0, etc_1.exponentDecStringToDecString)(int);\n                }\n                else {\n                    throw new Error(`invalid integer: ${int}`);\n                }\n            }\n            this.int = (0, big_integer_1.default)(int);\n        }\n        else if (typeof int === \"bigint\") {\n            this.int = (0, big_integer_1.default)(int);\n        }\n        else {\n            this.int = (0, big_integer_1.default)(int);\n        }\n        this.checkBitLen();\n    }\n    checkBitLen() {\n        if (this.int.abs().gt(Int.maxInt)) {\n            throw new Error(`Integer out of range ${this.int.toString()}`);\n        }\n    }\n    toString() {\n        return this.int.toString(10);\n    }\n    isNegative() {\n        return this.int.isNegative();\n    }\n    isPositive() {\n        return this.int.isPositive();\n    }\n    isZero() {\n        return this.int.eq((0, big_integer_1.default)(0));\n    }\n    equals(i) {\n        return this.int.equals(i.int);\n    }\n    gt(i) {\n        return this.int.gt(i.int);\n    }\n    gte(i) {\n        return this.int.greaterOrEquals(i.int);\n    }\n    lt(i) {\n        return this.int.lt(i.int);\n    }\n    lte(i) {\n        return this.int.lesserOrEquals(i.int);\n    }\n    abs() {\n        return new Int(this.int.abs());\n    }\n    absUInt() {\n        return new Uint(this.int.abs());\n    }\n    add(i) {\n        return new Int(this.int.add(i.int));\n    }\n    sub(i) {\n        return new Int(this.int.subtract(i.int));\n    }\n    mul(i) {\n        return new Int(this.int.multiply(i.int));\n    }\n    div(i) {\n        return new Int(this.int.divide(i.int));\n    }\n    mod(i) {\n        return new Int(this.int.mod(i.int));\n    }\n    neg() {\n        return new Int(this.int.negate());\n    }\n    pow(i) {\n        return new Int(this.int.pow(i.toBigNumber()));\n    }\n    toBigNumber() {\n        return this.int;\n    }\n}\nexports.Int = Int;\n// (2 ** 256) - 1\nInt.maxInt = (0, big_integer_1.default)(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\");\nclass Uint {\n    /**\n     * @param uint - Parse a number | bigInteger | string into a bigUint.\n     */\n    constructor(uint) {\n        if (typeof uint === \"number\") {\n            uint = uint.toString();\n        }\n        if (typeof uint === \"string\") {\n            if (!(0, etc_1.isValidIntegerString)(uint)) {\n                if ((0, etc_1.isExponentDecString)(uint)) {\n                    uint = (0, etc_1.exponentDecStringToDecString)(uint);\n                }\n                else {\n                    throw new Error(`invalid integer: ${uint}`);\n                }\n            }\n            this.uint = (0, big_integer_1.default)(uint);\n        }\n        else if (typeof uint === \"bigint\") {\n            this.uint = (0, big_integer_1.default)(uint);\n        }\n        else {\n            this.uint = (0, big_integer_1.default)(uint);\n        }\n        if (this.uint.isNegative()) {\n            throw new TypeError(\"Uint should not be negative\");\n        }\n        this.checkBitLen();\n    }\n    checkBitLen() {\n        if (this.uint.abs().bitLength().gt(256)) {\n            throw new Error(`Integer out of range ${this.uint.toString()}`);\n        }\n    }\n    toString() {\n        return this.uint.toString(10);\n    }\n    isZero() {\n        return this.uint.eq((0, big_integer_1.default)(0));\n    }\n    equals(i) {\n        return this.uint.equals(i.uint);\n    }\n    gt(i) {\n        return this.uint.gt(i.uint);\n    }\n    gte(i) {\n        return this.uint.greaterOrEquals(i.uint);\n    }\n    lt(i) {\n        return this.uint.lt(i.uint);\n    }\n    lte(i) {\n        return this.uint.lesserOrEquals(i.uint);\n    }\n    add(i) {\n        return new Uint(this.uint.add(i.uint));\n    }\n    sub(i) {\n        return new Uint(this.uint.subtract(i.uint));\n    }\n    mul(i) {\n        return new Uint(this.uint.multiply(i.uint));\n    }\n    div(i) {\n        return new Uint(this.uint.divide(i.uint));\n    }\n    mod(i) {\n        return new Uint(this.uint.mod(i.uint));\n    }\n    pow(i) {\n        return new Uint(this.uint.pow(i.toBigNumber()));\n    }\n    toBigNumber() {\n        return this.uint;\n    }\n}\nexports.Uint = Uint;\n//# sourceMappingURL=int.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/int.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/price-pretty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/price-pretty.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PricePretty = void 0;\nconst int_pretty_1 = __webpack_require__(/*! ./int-pretty */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/int-pretty.js\");\nconst dec_utils_1 = __webpack_require__(/*! ./dec-utils */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/dec-utils.js\");\nclass PricePretty {\n    constructor(_fiatCurrency, amount) {\n        this._fiatCurrency = _fiatCurrency;\n        this._options = {\n            separator: \"\",\n            upperCase: false,\n            lowerCase: false,\n            locale: \"en-US\",\n        };\n        this.intPretty = new int_pretty_1.IntPretty(amount)\n            .maxDecimals(_fiatCurrency.maxDecimals)\n            .shrink(true)\n            .trim(true)\n            .locale(false)\n            .inequalitySymbol(true);\n        this._options.locale = _fiatCurrency.locale;\n    }\n    get options() {\n        return Object.assign(Object.assign({}, this.intPretty.options), this._options);\n    }\n    get symbol() {\n        return this._fiatCurrency.symbol;\n    }\n    get fiatCurrency() {\n        return this._fiatCurrency;\n    }\n    separator(str) {\n        const pretty = this.clone();\n        pretty._options.separator = str;\n        return pretty;\n    }\n    upperCase(bool) {\n        const pretty = this.clone();\n        pretty._options.upperCase = bool;\n        pretty._options.lowerCase = !bool;\n        return pretty;\n    }\n    lowerCase(bool) {\n        const pretty = this.clone();\n        pretty._options.lowerCase = bool;\n        pretty._options.upperCase = !bool;\n        return pretty;\n    }\n    moveDecimalPointLeft(delta) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.moveDecimalPointLeft(delta);\n        return pretty;\n    }\n    moveDecimalPointRight(delta) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.moveDecimalPointRight(delta);\n        return pretty;\n    }\n    /**\n     * @deprecated Use`moveDecimalPointLeft`\n     */\n    increasePrecision(delta) {\n        return this.moveDecimalPointLeft(delta);\n    }\n    /**\n     * @deprecated Use`moveDecimalPointRight`\n     */\n    decreasePrecision(delta) {\n        return this.moveDecimalPointRight(delta);\n    }\n    maxDecimals(max) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.maxDecimals(max);\n        return pretty;\n    }\n    inequalitySymbol(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.inequalitySymbol(bool);\n        return pretty;\n    }\n    inequalitySymbolSeparator(str) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.inequalitySymbolSeparator(str);\n        return pretty;\n    }\n    trim(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.trim(bool);\n        return pretty;\n    }\n    shrink(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.shrink(bool);\n        return pretty;\n    }\n    locale(locale) {\n        const pretty = this.clone();\n        pretty._options.locale = locale;\n        return pretty;\n    }\n    /**\n     * Ready indicates the actual value is ready to show the users.\n     * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n     * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n     * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n     * @param bool\n     */\n    ready(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.ready(bool);\n        return pretty;\n    }\n    get isReady() {\n        return this.intPretty.isReady;\n    }\n    add(target) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.add(target);\n        return pretty;\n    }\n    sub(target) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.sub(target);\n        return pretty;\n    }\n    mul(target) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.mul(target);\n        return pretty;\n    }\n    quo(target) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.quo(target);\n        return pretty;\n    }\n    toDec() {\n        return this.intPretty.toDec();\n    }\n    toString() {\n        let symbol = this.symbol;\n        if (this._options.upperCase) {\n            symbol = symbol.toUpperCase();\n        }\n        if (this._options.lowerCase) {\n            symbol = symbol.toLowerCase();\n        }\n        const dec = this.toDec();\n        const options = this.options;\n        if (options.inequalitySymbol &&\n            !dec.isZero() &&\n            dec.abs().lt(dec_utils_1.DecUtils.getTenExponentN(-options.maxDecimals))) {\n            return this.intPretty.toStringWithSymbols(`${symbol}${this._options.separator}`, \"\");\n        }\n        let localeString = parseFloat(this.intPretty.toString()).toLocaleString(options.locale, {\n            maximumFractionDigits: options.maxDecimals,\n        });\n        const isNeg = localeString.charAt(0) === \"-\";\n        if (isNeg) {\n            localeString = localeString.slice(1);\n        }\n        return `${isNeg ? \"-\" : \"\"}${symbol}${this._options.separator}${localeString}`;\n    }\n    clone() {\n        const pretty = new PricePretty(this._fiatCurrency, 0);\n        pretty._options = Object.assign({}, this._options);\n        pretty.intPretty = this.intPretty.clone();\n        return pretty;\n    }\n}\nexports.PricePretty = PricePretty;\n//# sourceMappingURL=price-pretty.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/price-pretty.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/rate-pretty.js":
/*!**************************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/rate-pretty.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RatePretty = void 0;\nconst int_pretty_1 = __webpack_require__(/*! ./int-pretty */ \"(ssr)/./node_modules/@keplr-wallet/unit/build/int-pretty.js\");\n/**\n * RatePretty treats `Dec` in rate form for easy calculation, and displays it as a percentage to the user by using toString().\n * By default, if the value is less than maxDeciamls, it is displayed using an inequality sign (Ex. < 0.001%)\n */\nclass RatePretty {\n    constructor(amount) {\n        this._options = {\n            separator: \"\",\n            symbol: \"%\",\n        };\n        this.intPretty = new int_pretty_1.IntPretty(amount);\n        this.intPretty = this.intPretty\n            .maxDecimals(3)\n            .shrink(false)\n            .trim(true)\n            .locale(true)\n            .inequalitySymbol(true);\n    }\n    get options() {\n        return Object.assign(Object.assign({}, this.intPretty.options), this._options);\n    }\n    separator(str) {\n        const pretty = this.clone();\n        pretty._options.separator = str;\n        return pretty;\n    }\n    symbol(str) {\n        const pretty = this.clone();\n        pretty._options.symbol = str;\n        return pretty;\n    }\n    moveDecimalPointLeft(delta) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.moveDecimalPointLeft(delta);\n        return pretty;\n    }\n    moveDecimalPointRight(delta) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.moveDecimalPointRight(delta);\n        return pretty;\n    }\n    maxDecimals(max) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.maxDecimals(max);\n        return pretty;\n    }\n    inequalitySymbol(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.inequalitySymbol(bool);\n        return pretty;\n    }\n    inequalitySymbolSeparator(str) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.inequalitySymbolSeparator(str);\n        return pretty;\n    }\n    trim(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.trim(bool);\n        return pretty;\n    }\n    shrink(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.shrink(bool);\n        return pretty;\n    }\n    locale(locale) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.locale(locale);\n        return pretty;\n    }\n    /**\n     * Ready indicates the actual value is ready to show the users.\n     * Even if the ready option is false, it expects that the value can be shown to users (probably as 0).\n     * The method that returns prettied value may return `undefined` or `null` if the value is not ready.\n     * But, alternatively, it can return the 0 value that can be shown the users anyway, but indicates that the value is not ready.\n     * @param bool\n     */\n    ready(bool) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.ready(bool);\n        return pretty;\n    }\n    get isReady() {\n        return this.intPretty.isReady;\n    }\n    add(target) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.add(target);\n        return pretty;\n    }\n    sub(target) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.sub(target);\n        return pretty;\n    }\n    mul(target) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.mul(target);\n        return pretty;\n    }\n    quo(target) {\n        const pretty = this.clone();\n        pretty.intPretty = pretty.intPretty.quo(target);\n        return pretty;\n    }\n    toDec() {\n        return this.intPretty.toDec();\n    }\n    toString() {\n        return this.intPretty\n            .moveDecimalPointRight(2)\n            .toStringWithSymbols(\"\", `${this._options.separator}${this._options.symbol}`);\n    }\n    clone() {\n        const pretty = new RatePretty(0);\n        pretty._options = Object.assign({}, this._options);\n        pretty.intPretty = this.intPretty.clone();\n        return pretty;\n    }\n}\nexports.RatePretty = RatePretty;\n//# sourceMappingURL=rate-pretty.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC91bml0L2J1aWxkL3JhdGUtcHJldHR5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixxQkFBcUIsbUJBQU8sQ0FBQyxpRkFBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHdCQUF3QixFQUFFLHFCQUFxQjtBQUN2RjtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHVuaXRcXGJ1aWxkXFxyYXRlLXByZXR0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmF0ZVByZXR0eSA9IHZvaWQgMDtcbmNvbnN0IGludF9wcmV0dHlfMSA9IHJlcXVpcmUoXCIuL2ludC1wcmV0dHlcIik7XG4vKipcbiAqIFJhdGVQcmV0dHkgdHJlYXRzIGBEZWNgIGluIHJhdGUgZm9ybSBmb3IgZWFzeSBjYWxjdWxhdGlvbiwgYW5kIGRpc3BsYXlzIGl0IGFzIGEgcGVyY2VudGFnZSB0byB0aGUgdXNlciBieSB1c2luZyB0b1N0cmluZygpLlxuICogQnkgZGVmYXVsdCwgaWYgdGhlIHZhbHVlIGlzIGxlc3MgdGhhbiBtYXhEZWNpYW1scywgaXQgaXMgZGlzcGxheWVkIHVzaW5nIGFuIGluZXF1YWxpdHkgc2lnbiAoRXguIDwgMC4wMDElKVxuICovXG5jbGFzcyBSYXRlUHJldHR5IHtcbiAgICBjb25zdHJ1Y3RvcihhbW91bnQpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcGFyYXRvcjogXCJcIixcbiAgICAgICAgICAgIHN5bWJvbDogXCIlXCIsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW50UHJldHR5ID0gbmV3IGludF9wcmV0dHlfMS5JbnRQcmV0dHkoYW1vdW50KTtcbiAgICAgICAgdGhpcy5pbnRQcmV0dHkgPSB0aGlzLmludFByZXR0eVxuICAgICAgICAgICAgLm1heERlY2ltYWxzKDMpXG4gICAgICAgICAgICAuc2hyaW5rKGZhbHNlKVxuICAgICAgICAgICAgLnRyaW0odHJ1ZSlcbiAgICAgICAgICAgIC5sb2NhbGUodHJ1ZSlcbiAgICAgICAgICAgIC5pbmVxdWFsaXR5U3ltYm9sKHRydWUpO1xuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5pbnRQcmV0dHkub3B0aW9ucyksIHRoaXMuX29wdGlvbnMpO1xuICAgIH1cbiAgICBzZXBhcmF0b3Ioc3RyKSB7XG4gICAgICAgIGNvbnN0IHByZXR0eSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcHJldHR5Ll9vcHRpb25zLnNlcGFyYXRvciA9IHN0cjtcbiAgICAgICAgcmV0dXJuIHByZXR0eTtcbiAgICB9XG4gICAgc3ltYm9sKHN0cikge1xuICAgICAgICBjb25zdCBwcmV0dHkgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHByZXR0eS5fb3B0aW9ucy5zeW1ib2wgPSBzdHI7XG4gICAgICAgIHJldHVybiBwcmV0dHk7XG4gICAgfVxuICAgIG1vdmVEZWNpbWFsUG9pbnRMZWZ0KGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IHByZXR0eSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcHJldHR5LmludFByZXR0eSA9IHByZXR0eS5pbnRQcmV0dHkubW92ZURlY2ltYWxQb2ludExlZnQoZGVsdGEpO1xuICAgICAgICByZXR1cm4gcHJldHR5O1xuICAgIH1cbiAgICBtb3ZlRGVjaW1hbFBvaW50UmlnaHQoZGVsdGEpIHtcbiAgICAgICAgY29uc3QgcHJldHR5ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBwcmV0dHkuaW50UHJldHR5ID0gcHJldHR5LmludFByZXR0eS5tb3ZlRGVjaW1hbFBvaW50UmlnaHQoZGVsdGEpO1xuICAgICAgICByZXR1cm4gcHJldHR5O1xuICAgIH1cbiAgICBtYXhEZWNpbWFscyhtYXgpIHtcbiAgICAgICAgY29uc3QgcHJldHR5ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBwcmV0dHkuaW50UHJldHR5ID0gcHJldHR5LmludFByZXR0eS5tYXhEZWNpbWFscyhtYXgpO1xuICAgICAgICByZXR1cm4gcHJldHR5O1xuICAgIH1cbiAgICBpbmVxdWFsaXR5U3ltYm9sKGJvb2wpIHtcbiAgICAgICAgY29uc3QgcHJldHR5ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBwcmV0dHkuaW50UHJldHR5ID0gcHJldHR5LmludFByZXR0eS5pbmVxdWFsaXR5U3ltYm9sKGJvb2wpO1xuICAgICAgICByZXR1cm4gcHJldHR5O1xuICAgIH1cbiAgICBpbmVxdWFsaXR5U3ltYm9sU2VwYXJhdG9yKHN0cikge1xuICAgICAgICBjb25zdCBwcmV0dHkgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHByZXR0eS5pbnRQcmV0dHkgPSBwcmV0dHkuaW50UHJldHR5LmluZXF1YWxpdHlTeW1ib2xTZXBhcmF0b3Ioc3RyKTtcbiAgICAgICAgcmV0dXJuIHByZXR0eTtcbiAgICB9XG4gICAgdHJpbShib29sKSB7XG4gICAgICAgIGNvbnN0IHByZXR0eSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcHJldHR5LmludFByZXR0eSA9IHByZXR0eS5pbnRQcmV0dHkudHJpbShib29sKTtcbiAgICAgICAgcmV0dXJuIHByZXR0eTtcbiAgICB9XG4gICAgc2hyaW5rKGJvb2wpIHtcbiAgICAgICAgY29uc3QgcHJldHR5ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBwcmV0dHkuaW50UHJldHR5ID0gcHJldHR5LmludFByZXR0eS5zaHJpbmsoYm9vbCk7XG4gICAgICAgIHJldHVybiBwcmV0dHk7XG4gICAgfVxuICAgIGxvY2FsZShsb2NhbGUpIHtcbiAgICAgICAgY29uc3QgcHJldHR5ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBwcmV0dHkuaW50UHJldHR5ID0gcHJldHR5LmludFByZXR0eS5sb2NhbGUobG9jYWxlKTtcbiAgICAgICAgcmV0dXJuIHByZXR0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHkgaW5kaWNhdGVzIHRoZSBhY3R1YWwgdmFsdWUgaXMgcmVhZHkgdG8gc2hvdyB0aGUgdXNlcnMuXG4gICAgICogRXZlbiBpZiB0aGUgcmVhZHkgb3B0aW9uIGlzIGZhbHNlLCBpdCBleHBlY3RzIHRoYXQgdGhlIHZhbHVlIGNhbiBiZSBzaG93biB0byB1c2VycyAocHJvYmFibHkgYXMgMCkuXG4gICAgICogVGhlIG1ldGhvZCB0aGF0IHJldHVybnMgcHJldHRpZWQgdmFsdWUgbWF5IHJldHVybiBgdW5kZWZpbmVkYCBvciBgbnVsbGAgaWYgdGhlIHZhbHVlIGlzIG5vdCByZWFkeS5cbiAgICAgKiBCdXQsIGFsdGVybmF0aXZlbHksIGl0IGNhbiByZXR1cm4gdGhlIDAgdmFsdWUgdGhhdCBjYW4gYmUgc2hvd24gdGhlIHVzZXJzIGFueXdheSwgYnV0IGluZGljYXRlcyB0aGF0IHRoZSB2YWx1ZSBpcyBub3QgcmVhZHkuXG4gICAgICogQHBhcmFtIGJvb2xcbiAgICAgKi9cbiAgICByZWFkeShib29sKSB7XG4gICAgICAgIGNvbnN0IHByZXR0eSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcHJldHR5LmludFByZXR0eSA9IHByZXR0eS5pbnRQcmV0dHkucmVhZHkoYm9vbCk7XG4gICAgICAgIHJldHVybiBwcmV0dHk7XG4gICAgfVxuICAgIGdldCBpc1JlYWR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRQcmV0dHkuaXNSZWFkeTtcbiAgICB9XG4gICAgYWRkKHRhcmdldCkge1xuICAgICAgICBjb25zdCBwcmV0dHkgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHByZXR0eS5pbnRQcmV0dHkgPSBwcmV0dHkuaW50UHJldHR5LmFkZCh0YXJnZXQpO1xuICAgICAgICByZXR1cm4gcHJldHR5O1xuICAgIH1cbiAgICBzdWIodGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHByZXR0eSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcHJldHR5LmludFByZXR0eSA9IHByZXR0eS5pbnRQcmV0dHkuc3ViKHRhcmdldCk7XG4gICAgICAgIHJldHVybiBwcmV0dHk7XG4gICAgfVxuICAgIG11bCh0YXJnZXQpIHtcbiAgICAgICAgY29uc3QgcHJldHR5ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBwcmV0dHkuaW50UHJldHR5ID0gcHJldHR5LmludFByZXR0eS5tdWwodGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIHByZXR0eTtcbiAgICB9XG4gICAgcXVvKHRhcmdldCkge1xuICAgICAgICBjb25zdCBwcmV0dHkgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHByZXR0eS5pbnRQcmV0dHkgPSBwcmV0dHkuaW50UHJldHR5LnF1byh0YXJnZXQpO1xuICAgICAgICByZXR1cm4gcHJldHR5O1xuICAgIH1cbiAgICB0b0RlYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50UHJldHR5LnRvRGVjKCk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRQcmV0dHlcbiAgICAgICAgICAgIC5tb3ZlRGVjaW1hbFBvaW50UmlnaHQoMilcbiAgICAgICAgICAgIC50b1N0cmluZ1dpdGhTeW1ib2xzKFwiXCIsIGAke3RoaXMuX29wdGlvbnMuc2VwYXJhdG9yfSR7dGhpcy5fb3B0aW9ucy5zeW1ib2x9YCk7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBwcmV0dHkgPSBuZXcgUmF0ZVByZXR0eSgwKTtcbiAgICAgICAgcHJldHR5Ll9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fb3B0aW9ucyk7XG4gICAgICAgIHByZXR0eS5pbnRQcmV0dHkgPSB0aGlzLmludFByZXR0eS5jbG9uZSgpO1xuICAgICAgICByZXR1cm4gcHJldHR5O1xuICAgIH1cbn1cbmV4cG9ydHMuUmF0ZVByZXR0eSA9IFJhdGVQcmV0dHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYXRlLXByZXR0eS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/rate-pretty.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/unit/build/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/@keplr-wallet/unit/build/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.integerStringToUSLocaleString = void 0;\n/**\n * Change the non-locale integer string to locale string.\n * Only support en-US format.\n * This method uses the BigInt if the environment supports the BigInt.\n * @param numberStr\n */\nfunction integerStringToUSLocaleString(numberStr) {\n    if (numberStr.indexOf(\".\") >= 0) {\n        throw new Error(`${numberStr} is not integer`);\n    }\n    if (typeof BigInt !== \"undefined\") {\n        return BigInt(numberStr).toLocaleString(\"en-US\");\n    }\n    const integer = numberStr;\n    const chunks = [];\n    for (let i = integer.length; i > 0; i -= 3) {\n        chunks.push(integer.slice(Math.max(0, i - 3), i));\n    }\n    return chunks.reverse().join(\",\");\n}\nexports.integerStringToUSLocaleString = integerStringToUSLocaleString;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGtlcGxyLXdhbGxldC91bml0L2J1aWxkL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFdBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLE9BQU87QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXEBrZXBsci13YWxsZXRcXHVuaXRcXGJ1aWxkXFx1dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW50ZWdlclN0cmluZ1RvVVNMb2NhbGVTdHJpbmcgPSB2b2lkIDA7XG4vKipcbiAqIENoYW5nZSB0aGUgbm9uLWxvY2FsZSBpbnRlZ2VyIHN0cmluZyB0byBsb2NhbGUgc3RyaW5nLlxuICogT25seSBzdXBwb3J0IGVuLVVTIGZvcm1hdC5cbiAqIFRoaXMgbWV0aG9kIHVzZXMgdGhlIEJpZ0ludCBpZiB0aGUgZW52aXJvbm1lbnQgc3VwcG9ydHMgdGhlIEJpZ0ludC5cbiAqIEBwYXJhbSBudW1iZXJTdHJcbiAqL1xuZnVuY3Rpb24gaW50ZWdlclN0cmluZ1RvVVNMb2NhbGVTdHJpbmcobnVtYmVyU3RyKSB7XG4gICAgaWYgKG51bWJlclN0ci5pbmRleE9mKFwiLlwiKSA+PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtudW1iZXJTdHJ9IGlzIG5vdCBpbnRlZ2VyYCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgQmlnSW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQobnVtYmVyU3RyKS50b0xvY2FsZVN0cmluZyhcImVuLVVTXCIpO1xuICAgIH1cbiAgICBjb25zdCBpbnRlZ2VyID0gbnVtYmVyU3RyO1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSBpbnRlZ2VyLmxlbmd0aDsgaSA+IDA7IGkgLT0gMykge1xuICAgICAgICBjaHVua3MucHVzaChpbnRlZ2VyLnNsaWNlKE1hdGgubWF4KDAsIGkgLSAzKSwgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gY2h1bmtzLnJldmVyc2UoKS5qb2luKFwiLFwiKTtcbn1cbmV4cG9ydHMuaW50ZWdlclN0cmluZ1RvVVNMb2NhbGVTdHJpbmcgPSBpbnRlZ2VyU3RyaW5nVG9VU0xvY2FsZVN0cmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/unit/build/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@keplr-wallet/wc-client/build/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@keplr-wallet/wc-client/build/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KeplrWalletConnectV2 = void 0;\nconst provider_1 = __webpack_require__(/*! @keplr-wallet/provider */ \"(ssr)/./node_modules/@keplr-wallet/provider/build/index.js\");\nconst buffer_1 = __webpack_require__(/*! buffer/ */ \"(ssr)/./node_modules/buffer/index.js\");\nconst long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\"));\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"events\"));\nclass KeplrWalletConnectV2 {\n    constructor(signClient, options) {\n        this.signClient = signClient;\n        this.options = options;\n        this.defaultOptions = {};\n        this.version = \"0.12.20\";\n        this.mode = \"walletconnect\";\n        this.storeKey = \"keplr_wallet_connect_v2_key\";\n        this.storeSuggestChainKey = \"keplr_wallet_connect_v2_suggest_chain_key\";\n        this.storeSuggestTokenKey = \"keplr_wallet_connect_v2_suggest_token_key\";\n        this.ethereum = new MockEthereumProvider();\n        // TODO: 이거 마지막에 꼭 구현해야한다.\n        //       일단은 다른게 더 급해서 일단 any로 처리\n        this.starknet = {};\n        if (options.sessionProperties) {\n            this.saveKeys(options.sessionProperties);\n        }\n        signClient.on(\"session_event\", (event) => {\n            if (event.params.event.name === \"keplr_accountsChanged\") {\n                this.saveKeys(event.params.event.data);\n                window.dispatchEvent(new Event(\"keplr_keystorechange\"));\n            }\n        });\n        signClient.on(\"session_delete\", () => __awaiter(this, void 0, void 0, function* () {\n            localStorage.removeItem(this.getKeyLastSeenKey());\n            localStorage.removeItem(this.getSuggestChainKey());\n            localStorage.removeItem(this.getSuggestTokenKey());\n        }));\n    }\n    saveKeys(sessionProperty) {\n        if (sessionProperty.hasOwnProperty(\"keys\")) {\n            const keys = JSON.parse(sessionProperty[\"keys\"]);\n            if (keys.length > 0) {\n                keys.forEach((key) => {\n                    if (key.hasOwnProperty(\"chainId\")) {\n                        this.saveLastSeenKey(key[\"chainId\"], this.convertToKeplrGetKeyWalletConnectV2Response(key));\n                    }\n                });\n            }\n        }\n    }\n    convertToKeplrGetKeyWalletConnectV2Response(data) {\n        if (!data.hasOwnProperty(\"name\") ||\n            !data.hasOwnProperty(\"algo\") ||\n            !data.hasOwnProperty(\"pubKey\") ||\n            !data.hasOwnProperty(\"address\") ||\n            !data.hasOwnProperty(\"bech32Address\") ||\n            !data.hasOwnProperty(\"ethereumHexAddress\") ||\n            !data.hasOwnProperty(\"isNanoLedger\")) {\n            throw new Error(\"Invalid data\");\n        }\n        return {\n            name: data.name,\n            algo: data.algo,\n            pubKey: data.pubKey,\n            address: data.address,\n            bech32Address: data.bech32Address,\n            ethereumHexAddress: data.ethereumHexAddress,\n            isNanoLedger: data.isNanoLedger === \"true\",\n        };\n    }\n    getLastSession() {\n        const lastKeyIndex = this.signClient.session.getAll().length - 1;\n        return this.signClient.session.getAll()[lastKeyIndex];\n    }\n    getCurrentTopic() {\n        const lastSession = this.getLastSession();\n        if (!lastSession) {\n            throw new Error(\"No session\");\n        }\n        return lastSession.topic;\n    }\n    getKeyLastSeenKey() {\n        const topic = this.getCurrentTopic();\n        return `${this.storeKey}/${topic}-key`;\n    }\n    getLastSeenKey(chainId) {\n        const saved = this.getAllLastSeenKey();\n        if (!saved) {\n            return undefined;\n        }\n        return saved[chainId];\n    }\n    getAllLastSeenKey() {\n        const data = localStorage.getItem(this.getKeyLastSeenKey());\n        if (!data) {\n            return undefined;\n        }\n        return JSON.parse(data);\n    }\n    saveLastSeenKey(chainId, response) {\n        let saved = this.getAllLastSeenKey();\n        if (!saved) {\n            saved = {};\n        }\n        saved[chainId] = response;\n        this.saveAllLastSeenKey(saved);\n    }\n    saveAllLastSeenKey(data) {\n        localStorage.setItem(this.getKeyLastSeenKey(), JSON.stringify(data));\n    }\n    getSuggestChainKey() {\n        const topic = this.getCurrentTopic();\n        return `${this.storeSuggestChainKey}/${topic}-key`;\n    }\n    getRegisteredSuggestChain(chainId) {\n        const saved = this.getAllRegisteredSuggestChain();\n        if (!saved) {\n            return undefined;\n        }\n        return saved[chainId];\n    }\n    getAllRegisteredSuggestChain() {\n        const data = localStorage.getItem(this.getSuggestChainKey());\n        if (!data) {\n            return undefined;\n        }\n        return JSON.parse(data);\n    }\n    saveRegisteredSuggestChain(chainInfo) {\n        let saved = this.getAllRegisteredSuggestChain();\n        if (!saved) {\n            saved = {};\n        }\n        saved[chainInfo.chainId] = chainInfo;\n        this.saveAllRegisteredSuggestChain(saved);\n    }\n    saveAllRegisteredSuggestChain(data) {\n        localStorage.setItem(this.getSuggestChainKey(), JSON.stringify(data));\n    }\n    getSuggestTokenKey() {\n        const topic = this.getCurrentTopic();\n        return `${this.storeSuggestTokenKey}/${topic}-key`;\n    }\n    getRegisteredSuggestToken(contractAddress) {\n        const saved = this.getAllRegisteredSuggestToken();\n        if (!saved) {\n            return undefined;\n        }\n        return saved[contractAddress];\n    }\n    getAllRegisteredSuggestToken() {\n        const data = localStorage.getItem(this.getSuggestTokenKey());\n        if (!data) {\n            return undefined;\n        }\n        return JSON.parse(data);\n    }\n    saveRegisteredSuggestToken(chainId, contractAddress, viewingKey) {\n        let saved = this.getAllRegisteredSuggestToken();\n        if (!saved) {\n            saved = {};\n        }\n        saved[contractAddress] = {\n            chainId,\n            contractAddress,\n            viewingKey,\n        };\n        this.saveAllRegisteredSuggestToken(saved);\n    }\n    saveAllRegisteredSuggestToken(data) {\n        localStorage.setItem(this.getSuggestTokenKey(), JSON.stringify(data));\n    }\n    sendCustomRequest(requestParams) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.signClient.request(requestParams);\n            return response;\n        });\n    }\n    getNamespaceChainId() {\n        const lastSession = this.getLastSession();\n        if (lastSession &&\n            lastSession.namespaces.hasOwnProperty(\"cosmos\") &&\n            lastSession.namespaces[\"cosmos\"].hasOwnProperty(\"accounts\")) {\n            const splitAccount = lastSession.namespaces[\"cosmos\"][\"accounts\"][0].split(\":\");\n            return `${splitAccount[0]}:${splitAccount[1]}`;\n        }\n        return \"cosmos:cosmoshub-4\";\n    }\n    checkDeepLink() {\n        const mobileLinkInfo = localStorage.getItem(\"wallet-connect-v2-mobile-link\");\n        if (mobileLinkInfo) {\n            window.location.href = JSON.parse(mobileLinkInfo).href;\n        }\n    }\n    ping() {\n        return Promise.resolve();\n    }\n    changeKeyRingName(_opts) {\n        throw new Error(\"Not yet implemented\");\n    }\n    disable(_chainIds) {\n        throw new Error(\"Not yet implemented\");\n    }\n    enable(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof chainIds === \"string\") {\n                chainIds = [chainIds];\n            }\n            // Check public key from local storage.\n            const keys = yield this.getAllLastSeenKey();\n            if (keys) {\n                const hasChainId = chainIds.every((chainId) => {\n                    return Object.keys(keys).includes(chainId);\n                });\n                if (hasChainId) {\n                    return;\n                }\n            }\n            this.checkDeepLink();\n            // Request enable from the mobile wallet.\n            const topic = this.getCurrentTopic();\n            const chainId = this.getNamespaceChainId();\n            if (!chainId) {\n                throw new Error(\"No Namespace chain id\");\n            }\n            const param = {\n                topic: topic,\n                chainId: this.getNamespaceChainId(),\n                request: {\n                    method: \"keplr_enable\",\n                    params: {\n                        chainId: chainIds,\n                    },\n                },\n            };\n            yield this.sendCustomRequest(param);\n            // session의 정보가 업데이트 되기 전에 다음로직이 실행되면 안되기 때문에 namespace가 업데이트 될때까지 기다린다.\n            // We wait for the namespace to be updated because we don't want the next logic to run before the session's information is updated.\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                while (true) {\n                    yield new Promise((resolve) => setTimeout(resolve, 100));\n                    const lastSession = this.getLastSession();\n                    if (lastSession &&\n                        lastSession.namespaces.hasOwnProperty(\"cosmos\") &&\n                        lastSession.namespaces[\"cosmos\"].hasOwnProperty(\"accounts\")) {\n                        const hasChainId = lastSession.namespaces[\"cosmos\"][\"accounts\"].some((account) => {\n                            const chainId = account.replace(\"cosmos:\", \"\").split(\":\")[0];\n                            return chainIds.includes(chainId);\n                        });\n                        if (hasChainId) {\n                            resolve();\n                            return;\n                        }\n                    }\n                }\n            }));\n        });\n    }\n    enigmaDecrypt(_chainId, _ciphertext, _nonce) {\n        throw new Error(\"Not yet implemented\");\n    }\n    enigmaEncrypt(_chainId, _contractCodeHash, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    _msg) {\n        throw new Error(\"Not yet implemented\");\n    }\n    experimentalSignEIP712CosmosTx_v0(_chainId, _signer, _eip712, _signDoc, _signOptions = {}) {\n        throw new Error(\"Not yet implemented\");\n    }\n    experimentalSuggestChain(_chainInfo) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (((_a = _chainInfo.features) === null || _a === void 0 ? void 0 : _a.includes(\"stargate\")) ||\n                ((_b = _chainInfo.features) === null || _b === void 0 ? void 0 : _b.includes(\"no-legacy-stdTx\"))) {\n                console.warn(\"“stargate”, “no-legacy-stdTx” feature has been deprecated. The launchpad is no longer supported, thus works without the two features. We would keep the aforementioned two feature for a while, but the upcoming update would potentially cause errors. Remove the two feature.\");\n            }\n            const registeredChainInfo = this.getRegisteredSuggestChain(_chainInfo.chainId);\n            if (registeredChainInfo) {\n                return;\n            }\n            this.checkDeepLink();\n            const topic = this.getCurrentTopic();\n            const param = {\n                topic,\n                chainId: this.getNamespaceChainId(),\n                request: {\n                    method: \"keplr_experimentalSuggestChain\",\n                    params: {\n                        chainInfo: _chainInfo,\n                    },\n                },\n            };\n            yield this.sendCustomRequest(param);\n            this.saveRegisteredSuggestChain(_chainInfo);\n        });\n    }\n    getChainInfosWithoutEndpoints() {\n        throw new Error(\"Not yet implemented\");\n    }\n    getChainInfoWithoutEndpoints(_chainId) {\n        throw new Error(\"Not yet implemented\");\n    }\n    getEnigmaPubKey(_chainId) {\n        throw new Error(\"Not yet implemented\");\n    }\n    getEnigmaTxEncryptionKey(_chainId, _nonce) {\n        throw new Error(\"Not yet implemented\");\n    }\n    getEnigmaUtils(_chainId) {\n        throw new Error(\"Not yet implemented\");\n    }\n    getKey(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Check public key from local storage.\n            const lastSeenKey = this.getLastSeenKey(chainId);\n            if (lastSeenKey) {\n                return {\n                    algo: lastSeenKey.algo,\n                    bech32Address: lastSeenKey.bech32Address,\n                    ethereumHexAddress: lastSeenKey.ethereumHexAddress,\n                    address: buffer_1.Buffer.from(lastSeenKey.address, \"base64\"),\n                    name: lastSeenKey.name,\n                    pubKey: buffer_1.Buffer.from(lastSeenKey.pubKey, \"base64\"),\n                    isNanoLedger: lastSeenKey.isNanoLedger,\n                    isKeystone: false,\n                };\n            }\n            // Check public key from session properties.\n            const lastSession = this.getLastSession();\n            if (lastSession && lastSession.sessionProperties) {\n                const sessionChainId = lastSession.sessionProperties[\"chainId\"];\n                if (sessionChainId === chainId) {\n                    return {\n                        algo: lastSession.sessionProperties[\"algo\"],\n                        bech32Address: lastSession.sessionProperties[\"bech32Address\"],\n                        ethereumHexAddress: lastSession.sessionProperties[\"ethereumHexAddress\"],\n                        address: buffer_1.Buffer.from(lastSession.sessionProperties[\"address\"], \"base64\"),\n                        name: lastSession.sessionProperties[\"name\"],\n                        pubKey: buffer_1.Buffer.from(lastSession.sessionProperties[\"pubKey\"], \"base64\"),\n                        isNanoLedger: lastSession.sessionProperties[\"isNanoLedger\"] === \"true\",\n                        isKeystone: false,\n                    };\n                }\n            }\n            // Request `get_key` from the mobile wallet.\n            const topic = this.getCurrentTopic();\n            const param = {\n                topic,\n                chainId: this.getNamespaceChainId(),\n                request: {\n                    method: \"keplr_getKey\",\n                    params: {\n                        chainId,\n                    },\n                },\n            };\n            const response = yield this.sendCustomRequest(param);\n            return Object.assign(Object.assign({}, response), { pubKey: buffer_1.Buffer.from(response.pubKey, \"base64\"), address: buffer_1.Buffer.from(response.address, \"base64\"), isKeystone: false });\n        });\n    }\n    getKeysSettled(chainIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const paramArray = chainIds.map((chainId) => __awaiter(this, void 0, void 0, function* () {\n                return yield this.getKey(chainId);\n            }));\n            return yield Promise.allSettled(paramArray);\n        });\n    }\n    getOfflineSigner(chainId, signOptions) {\n        return new provider_1.CosmJSOfflineSigner(chainId, this, signOptions);\n    }\n    getOfflineSignerAuto(chainId, signOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = yield this.getKey(chainId);\n            if (key.isNanoLedger) {\n                return new provider_1.CosmJSOfflineSignerOnlyAmino(chainId, this, signOptions);\n            }\n            return new provider_1.CosmJSOfflineSigner(chainId, this, signOptions);\n        });\n    }\n    getOfflineSignerOnlyAmino(chainId, signOptions) {\n        return new provider_1.CosmJSOfflineSignerOnlyAmino(chainId, this, signOptions);\n    }\n    getSecret20ViewingKey(_chainId, _contractAddress) {\n        throw new Error(\"Not yet implemented\");\n    }\n    sendTx(chainId, tx, mode) {\n        if (this.options.sendTx) {\n            return this.options.sendTx(chainId, tx, mode);\n        }\n        throw new Error(\"send tx is not delivered by options\");\n    }\n    signAmino(chainId, signer, signDoc, signOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.checkDeepLink();\n            const topic = this.getCurrentTopic();\n            const param = {\n                topic,\n                chainId: this.getNamespaceChainId(),\n                request: {\n                    method: \"keplr_signAmino\",\n                    params: {\n                        chainId,\n                        signer,\n                        signDoc,\n                        signOptions: signOptions,\n                    },\n                },\n            };\n            return yield this.sendCustomRequest(param);\n        });\n    }\n    signArbitrary(chainId, signer, data) {\n        this.checkDeepLink();\n        const topic = this.getCurrentTopic();\n        const param = {\n            topic,\n            chainId: this.getNamespaceChainId(),\n            request: {\n                method: \"keplr_signArbitrary\",\n                params: {\n                    chainId,\n                    signer,\n                    type: typeof data === \"string\" ? \"string\" : \"Uint8Array\",\n                    data: typeof data === \"string\"\n                        ? data\n                        : buffer_1.Buffer.from(data).toString(\"base64\"),\n                },\n            },\n        };\n        return this.sendCustomRequest(param);\n    }\n    signDirect(chainId, signer, signDoc, signOptions) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            this.checkDeepLink();\n            const topic = this.getCurrentTopic();\n            const param = {\n                topic,\n                chainId: this.getNamespaceChainId(),\n                request: {\n                    method: \"keplr_signDirect\",\n                    params: {\n                        chainId,\n                        signer,\n                        signDoc: {\n                            chainId: signDoc.chainId,\n                            accountNumber: (_a = signDoc.accountNumber) === null || _a === void 0 ? void 0 : _a.toString(),\n                            bodyBytes: signDoc.bodyBytes\n                                ? buffer_1.Buffer.from(signDoc.bodyBytes).toString(\"base64\")\n                                : null,\n                            authInfoBytes: signDoc.authInfoBytes\n                                ? buffer_1.Buffer.from(signDoc.authInfoBytes).toString(\"base64\")\n                                : null,\n                        },\n                        signOptions: signOptions,\n                    },\n                },\n            };\n            const response = yield this.sendCustomRequest(param);\n            return {\n                signature: response.signature,\n                signed: {\n                    chainId: (_b = response.signed.chainId) !== null && _b !== void 0 ? _b : \"\",\n                    accountNumber: response.signed.accountNumber\n                        ? long_1.default.fromString(response.signed.accountNumber)\n                        : new long_1.default(0),\n                    bodyBytes: response.signed.bodyBytes\n                        ? buffer_1.Buffer.from(response.signed.bodyBytes, \"base64\")\n                        : new Uint8Array([]),\n                    authInfoBytes: response.signed.authInfoBytes\n                        ? buffer_1.Buffer.from(response.signed.authInfoBytes, \"base64\")\n                        : new Uint8Array([]),\n                },\n            };\n        });\n    }\n    signDirectAux(_chainId, _signer, _signDoc, _signOptions) {\n        throw new Error(\"Not yet implemented\");\n    }\n    signEthereum(chainId, signer, data, type) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.checkDeepLink();\n            const topic = this.getCurrentTopic();\n            const param = {\n                topic,\n                chainId: this.getNamespaceChainId(),\n                request: {\n                    method: \"keplr_signEthereum\",\n                    params: {\n                        chainId,\n                        signer,\n                        data,\n                        type,\n                    },\n                },\n            };\n            return yield this.sendCustomRequest(param);\n        });\n    }\n    signICNSAdr36(_chainId, _contractAddress, _owner, _username, _addressChainIds) {\n        throw new Error(\"Not yet implemented\");\n    }\n    suggestToken(_chainId, _contractAddress, _viewingKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const registeredToken = this.getRegisteredSuggestToken(_contractAddress);\n            if (registeredToken) {\n                return;\n            }\n            this.checkDeepLink();\n            const topic = this.getCurrentTopic();\n            const param = {\n                topic,\n                chainId: this.getNamespaceChainId(),\n                request: {\n                    method: \"keplr_suggestToken\",\n                    params: {\n                        chainId: _chainId,\n                        contractAddress: _contractAddress,\n                        viewingKey: _viewingKey,\n                    },\n                },\n            };\n            yield this.sendCustomRequest(param);\n            this.saveRegisteredSuggestToken(_chainId, _contractAddress, _viewingKey);\n        });\n    }\n    verifyArbitrary(_chainId, _signer, _data, _signature) {\n        throw new Error(\"Not yet implemented\");\n    }\n    sendEthereumTx(_chainId, _tx) {\n        throw new Error(\"Not yet implemented\");\n    }\n    suggestERC20(_chainId, _contractAddress) {\n        throw new Error(\"Not yet implemented\");\n    }\n    getStarknetKey(_chainId) {\n        throw new Error(\"Not yet implemented\");\n    }\n    getStarknetKeysSettled(_chainIds) {\n        throw new Error(\"Not yet implemented\");\n    }\n    signStarknetTx() {\n        throw new Error(\"Not yet implemented\");\n    }\n    signStarknetDeployAccountTransaction(_chainId, _transaction) {\n        throw new Error(\"Not yet implemented\");\n    }\n}\nexports.KeplrWalletConnectV2 = KeplrWalletConnectV2;\nclass MockEthereumProvider extends events_1.default {\n    constructor() {\n        super();\n        this.chainId = null;\n        this.selectedAddress = null;\n        this.networkVersion = null;\n        this.isKeplr = true;\n        this.isMetaMask = true;\n    }\n    isConnected() {\n        throw new Error(\"Method not implemented.\");\n    }\n    request({}) {\n        throw new Error(\"Not yet implemented\");\n    }\n    enable() {\n        throw new Error(\"Method not implemented.\");\n    }\n    net_version() {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@keplr-wallet/wc-client/build/index.js\n");

/***/ })

};
;