"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bfs-path";
exports.ids = ["vendor-chunks/bfs-path"];
exports.modules = {

/***/ "(ssr)/./node_modules/bfs-path/js/es6/path.js":
/*!**********************************************!*\
  !*** ./node_modules/bfs-path/js/es6/path.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _makeLong: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__._makeLong),\n/* harmony export */   _removeDuplicateSeps: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__._removeDuplicateSeps),\n/* harmony export */   _replaceRegex: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__._replaceRegex),\n/* harmony export */   basename: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.basename),\n/* harmony export */   delimiter: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.delimiter),\n/* harmony export */   dirname: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.dirname),\n/* harmony export */   extname: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.extname),\n/* harmony export */   format: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.format),\n/* harmony export */   isAbsolute: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.isAbsolute),\n/* harmony export */   join: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.join),\n/* harmony export */   normalize: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.normalize),\n/* harmony export */   parse: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.parse),\n/* harmony export */   posix: () => (/* binding */ posix),\n/* harmony export */   relative: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.relative),\n/* harmony export */   resolve: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.resolve),\n/* harmony export */   sep: () => (/* reexport safe */ _posix_path__WEBPACK_IMPORTED_MODULE_0__.sep),\n/* harmony export */   win32: () => (/* binding */ win32)\n/* harmony export */ });\n/* harmony import */ var _posix_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./posix_path */ \"(ssr)/./node_modules/bfs-path/js/es6/posix_path.js\");\n\n\nconst posix = _posix_path__WEBPACK_IMPORTED_MODULE_0__;\n// XXX: Typing hack: Exported so the type of this module matches NodeJS's path.\nconst win32 = _posix_path__WEBPACK_IMPORTED_MODULE_0__;\n//# sourceMappingURL=path.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmZzLXBhdGgvanMvZXM2L3BhdGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBDO0FBQ2I7QUFDdEIsY0FBYyx3Q0FBUztBQUM5QjtBQUNPLGNBQWMsd0NBQVM7QUFDOUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXE9uZURyaXZlXFxEZXNrdG9wXFx2YXVsdHF1ZXN0XFxub2RlX21vZHVsZXNcXGJmcy1wYXRoXFxqc1xcZXM2XFxwYXRoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBvc2l4UGF0aCBmcm9tICcuL3Bvc2l4X3BhdGgnO1xuZXhwb3J0ICogZnJvbSAnLi9wb3NpeF9wYXRoJztcbmV4cG9ydCBjb25zdCBwb3NpeCA9IHBvc2l4UGF0aDtcbi8vIFhYWDogVHlwaW5nIGhhY2s6IEV4cG9ydGVkIHNvIHRoZSB0eXBlIG9mIHRoaXMgbW9kdWxlIG1hdGNoZXMgTm9kZUpTJ3MgcGF0aC5cbmV4cG9ydCBjb25zdCB3aW4zMiA9IHBvc2l4UGF0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdGguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bfs-path/js/es6/path.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bfs-path/js/es6/posix_path.js":
/*!****************************************************!*\
  !*** ./node_modules/bfs-path/js/es6/posix_path.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _makeLong: () => (/* binding */ _makeLong),\n/* harmony export */   _removeDuplicateSeps: () => (/* binding */ _removeDuplicateSeps),\n/* harmony export */   _replaceRegex: () => (/* binding */ _replaceRegex),\n/* harmony export */   basename: () => (/* binding */ basename),\n/* harmony export */   delimiter: () => (/* binding */ delimiter),\n/* harmony export */   dirname: () => (/* binding */ dirname),\n/* harmony export */   extname: () => (/* binding */ extname),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   isAbsolute: () => (/* binding */ isAbsolute),\n/* harmony export */   join: () => (/* binding */ join),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   relative: () => (/* binding */ relative),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   sep: () => (/* binding */ sep)\n/* harmony export */ });\n/**\n * Emulates Node's `path` module. This module contains utilities for handling and\n * transforming file paths. **All** of these methods perform only string\n * transformations. The file system is not consulted to check whether paths are\n * valid.\n * @see http://nodejs.org/api/path.html\n */\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nfunction posixSplitPath(filename) {\n    var out = splitPathRe.exec(filename);\n    out.shift();\n    return out;\n}\n/**\n * Normalize a string path, taking care of '..' and '.' parts.\n *\n * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.\n * @example Usage example\n *   path.normalize('/foo/bar//baz/asdf/quux/..')\n *   // returns\n *   '/foo/bar/baz/asdf'\n * @param [String] p The path to normalize.\n * @return [String]\n */\nfunction normalize(p) {\n    // Special case: '' -> '.'\n    if (p === '') {\n        p = '.';\n    }\n    // It's very important to know if the path is relative or not, since it\n    // changes how we process .. and reconstruct the split string.\n    var absolute = p.charAt(0) === sep;\n    // Remove repeated //s\n    p = _removeDuplicateSeps(p);\n    // Try to remove as many '../' as possible, and remove '.' completely.\n    var components = p.split(sep);\n    var goodComponents = [];\n    for (var idx = 0; idx < components.length; idx++) {\n        var c = components[idx];\n        if (c === '.') {\n            continue;\n        }\n        else if (c === '..' && (absolute || (!absolute && goodComponents.length > 0 && goodComponents[0] !== '..'))) {\n            // In the absolute case: Path is relative to root, so we may pop even if\n            // goodComponents is empty (e.g. /../ => /)\n            // In the relative case: We're getting rid of a directory that preceded\n            // it (e.g. /foo/../bar -> /bar)\n            goodComponents.pop();\n        }\n        else {\n            goodComponents.push(c);\n        }\n    }\n    // Add in '.' when it's a relative path with no other nonempty components.\n    // Possible results: '.' and './' (input: [''] or [])\n    // @todo Can probably simplify this logic.\n    if (!absolute && goodComponents.length < 2) {\n        switch (goodComponents.length) {\n            case 1:\n                if (goodComponents[0] === '') {\n                    goodComponents.unshift('.');\n                }\n                break;\n            default:\n                goodComponents.push('.');\n        }\n    }\n    p = goodComponents.join(sep);\n    if (absolute && p.charAt(0) !== sep) {\n        p = sep + p;\n    }\n    return p;\n}\n/**\n * Join all arguments together and normalize the resulting path.\n *\n * Arguments must be strings.\n * @example Usage\n *   path.join('/foo', 'bar', 'baz/asdf', 'quux', '..')\n *   // returns\n *   '/foo/bar/baz/asdf'\n *\n *   path.join('foo', {}, 'bar')\n *   // throws exception\n *   TypeError: Arguments to path.join must be strings\n * @param [String,...] paths Each component of the path\n * @return [String]\n */\nfunction join(...paths) {\n    // Required: Prune any non-strings from the path. I also prune empty segments\n    // so we can do a simple join of the array.\n    var processed = [];\n    for (var i = 0; i < paths.length; i++) {\n        var segment = paths[i];\n        if (typeof segment !== 'string') {\n            throw new TypeError(\"Invalid argument type to path.join: \" + (typeof segment));\n        }\n        else if (segment !== '') {\n            processed.push(segment);\n        }\n    }\n    return normalize(processed.join(sep));\n}\n/**\n * Resolves to to an absolute path.\n *\n * If to isn't already absolute from arguments are prepended in right to left\n * order, until an absolute path is found. If after using all from paths still\n * no absolute path is found, the current working directory is used as well.\n * The resulting path is normalized, and trailing slashes are removed unless\n * the path gets resolved to the root directory. Non-string arguments are\n * ignored.\n *\n * Another way to think of it is as a sequence of cd commands in a shell.\n *\n *     path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subfile')\n *\n * Is similar to:\n *\n *     cd foo/bar\n *     cd /tmp/file/\n *     cd ..\n *     cd a/../subfile\n *     pwd\n *\n * The difference is that the different paths don't need to exist and may also\n * be files.\n * @example Usage example\n *   path.resolve('/foo/bar', './baz')\n *   // returns\n *   '/foo/bar/baz'\n *\n *   path.resolve('/foo/bar', '/tmp/file/')\n *   // returns\n *   '/tmp/file'\n *\n *   path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n *   // if currently in /home/myself/node, it returns\n *   '/home/myself/node/wwwroot/static_files/gif/image.gif'\n * @param [String,...] paths\n * @return [String]\n */\nfunction resolve(...paths) {\n    // Monitor for invalid paths, throw out empty paths, and look for the *last*\n    // absolute path that we see.\n    var processed = [];\n    for (var i = 0; i < paths.length; i++) {\n        var p = paths[i];\n        if (typeof p !== 'string') {\n            throw new TypeError(\"Invalid argument type to path.join: \" + (typeof p));\n        }\n        else if (p !== '') {\n            // Remove anything that has occurred before this absolute path, as it\n            // doesn't matter.\n            if (p.charAt(0) === sep) {\n                processed = [];\n            }\n            processed.push(p);\n        }\n    }\n    // Special: Remove trailing slash unless it's the root\n    var resolved = normalize(processed.join(sep));\n    if (resolved.length > 1 && resolved.charAt(resolved.length - 1) === sep) {\n        return resolved.substr(0, resolved.length - 1);\n    }\n    // Special: If it doesn't start with '/', it's relative and we need to append\n    // the current directory.\n    if (resolved.charAt(0) !== sep) {\n        // Remove ./, since we're going to append the current directory.\n        if (resolved.charAt(0) === '.' && (resolved.length === 1 || resolved.charAt(1) === sep)) {\n            resolved = resolved.length === 1 ? '' : resolved.substr(2);\n        }\n        // Append the current directory, which *must* be an absolute path.\n        var cwd = process.cwd();\n        if (resolved !== '') {\n            // cwd will never end in a /... unless it's the root.\n            resolved = normalize(cwd + (cwd !== '/' ? sep : '') + resolved);\n        }\n        else {\n            resolved = cwd;\n        }\n    }\n    return resolved;\n}\n/**\n * Solve the relative path from from to to.\n *\n * At times we have two absolute paths, and we need to derive the relative path\n * from one to the other. This is actually the reverse transform of\n * path.resolve, which means we see that:\n *\n *    path.resolve(from, path.relative(from, to)) == path.resolve(to)\n *\n * @example Usage example\n *   path.relative('C:\\\\orandea\\\\test\\\\aaa', 'C:\\\\orandea\\\\impl\\\\bbb')\n *   // returns\n *   '..\\\\..\\\\impl\\\\bbb'\n *\n *   path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')\n *   // returns\n *   '../../impl/bbb'\n * @param [String] from\n * @param [String] to\n * @return [String]\n */\nfunction relative(from, to) {\n    var i;\n    // Alright. Let's resolve these two to absolute paths and remove any\n    // weirdness.\n    from = resolve(from);\n    to = resolve(to);\n    var fromSegs = from.split(sep);\n    var toSegs = to.split(sep);\n    // Remove the first segment on both, as it's '' (both are absolute paths)\n    toSegs.shift();\n    fromSegs.shift();\n    // There are two segments to this path:\n    // * Going *up* the directory hierarchy with '..'\n    // * Going *down* the directory hierarchy with foo/baz/bat.\n    var upCount = 0;\n    var downSegs = [];\n    // Figure out how many things in 'from' are shared with 'to'.\n    for (i = 0; i < fromSegs.length; i++) {\n        var seg = fromSegs[i];\n        if (seg === toSegs[i]) {\n            continue;\n        }\n        // The rest of 'from', including the current element, indicates how many\n        // directories we need to go up.\n        upCount = fromSegs.length - i;\n        break;\n    }\n    // The rest of 'to' indicates where we need to change to. We place this\n    // outside of the loop, as toSegs.length may be greater than fromSegs.length.\n    downSegs = toSegs.slice(i);\n    // Special case: If 'from' is '/'\n    if (fromSegs.length === 1 && fromSegs[0] === '') {\n        upCount = 0;\n    }\n    // upCount can't be greater than the number of fromSegs\n    // (cd .. from / is still /)\n    if (upCount > fromSegs.length) {\n        upCount = fromSegs.length;\n    }\n    // Create the final string!\n    var rv = '';\n    for (i = 0; i < upCount; i++) {\n        rv += '../';\n    }\n    rv += downSegs.join(sep);\n    // Special case: Remove trailing '/'. Happens if it's all up and no down.\n    if (rv.length > 1 && rv.charAt(rv.length - 1) === sep) {\n        rv = rv.substr(0, rv.length - 1);\n    }\n    return rv;\n}\n/**\n * Return the directory name of a path. Similar to the Unix `dirname` command.\n *\n * Note that BrowserFS does not validate if the path is actually a valid\n * directory.\n * @example Usage example\n *   path.dirname('/foo/bar/baz/asdf/quux')\n *   // returns\n *   '/foo/bar/baz/asdf'\n * @param [String] p The path to get the directory name of.\n * @return [String]\n */\nfunction dirname(p) {\n    // We get rid of //, but we don't modify anything else (e.g. any extraneous .\n    // and ../ are kept intact)\n    p = _removeDuplicateSeps(p);\n    var absolute = p.charAt(0) === sep;\n    var sections = p.split(sep);\n    // Do 1 if it's /foo/bar, 2 if it's /foo/bar/\n    if (sections.pop() === '' && sections.length > 0) {\n        sections.pop();\n    }\n    // # of sections needs to be > 1 if absolute, since the first section is '' for '/'.\n    // If not absolute, the first section is the first part of the path, and is OK\n    // to return.\n    if (sections.length > 1 || (sections.length === 1 && !absolute)) {\n        return sections.join(sep);\n    }\n    else if (absolute) {\n        return sep;\n    }\n    else {\n        return '.';\n    }\n}\n/**\n * Return the last portion of a path. Similar to the Unix basename command.\n * @example Usage example\n *   path.basename('/foo/bar/baz/asdf/quux.html')\n *   // returns\n *   'quux.html'\n *\n *   path.basename('/foo/bar/baz/asdf/quux.html', '.html')\n *   // returns\n *   'quux'\n * @param [String] p\n * @param [String?] ext\n * @return [String]\n */\nfunction basename(p, ext = \"\") {\n    // Special case: Normalize will modify this to '.'\n    if (p === '') {\n        return p;\n    }\n    // Normalize the string first to remove any weirdness.\n    p = normalize(p);\n    // Get the last part of the string.\n    var sections = p.split(sep);\n    var lastPart = sections[sections.length - 1];\n    // Special case: If it's empty, then we have a string like so: foo/\n    // Meaning, 'foo' is guaranteed to be a directory.\n    if (lastPart === '' && sections.length > 1) {\n        return sections[sections.length - 2];\n    }\n    // Remove the extension, if need be.\n    if (ext.length > 0) {\n        var lastPartExt = lastPart.substr(lastPart.length - ext.length);\n        if (lastPartExt === ext) {\n            return lastPart.substr(0, lastPart.length - ext.length);\n        }\n    }\n    return lastPart;\n}\n/**\n * Return the extension of the path, from the last '.' to end of string in the\n * last portion of the path. If there is no '.' in the last portion of the path\n * or the first character of it is '.', then it returns an empty string.\n * @example Usage example\n *   path.extname('index.html')\n *   // returns\n *   '.html'\n *\n *   path.extname('index.')\n *   // returns\n *   '.'\n *\n *   path.extname('index')\n *   // returns\n *   ''\n * @param [String] p\n * @return [String]\n */\nfunction extname(p) {\n    p = normalize(p);\n    var sections = p.split(sep);\n    p = sections.pop();\n    // Special case: foo/file.ext/ should return '.ext'\n    if (p === '' && sections.length > 0) {\n        p = sections.pop();\n    }\n    if (p === '..') {\n        return '';\n    }\n    var i = p.lastIndexOf('.');\n    if (i === -1 || i === 0) {\n        return '';\n    }\n    return p.substr(i);\n}\n/**\n * Checks if the given path is an absolute path.\n *\n * Despite not being documented, this is a tested part of Node's path API.\n * @param [String] p\n * @return [Boolean] True if the path appears to be an absolute path.\n */\nfunction isAbsolute(p) {\n    return p.length > 0 && p.charAt(0) === sep;\n}\n/**\n * Unknown. Undocumented.\n */\nfunction _makeLong(p) {\n    return p;\n}\n/**\n * Returns an object from a path string.\n */\nfunction parse(p) {\n    var allParts = posixSplitPath(p);\n    return {\n        root: allParts[0],\n        dir: allParts[0] + allParts[1].slice(0, -1),\n        base: allParts[2],\n        ext: allParts[3],\n        name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n    };\n}\nfunction format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n        throw new TypeError(`Parameter 'pathObject' must be an object, not ${typeof pathObject}`);\n    }\n    var root = pathObject.root || '';\n    if (typeof root !== 'string') {\n        throw new TypeError(\"'pathObject.root' must be a string or undefined, not \" +\n            typeof pathObject.root);\n    }\n    var dir = pathObject.dir ? pathObject.dir + sep : '';\n    var base = pathObject.base || '';\n    return dir + base;\n}\n// The platform-specific file separator. BrowserFS uses `/`.\nconst sep = '/';\nconst _replaceRegex = new RegExp(\"//+\", 'g');\nfunction _removeDuplicateSeps(p) {\n    p = p.replace(_replaceRegex, sep);\n    return p;\n}\n// The platform-specific path delimiter. BrowserFS uses `:`.\nconst delimiter = ':';\n//# sourceMappingURL=posix_path.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bfs-path/js/es6/posix_path.js\n");

/***/ })

};
;